// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.25.0
// 	protoc        v3.21.4
// source: sui.proto

package sui_checkpoint_v1

import (
	proto "github.com/golang/protobuf/proto"
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	emptypb "google.golang.org/protobuf/types/known/emptypb"
	reflect "reflect"
	sync "sync"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

// This is a compile-time assertion that a sufficiently up-to-date version
// of the legacy proto package is being used.
const _ = proto.ProtoPackageIsVersion4

type CheckpointData struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Checkpoint     *Checkpoint                           `protobuf:"bytes,1,opt,name=checkpoint,proto3" json:"checkpoint,omitempty"`
	Transactions   []*CheckpointTransactionBlockResponse `protobuf:"bytes,2,rep,name=transactions,proto3" json:"transactions,omitempty"`
	ChangedObjects []*ChangedObject                      `protobuf:"bytes,3,rep,name=changed_objects,json=changedObjects,proto3" json:"changed_objects,omitempty"`
}

func (x *CheckpointData) Reset() {
	*x = CheckpointData{}
	if protoimpl.UnsafeEnabled {
		mi := &file_sui_proto_msgTypes[0]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CheckpointData) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CheckpointData) ProtoMessage() {}

func (x *CheckpointData) ProtoReflect() protoreflect.Message {
	mi := &file_sui_proto_msgTypes[0]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CheckpointData.ProtoReflect.Descriptor instead.
func (*CheckpointData) Descriptor() ([]byte, []int) {
	return file_sui_proto_rawDescGZIP(), []int{0}
}

func (x *CheckpointData) GetCheckpoint() *Checkpoint {
	if x != nil {
		return x.Checkpoint
	}
	return nil
}

func (x *CheckpointData) GetTransactions() []*CheckpointTransactionBlockResponse {
	if x != nil {
		return x.Transactions
	}
	return nil
}

func (x *CheckpointData) GetChangedObjects() []*ChangedObject {
	if x != nil {
		return x.ChangedObjects
	}
	return nil
}

type Checkpoint struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Checkpoint's epoch ID
	Epoch uint64 `protobuf:"varint,1,opt,name=epoch,proto3" json:"epoch,omitempty"`
	// Checkpoint sequence number
	SequenceNumber uint64 `protobuf:"varint,2,opt,name=sequence_number,json=sequenceNumber,proto3" json:"sequence_number,omitempty"`
	// Checkpoint digest (base58 encoded)
	Digest string `protobuf:"bytes,3,opt,name=digest,proto3" json:"digest,omitempty"`
	// Total number of transactions committed since genesis, including those in this checkpoint.
	NetworkTotalTransactions uint64 `protobuf:"varint,4,opt,name=network_total_transactions,json=networkTotalTransactions,proto3" json:"network_total_transactions,omitempty"`
	// Digest of the previous checkpoint
	PreviousDigest *string `protobuf:"bytes,5,opt,name=previous_digest,json=previousDigest,proto3,oneof" json:"previous_digest,omitempty"`
	// The running total gas costs of all transactions included in the current epoch so far until this checkpoint.
	EpochRollingGasCostSummary *GasCostSummary `protobuf:"bytes,6,opt,name=epoch_rolling_gas_cost_summary,json=epochRollingGasCostSummary,proto3" json:"epoch_rolling_gas_cost_summary,omitempty"`
	// Timestamp of the checkpoint - number of milliseconds from the Unix epoch
	// Checkpoint timestamps are monotonic, but not strongly monotonic - subsequent
	// checkpoints can have same timestamp if they originate from the same underlining consensus commit
	TimestampMs uint64 `protobuf:"varint,7,opt,name=timestamp_ms,json=timestampMs,proto3" json:"timestamp_ms,omitempty"`
	// Present only on the final checkpoint of the epoch.
	EndOfEpochData *EndOfEpochData `protobuf:"bytes,8,opt,name=end_of_epoch_data,json=endOfEpochData,proto3,oneof" json:"end_of_epoch_data,omitempty"`
	// Transaction digests (base58 encoded)
	Transactions []string `protobuf:"bytes,9,rep,name=transactions,proto3" json:"transactions,omitempty"`
	// Commitments to checkpoint state
	CheckpointCommitments []*CheckpointCommitment `protobuf:"bytes,10,rep,name=checkpoint_commitments,json=checkpointCommitments,proto3" json:"checkpoint_commitments,omitempty"`
	// Validator Signature (base64  encoded). This is a BLS signature
	ValidatorSignature []byte `protobuf:"bytes,11,opt,name=validator_signature,json=validatorSignature,proto3" json:"validator_signature,omitempty"`
}

func (x *Checkpoint) Reset() {
	*x = Checkpoint{}
	if protoimpl.UnsafeEnabled {
		mi := &file_sui_proto_msgTypes[1]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Checkpoint) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Checkpoint) ProtoMessage() {}

func (x *Checkpoint) ProtoReflect() protoreflect.Message {
	mi := &file_sui_proto_msgTypes[1]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Checkpoint.ProtoReflect.Descriptor instead.
func (*Checkpoint) Descriptor() ([]byte, []int) {
	return file_sui_proto_rawDescGZIP(), []int{1}
}

func (x *Checkpoint) GetEpoch() uint64 {
	if x != nil {
		return x.Epoch
	}
	return 0
}

func (x *Checkpoint) GetSequenceNumber() uint64 {
	if x != nil {
		return x.SequenceNumber
	}
	return 0
}

func (x *Checkpoint) GetDigest() string {
	if x != nil {
		return x.Digest
	}
	return ""
}

func (x *Checkpoint) GetNetworkTotalTransactions() uint64 {
	if x != nil {
		return x.NetworkTotalTransactions
	}
	return 0
}

func (x *Checkpoint) GetPreviousDigest() string {
	if x != nil && x.PreviousDigest != nil {
		return *x.PreviousDigest
	}
	return ""
}

func (x *Checkpoint) GetEpochRollingGasCostSummary() *GasCostSummary {
	if x != nil {
		return x.EpochRollingGasCostSummary
	}
	return nil
}

func (x *Checkpoint) GetTimestampMs() uint64 {
	if x != nil {
		return x.TimestampMs
	}
	return 0
}

func (x *Checkpoint) GetEndOfEpochData() *EndOfEpochData {
	if x != nil {
		return x.EndOfEpochData
	}
	return nil
}

func (x *Checkpoint) GetTransactions() []string {
	if x != nil {
		return x.Transactions
	}
	return nil
}

func (x *Checkpoint) GetCheckpointCommitments() []*CheckpointCommitment {
	if x != nil {
		return x.CheckpointCommitments
	}
	return nil
}

func (x *Checkpoint) GetValidatorSignature() []byte {
	if x != nil {
		return x.ValidatorSignature
	}
	return nil
}

type CheckpointTransactionBlockResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Digest string `protobuf:"bytes,1,opt,name=digest,proto3" json:"digest,omitempty"`
	// Transaction input data
	Transaction             *SuiTransactionBlock        `protobuf:"bytes,2,opt,name=transaction,proto3" json:"transaction,omitempty"`
	RawTransaction          []byte                      `protobuf:"bytes,3,opt,name=raw_transaction,json=rawTransaction,proto3" json:"raw_transaction,omitempty"`
	Effects                 *SuiTransactionBlockEffects `protobuf:"bytes,4,opt,name=effects,proto3" json:"effects,omitempty"`
	Events                  *SuiTransactionBlockEvents  `protobuf:"bytes,5,opt,name=events,proto3" json:"events,omitempty"`
	TimestampMs             uint64                      `protobuf:"varint,6,opt,name=timestamp_ms,json=timestampMs,proto3" json:"timestamp_ms,omitempty"`
	ConfirmedLocalExecution *bool                       `protobuf:"varint,7,opt,name=confirmed_local_execution,json=confirmedLocalExecution,proto3,oneof" json:"confirmed_local_execution,omitempty"`
	Checkpoint              uint64                      `protobuf:"varint,8,opt,name=checkpoint,proto3" json:"checkpoint,omitempty"`
}

func (x *CheckpointTransactionBlockResponse) Reset() {
	*x = CheckpointTransactionBlockResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_sui_proto_msgTypes[2]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CheckpointTransactionBlockResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CheckpointTransactionBlockResponse) ProtoMessage() {}

func (x *CheckpointTransactionBlockResponse) ProtoReflect() protoreflect.Message {
	mi := &file_sui_proto_msgTypes[2]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CheckpointTransactionBlockResponse.ProtoReflect.Descriptor instead.
func (*CheckpointTransactionBlockResponse) Descriptor() ([]byte, []int) {
	return file_sui_proto_rawDescGZIP(), []int{2}
}

func (x *CheckpointTransactionBlockResponse) GetDigest() string {
	if x != nil {
		return x.Digest
	}
	return ""
}

func (x *CheckpointTransactionBlockResponse) GetTransaction() *SuiTransactionBlock {
	if x != nil {
		return x.Transaction
	}
	return nil
}

func (x *CheckpointTransactionBlockResponse) GetRawTransaction() []byte {
	if x != nil {
		return x.RawTransaction
	}
	return nil
}

func (x *CheckpointTransactionBlockResponse) GetEffects() *SuiTransactionBlockEffects {
	if x != nil {
		return x.Effects
	}
	return nil
}

func (x *CheckpointTransactionBlockResponse) GetEvents() *SuiTransactionBlockEvents {
	if x != nil {
		return x.Events
	}
	return nil
}

func (x *CheckpointTransactionBlockResponse) GetTimestampMs() uint64 {
	if x != nil {
		return x.TimestampMs
	}
	return 0
}

func (x *CheckpointTransactionBlockResponse) GetConfirmedLocalExecution() bool {
	if x != nil && x.ConfirmedLocalExecution != nil {
		return *x.ConfirmedLocalExecution
	}
	return false
}

func (x *CheckpointTransactionBlockResponse) GetCheckpoint() uint64 {
	if x != nil {
		return x.Checkpoint
	}
	return 0
}

type GasCostSummary struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Cost of computation/execution
	ComputationCost uint64 `protobuf:"varint,1,opt,name=computation_cost,json=computationCost,proto3" json:"computation_cost,omitempty"`
	// Storage cost, it's the sum of all storage cost for all objects created or mutated.
	StorageCost uint64 `protobuf:"varint,2,opt,name=storage_cost,json=storageCost,proto3" json:"storage_cost,omitempty"`
	// The amount of storage cost refunded to the user for all objects deleted or mutated in the transaction.
	StorageRebate uint64 `protobuf:"varint,3,opt,name=storage_rebate,json=storageRebate,proto3" json:"storage_rebate,omitempty"`
	// The fee for the rebate. The portion of the storage rebate kept by the system.
	NonRefundableStorageFee uint64 `protobuf:"varint,4,opt,name=non_refundable_storage_fee,json=nonRefundableStorageFee,proto3" json:"non_refundable_storage_fee,omitempty"`
}

func (x *GasCostSummary) Reset() {
	*x = GasCostSummary{}
	if protoimpl.UnsafeEnabled {
		mi := &file_sui_proto_msgTypes[3]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GasCostSummary) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GasCostSummary) ProtoMessage() {}

func (x *GasCostSummary) ProtoReflect() protoreflect.Message {
	mi := &file_sui_proto_msgTypes[3]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GasCostSummary.ProtoReflect.Descriptor instead.
func (*GasCostSummary) Descriptor() ([]byte, []int) {
	return file_sui_proto_rawDescGZIP(), []int{3}
}

func (x *GasCostSummary) GetComputationCost() uint64 {
	if x != nil {
		return x.ComputationCost
	}
	return 0
}

func (x *GasCostSummary) GetStorageCost() uint64 {
	if x != nil {
		return x.StorageCost
	}
	return 0
}

func (x *GasCostSummary) GetStorageRebate() uint64 {
	if x != nil {
		return x.StorageRebate
	}
	return 0
}

func (x *GasCostSummary) GetNonRefundableStorageFee() uint64 {
	if x != nil {
		return x.NonRefundableStorageFee
	}
	return 0
}

type EndOfEpochData struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// next_epoch_committee is `Some` if and only if the current checkpoint is
	// the last checkpoint of an epoch.
	// Therefore next_epoch_committee can be used to pick the last checkpoint of an epoch,
	// which is often useful to get epoch level summary stats like total gas cost of an epoch,
	// or the total number of transactions from genesis to the end of an epoch.
	// The committee is stored as a vector of validator pub key and stake pairs. The vector
	// should be sorted based on the Committee data structure.
	NextEpochCommittee []*NextEpochCommittee `protobuf:"bytes,1,rep,name=next_epoch_committee,json=nextEpochCommittee,proto3" json:"next_epoch_committee,omitempty"`
	// The protocol version that is in effect during the epoch that starts immediately after this checkpoint.
	NextEpochProtocolVersion uint64 `protobuf:"varint,2,opt,name=next_epoch_protocol_version,json=nextEpochProtocolVersion,proto3" json:"next_epoch_protocol_version,omitempty"`
	// Commitments to epoch specific state (e.g. live object set)
	EpochCommitments []*CheckpointCommitment `protobuf:"bytes,3,rep,name=epoch_commitments,json=epochCommitments,proto3" json:"epoch_commitments,omitempty"`
}

func (x *EndOfEpochData) Reset() {
	*x = EndOfEpochData{}
	if protoimpl.UnsafeEnabled {
		mi := &file_sui_proto_msgTypes[4]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *EndOfEpochData) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*EndOfEpochData) ProtoMessage() {}

func (x *EndOfEpochData) ProtoReflect() protoreflect.Message {
	mi := &file_sui_proto_msgTypes[4]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use EndOfEpochData.ProtoReflect.Descriptor instead.
func (*EndOfEpochData) Descriptor() ([]byte, []int) {
	return file_sui_proto_rawDescGZIP(), []int{4}
}

func (x *EndOfEpochData) GetNextEpochCommittee() []*NextEpochCommittee {
	if x != nil {
		return x.NextEpochCommittee
	}
	return nil
}

func (x *EndOfEpochData) GetNextEpochProtocolVersion() uint64 {
	if x != nil {
		return x.NextEpochProtocolVersion
	}
	return 0
}

func (x *EndOfEpochData) GetEpochCommitments() []*CheckpointCommitment {
	if x != nil {
		return x.EpochCommitments
	}
	return nil
}

type NextEpochCommittee struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	AuthorityName string `protobuf:"bytes,1,opt,name=authority_name,json=authorityName,proto3" json:"authority_name,omitempty"`
	StakeUnit     uint64 `protobuf:"varint,2,opt,name=stake_unit,json=stakeUnit,proto3" json:"stake_unit,omitempty"`
}

func (x *NextEpochCommittee) Reset() {
	*x = NextEpochCommittee{}
	if protoimpl.UnsafeEnabled {
		mi := &file_sui_proto_msgTypes[5]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *NextEpochCommittee) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*NextEpochCommittee) ProtoMessage() {}

func (x *NextEpochCommittee) ProtoReflect() protoreflect.Message {
	mi := &file_sui_proto_msgTypes[5]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use NextEpochCommittee.ProtoReflect.Descriptor instead.
func (*NextEpochCommittee) Descriptor() ([]byte, []int) {
	return file_sui_proto_rawDescGZIP(), []int{5}
}

func (x *NextEpochCommittee) GetAuthorityName() string {
	if x != nil {
		return x.AuthorityName
	}
	return ""
}

func (x *NextEpochCommittee) GetStakeUnit() uint64 {
	if x != nil {
		return x.StakeUnit
	}
	return 0
}

type CheckpointCommitment struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Types that are assignable to CheckpointCommitment:
	//
	//	*CheckpointCommitment_ECMHLiveObjectSetDigest
	CheckpointCommitment isCheckpointCommitment_CheckpointCommitment `protobuf_oneof:"checkpoint_commitment"`
}

func (x *CheckpointCommitment) Reset() {
	*x = CheckpointCommitment{}
	if protoimpl.UnsafeEnabled {
		mi := &file_sui_proto_msgTypes[6]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CheckpointCommitment) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CheckpointCommitment) ProtoMessage() {}

func (x *CheckpointCommitment) ProtoReflect() protoreflect.Message {
	mi := &file_sui_proto_msgTypes[6]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CheckpointCommitment.ProtoReflect.Descriptor instead.
func (*CheckpointCommitment) Descriptor() ([]byte, []int) {
	return file_sui_proto_rawDescGZIP(), []int{6}
}

func (m *CheckpointCommitment) GetCheckpointCommitment() isCheckpointCommitment_CheckpointCommitment {
	if m != nil {
		return m.CheckpointCommitment
	}
	return nil
}

func (x *CheckpointCommitment) GetECMHLiveObjectSetDigest() *ECMHLiveObjectSetDigest {
	if x, ok := x.GetCheckpointCommitment().(*CheckpointCommitment_ECMHLiveObjectSetDigest); ok {
		return x.ECMHLiveObjectSetDigest
	}
	return nil
}

type isCheckpointCommitment_CheckpointCommitment interface {
	isCheckpointCommitment_CheckpointCommitment()
}

type CheckpointCommitment_ECMHLiveObjectSetDigest struct {
	ECMHLiveObjectSetDigest *ECMHLiveObjectSetDigest `protobuf:"bytes,1,opt,name=ECMH_live_object_set_digest,json=ECMHLiveObjectSetDigest,proto3,oneof"`
}

func (*CheckpointCommitment_ECMHLiveObjectSetDigest) isCheckpointCommitment_CheckpointCommitment() {}

type ECMHLiveObjectSetDigest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// base58 encoded
	Digest string `protobuf:"bytes,1,opt,name=digest,proto3" json:"digest,omitempty"`
}

func (x *ECMHLiveObjectSetDigest) Reset() {
	*x = ECMHLiveObjectSetDigest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_sui_proto_msgTypes[7]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ECMHLiveObjectSetDigest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ECMHLiveObjectSetDigest) ProtoMessage() {}

func (x *ECMHLiveObjectSetDigest) ProtoReflect() protoreflect.Message {
	mi := &file_sui_proto_msgTypes[7]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ECMHLiveObjectSetDigest.ProtoReflect.Descriptor instead.
func (*ECMHLiveObjectSetDigest) Descriptor() ([]byte, []int) {
	return file_sui_proto_rawDescGZIP(), []int{7}
}

func (x *ECMHLiveObjectSetDigest) GetDigest() string {
	if x != nil {
		return x.Digest
	}
	return ""
}

type SuiTransactionBlock struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Data *SuiTransactionBlockData `protobuf:"bytes,1,opt,name=data,proto3" json:"data,omitempty"`
}

func (x *SuiTransactionBlock) Reset() {
	*x = SuiTransactionBlock{}
	if protoimpl.UnsafeEnabled {
		mi := &file_sui_proto_msgTypes[8]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *SuiTransactionBlock) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SuiTransactionBlock) ProtoMessage() {}

func (x *SuiTransactionBlock) ProtoReflect() protoreflect.Message {
	mi := &file_sui_proto_msgTypes[8]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SuiTransactionBlock.ProtoReflect.Descriptor instead.
func (*SuiTransactionBlock) Descriptor() ([]byte, []int) {
	return file_sui_proto_rawDescGZIP(), []int{8}
}

func (x *SuiTransactionBlock) GetData() *SuiTransactionBlockData {
	if x != nil {
		return x.Data
	}
	return nil
}

type SuiTransactionBlockData struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Types that are assignable to SuiTransactionBlockData:
	//
	//	*SuiTransactionBlockData_V1
	SuiTransactionBlockData isSuiTransactionBlockData_SuiTransactionBlockData `protobuf_oneof:"sui_transaction_block_data"`
}

func (x *SuiTransactionBlockData) Reset() {
	*x = SuiTransactionBlockData{}
	if protoimpl.UnsafeEnabled {
		mi := &file_sui_proto_msgTypes[9]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *SuiTransactionBlockData) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SuiTransactionBlockData) ProtoMessage() {}

func (x *SuiTransactionBlockData) ProtoReflect() protoreflect.Message {
	mi := &file_sui_proto_msgTypes[9]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SuiTransactionBlockData.ProtoReflect.Descriptor instead.
func (*SuiTransactionBlockData) Descriptor() ([]byte, []int) {
	return file_sui_proto_rawDescGZIP(), []int{9}
}

func (m *SuiTransactionBlockData) GetSuiTransactionBlockData() isSuiTransactionBlockData_SuiTransactionBlockData {
	if m != nil {
		return m.SuiTransactionBlockData
	}
	return nil
}

func (x *SuiTransactionBlockData) GetV1() *SuiTransactionBlockDataV1 {
	if x, ok := x.GetSuiTransactionBlockData().(*SuiTransactionBlockData_V1); ok {
		return x.V1
	}
	return nil
}

type isSuiTransactionBlockData_SuiTransactionBlockData interface {
	isSuiTransactionBlockData_SuiTransactionBlockData()
}

type SuiTransactionBlockData_V1 struct {
	V1 *SuiTransactionBlockDataV1 `protobuf:"bytes,1,opt,name=v1,proto3,oneof"`
}

func (*SuiTransactionBlockData_V1) isSuiTransactionBlockData_SuiTransactionBlockData() {}

type SuiTransactionBlockDataV1 struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Transaction *SuiTransactionBlockKind `protobuf:"bytes,1,opt,name=transaction,proto3" json:"transaction,omitempty"`
	Sender      string                   `protobuf:"bytes,2,opt,name=sender,proto3" json:"sender,omitempty"`
	GasData     *SuiGasData              `protobuf:"bytes,3,opt,name=gas_data,json=gasData,proto3" json:"gas_data,omitempty"`
}

func (x *SuiTransactionBlockDataV1) Reset() {
	*x = SuiTransactionBlockDataV1{}
	if protoimpl.UnsafeEnabled {
		mi := &file_sui_proto_msgTypes[10]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *SuiTransactionBlockDataV1) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SuiTransactionBlockDataV1) ProtoMessage() {}

func (x *SuiTransactionBlockDataV1) ProtoReflect() protoreflect.Message {
	mi := &file_sui_proto_msgTypes[10]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SuiTransactionBlockDataV1.ProtoReflect.Descriptor instead.
func (*SuiTransactionBlockDataV1) Descriptor() ([]byte, []int) {
	return file_sui_proto_rawDescGZIP(), []int{10}
}

func (x *SuiTransactionBlockDataV1) GetTransaction() *SuiTransactionBlockKind {
	if x != nil {
		return x.Transaction
	}
	return nil
}

func (x *SuiTransactionBlockDataV1) GetSender() string {
	if x != nil {
		return x.Sender
	}
	return ""
}

func (x *SuiTransactionBlockDataV1) GetGasData() *SuiGasData {
	if x != nil {
		return x.GasData
	}
	return nil
}

type SuiTransactionBlockKind struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Types that are assignable to SuiTransactionBlockKind:
	//
	//	*SuiTransactionBlockKind_ChangeEpoch
	//	*SuiTransactionBlockKind_Genesis
	//	*SuiTransactionBlockKind_ConsensusCommitPrologue
	//	*SuiTransactionBlockKind_ProgrammableTransaction
	SuiTransactionBlockKind isSuiTransactionBlockKind_SuiTransactionBlockKind `protobuf_oneof:"sui_transaction_block_kind"`
}

func (x *SuiTransactionBlockKind) Reset() {
	*x = SuiTransactionBlockKind{}
	if protoimpl.UnsafeEnabled {
		mi := &file_sui_proto_msgTypes[11]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *SuiTransactionBlockKind) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SuiTransactionBlockKind) ProtoMessage() {}

func (x *SuiTransactionBlockKind) ProtoReflect() protoreflect.Message {
	mi := &file_sui_proto_msgTypes[11]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SuiTransactionBlockKind.ProtoReflect.Descriptor instead.
func (*SuiTransactionBlockKind) Descriptor() ([]byte, []int) {
	return file_sui_proto_rawDescGZIP(), []int{11}
}

func (m *SuiTransactionBlockKind) GetSuiTransactionBlockKind() isSuiTransactionBlockKind_SuiTransactionBlockKind {
	if m != nil {
		return m.SuiTransactionBlockKind
	}
	return nil
}

func (x *SuiTransactionBlockKind) GetChangeEpoch() *SuiChangeEpoch {
	if x, ok := x.GetSuiTransactionBlockKind().(*SuiTransactionBlockKind_ChangeEpoch); ok {
		return x.ChangeEpoch
	}
	return nil
}

func (x *SuiTransactionBlockKind) GetGenesis() *SuiGenesisTransaction {
	if x, ok := x.GetSuiTransactionBlockKind().(*SuiTransactionBlockKind_Genesis); ok {
		return x.Genesis
	}
	return nil
}

func (x *SuiTransactionBlockKind) GetConsensusCommitPrologue() *SuiConsensusCommitPrologue {
	if x, ok := x.GetSuiTransactionBlockKind().(*SuiTransactionBlockKind_ConsensusCommitPrologue); ok {
		return x.ConsensusCommitPrologue
	}
	return nil
}

func (x *SuiTransactionBlockKind) GetProgrammableTransaction() *SuiProgrammableTransactionBlock {
	if x, ok := x.GetSuiTransactionBlockKind().(*SuiTransactionBlockKind_ProgrammableTransaction); ok {
		return x.ProgrammableTransaction
	}
	return nil
}

type isSuiTransactionBlockKind_SuiTransactionBlockKind interface {
	isSuiTransactionBlockKind_SuiTransactionBlockKind()
}

type SuiTransactionBlockKind_ChangeEpoch struct {
	// A system transaction that will update epoch information on-chain.
	ChangeEpoch *SuiChangeEpoch `protobuf:"bytes,1,opt,name=change_epoch,json=changeEpoch,proto3,oneof"`
}

type SuiTransactionBlockKind_Genesis struct {
	// A system transaction used for initializing the initial state of the chain.
	Genesis *SuiGenesisTransaction `protobuf:"bytes,2,opt,name=genesis,proto3,oneof"`
}

type SuiTransactionBlockKind_ConsensusCommitPrologue struct {
	// A system transaction marking the start of a series of transactions scheduled as part of a checkpoint
	ConsensusCommitPrologue *SuiConsensusCommitPrologue `protobuf:"bytes,3,opt,name=consensus_commit_prologue,json=consensusCommitPrologue,proto3,oneof"`
}

type SuiTransactionBlockKind_ProgrammableTransaction struct {
	// A series of transactions where the results of one transaction can be used in future transactions
	ProgrammableTransaction *SuiProgrammableTransactionBlock `protobuf:"bytes,4,opt,name=programmable_transaction,json=programmableTransaction,proto3,oneof"`
}

func (*SuiTransactionBlockKind_ChangeEpoch) isSuiTransactionBlockKind_SuiTransactionBlockKind() {}

func (*SuiTransactionBlockKind_Genesis) isSuiTransactionBlockKind_SuiTransactionBlockKind() {}

func (*SuiTransactionBlockKind_ConsensusCommitPrologue) isSuiTransactionBlockKind_SuiTransactionBlockKind() {
}

func (*SuiTransactionBlockKind_ProgrammableTransaction) isSuiTransactionBlockKind_SuiTransactionBlockKind() {
}

type SuiGasData struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Payment []*SuiObjectRef `protobuf:"bytes,1,rep,name=payment,proto3" json:"payment,omitempty"`
	Owner   string          `protobuf:"bytes,2,opt,name=owner,proto3" json:"owner,omitempty"`
	Price   uint64          `protobuf:"varint,3,opt,name=price,proto3" json:"price,omitempty"`
	Budget  uint64          `protobuf:"varint,4,opt,name=budget,proto3" json:"budget,omitempty"`
}

func (x *SuiGasData) Reset() {
	*x = SuiGasData{}
	if protoimpl.UnsafeEnabled {
		mi := &file_sui_proto_msgTypes[12]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *SuiGasData) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SuiGasData) ProtoMessage() {}

func (x *SuiGasData) ProtoReflect() protoreflect.Message {
	mi := &file_sui_proto_msgTypes[12]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SuiGasData.ProtoReflect.Descriptor instead.
func (*SuiGasData) Descriptor() ([]byte, []int) {
	return file_sui_proto_rawDescGZIP(), []int{12}
}

func (x *SuiGasData) GetPayment() []*SuiObjectRef {
	if x != nil {
		return x.Payment
	}
	return nil
}

func (x *SuiGasData) GetOwner() string {
	if x != nil {
		return x.Owner
	}
	return ""
}

func (x *SuiGasData) GetPrice() uint64 {
	if x != nil {
		return x.Price
	}
	return 0
}

func (x *SuiGasData) GetBudget() uint64 {
	if x != nil {
		return x.Budget
	}
	return 0
}

type SuiObjectRef struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Hex code as string representing the object id
	ObjectId *ObjectID `protobuf:"bytes,1,opt,name=object_id,json=objectId,proto3" json:"object_id,omitempty"`
	// Object version.
	Version uint64 `protobuf:"varint,2,opt,name=version,proto3" json:"version,omitempty"`
	// Base58 string representing the object digest
	Digest string `protobuf:"bytes,3,opt,name=digest,proto3" json:"digest,omitempty"`
}

func (x *SuiObjectRef) Reset() {
	*x = SuiObjectRef{}
	if protoimpl.UnsafeEnabled {
		mi := &file_sui_proto_msgTypes[13]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *SuiObjectRef) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SuiObjectRef) ProtoMessage() {}

func (x *SuiObjectRef) ProtoReflect() protoreflect.Message {
	mi := &file_sui_proto_msgTypes[13]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SuiObjectRef.ProtoReflect.Descriptor instead.
func (*SuiObjectRef) Descriptor() ([]byte, []int) {
	return file_sui_proto_rawDescGZIP(), []int{13}
}

func (x *SuiObjectRef) GetObjectId() *ObjectID {
	if x != nil {
		return x.ObjectId
	}
	return nil
}

func (x *SuiObjectRef) GetVersion() uint64 {
	if x != nil {
		return x.Version
	}
	return 0
}

func (x *SuiObjectRef) GetDigest() string {
	if x != nil {
		return x.Digest
	}
	return ""
}

type SuiChangeEpoch struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Epoch                 uint64 `protobuf:"varint,1,opt,name=epoch,proto3" json:"epoch,omitempty"`
	StorageCharge         uint64 `protobuf:"varint,2,opt,name=storage_charge,json=storageCharge,proto3" json:"storage_charge,omitempty"`
	ComputationCharge     uint64 `protobuf:"varint,3,opt,name=computation_charge,json=computationCharge,proto3" json:"computation_charge,omitempty"`
	StorageRebate         uint64 `protobuf:"varint,4,opt,name=storage_rebate,json=storageRebate,proto3" json:"storage_rebate,omitempty"`
	EpochStartTimestampMs uint64 `protobuf:"varint,5,opt,name=epoch_start_timestamp_ms,json=epochStartTimestampMs,proto3" json:"epoch_start_timestamp_ms,omitempty"`
}

func (x *SuiChangeEpoch) Reset() {
	*x = SuiChangeEpoch{}
	if protoimpl.UnsafeEnabled {
		mi := &file_sui_proto_msgTypes[14]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *SuiChangeEpoch) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SuiChangeEpoch) ProtoMessage() {}

func (x *SuiChangeEpoch) ProtoReflect() protoreflect.Message {
	mi := &file_sui_proto_msgTypes[14]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SuiChangeEpoch.ProtoReflect.Descriptor instead.
func (*SuiChangeEpoch) Descriptor() ([]byte, []int) {
	return file_sui_proto_rawDescGZIP(), []int{14}
}

func (x *SuiChangeEpoch) GetEpoch() uint64 {
	if x != nil {
		return x.Epoch
	}
	return 0
}

func (x *SuiChangeEpoch) GetStorageCharge() uint64 {
	if x != nil {
		return x.StorageCharge
	}
	return 0
}

func (x *SuiChangeEpoch) GetComputationCharge() uint64 {
	if x != nil {
		return x.ComputationCharge
	}
	return 0
}

func (x *SuiChangeEpoch) GetStorageRebate() uint64 {
	if x != nil {
		return x.StorageRebate
	}
	return 0
}

func (x *SuiChangeEpoch) GetEpochStartTimestampMs() uint64 {
	if x != nil {
		return x.EpochStartTimestampMs
	}
	return 0
}

type SuiGenesisTransaction struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Objects []*ObjectID `protobuf:"bytes,1,rep,name=objects,proto3" json:"objects,omitempty"`
}

func (x *SuiGenesisTransaction) Reset() {
	*x = SuiGenesisTransaction{}
	if protoimpl.UnsafeEnabled {
		mi := &file_sui_proto_msgTypes[15]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *SuiGenesisTransaction) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SuiGenesisTransaction) ProtoMessage() {}

func (x *SuiGenesisTransaction) ProtoReflect() protoreflect.Message {
	mi := &file_sui_proto_msgTypes[15]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SuiGenesisTransaction.ProtoReflect.Descriptor instead.
func (*SuiGenesisTransaction) Descriptor() ([]byte, []int) {
	return file_sui_proto_rawDescGZIP(), []int{15}
}

func (x *SuiGenesisTransaction) GetObjects() []*ObjectID {
	if x != nil {
		return x.Objects
	}
	return nil
}

type ObjectID struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	AccountAddress string `protobuf:"bytes,1,opt,name=account_address,json=accountAddress,proto3" json:"account_address,omitempty"`
}

func (x *ObjectID) Reset() {
	*x = ObjectID{}
	if protoimpl.UnsafeEnabled {
		mi := &file_sui_proto_msgTypes[16]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ObjectID) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ObjectID) ProtoMessage() {}

func (x *ObjectID) ProtoReflect() protoreflect.Message {
	mi := &file_sui_proto_msgTypes[16]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ObjectID.ProtoReflect.Descriptor instead.
func (*ObjectID) Descriptor() ([]byte, []int) {
	return file_sui_proto_rawDescGZIP(), []int{16}
}

func (x *ObjectID) GetAccountAddress() string {
	if x != nil {
		return x.AccountAddress
	}
	return ""
}

type SuiConsensusCommitPrologue struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Epoch             uint64 `protobuf:"varint,1,opt,name=epoch,proto3" json:"epoch,omitempty"`
	Round             uint64 `protobuf:"varint,2,opt,name=round,proto3" json:"round,omitempty"`
	CommitTimestampMs uint64 `protobuf:"varint,3,opt,name=commit_timestamp_ms,json=commitTimestampMs,proto3" json:"commit_timestamp_ms,omitempty"`
}

func (x *SuiConsensusCommitPrologue) Reset() {
	*x = SuiConsensusCommitPrologue{}
	if protoimpl.UnsafeEnabled {
		mi := &file_sui_proto_msgTypes[17]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *SuiConsensusCommitPrologue) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SuiConsensusCommitPrologue) ProtoMessage() {}

func (x *SuiConsensusCommitPrologue) ProtoReflect() protoreflect.Message {
	mi := &file_sui_proto_msgTypes[17]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SuiConsensusCommitPrologue.ProtoReflect.Descriptor instead.
func (*SuiConsensusCommitPrologue) Descriptor() ([]byte, []int) {
	return file_sui_proto_rawDescGZIP(), []int{17}
}

func (x *SuiConsensusCommitPrologue) GetEpoch() uint64 {
	if x != nil {
		return x.Epoch
	}
	return 0
}

func (x *SuiConsensusCommitPrologue) GetRound() uint64 {
	if x != nil {
		return x.Round
	}
	return 0
}

func (x *SuiConsensusCommitPrologue) GetCommitTimestampMs() uint64 {
	if x != nil {
		return x.CommitTimestampMs
	}
	return 0
}

type SuiProgrammableTransactionBlock struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Input objects or primitive values
	Inputs []*SuiCallArg `protobuf:"bytes,1,rep,name=inputs,proto3" json:"inputs,omitempty"`
	// The transactions to be executed sequentially. A failure in any transaction will
	// result in the failure of the entire programmable transaction block.
	Commands []*SuiCommand `protobuf:"bytes,2,rep,name=commands,proto3" json:"commands,omitempty"`
}

func (x *SuiProgrammableTransactionBlock) Reset() {
	*x = SuiProgrammableTransactionBlock{}
	if protoimpl.UnsafeEnabled {
		mi := &file_sui_proto_msgTypes[18]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *SuiProgrammableTransactionBlock) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SuiProgrammableTransactionBlock) ProtoMessage() {}

func (x *SuiProgrammableTransactionBlock) ProtoReflect() protoreflect.Message {
	mi := &file_sui_proto_msgTypes[18]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SuiProgrammableTransactionBlock.ProtoReflect.Descriptor instead.
func (*SuiProgrammableTransactionBlock) Descriptor() ([]byte, []int) {
	return file_sui_proto_rawDescGZIP(), []int{18}
}

func (x *SuiProgrammableTransactionBlock) GetInputs() []*SuiCallArg {
	if x != nil {
		return x.Inputs
	}
	return nil
}

func (x *SuiProgrammableTransactionBlock) GetCommands() []*SuiCommand {
	if x != nil {
		return x.Commands
	}
	return nil
}

type SuiCallArg struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Types that are assignable to SuiCallArg:
	//
	//	*SuiCallArg_Object
	//	*SuiCallArg_Pure
	SuiCallArg isSuiCallArg_SuiCallArg `protobuf_oneof:"sui_call_arg"`
}

func (x *SuiCallArg) Reset() {
	*x = SuiCallArg{}
	if protoimpl.UnsafeEnabled {
		mi := &file_sui_proto_msgTypes[19]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *SuiCallArg) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SuiCallArg) ProtoMessage() {}

func (x *SuiCallArg) ProtoReflect() protoreflect.Message {
	mi := &file_sui_proto_msgTypes[19]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SuiCallArg.ProtoReflect.Descriptor instead.
func (*SuiCallArg) Descriptor() ([]byte, []int) {
	return file_sui_proto_rawDescGZIP(), []int{19}
}

func (m *SuiCallArg) GetSuiCallArg() isSuiCallArg_SuiCallArg {
	if m != nil {
		return m.SuiCallArg
	}
	return nil
}

func (x *SuiCallArg) GetObject() *SuiObjectArg {
	if x, ok := x.GetSuiCallArg().(*SuiCallArg_Object); ok {
		return x.Object
	}
	return nil
}

func (x *SuiCallArg) GetPure() *SuiPureValue {
	if x, ok := x.GetSuiCallArg().(*SuiCallArg_Pure); ok {
		return x.Pure
	}
	return nil
}

type isSuiCallArg_SuiCallArg interface {
	isSuiCallArg_SuiCallArg()
}

type SuiCallArg_Object struct {
	// Needs to become an Object Ref or Object ID, depending on object type
	Object *SuiObjectArg `protobuf:"bytes,1,opt,name=object,proto3,oneof"`
}

type SuiCallArg_Pure struct {
	// pure value, bcs encoded
	Pure *SuiPureValue `protobuf:"bytes,2,opt,name=pure,proto3,oneof"`
}

func (*SuiCallArg_Object) isSuiCallArg_SuiCallArg() {}

func (*SuiCallArg_Pure) isSuiCallArg_SuiCallArg() {}

type SuiObjectArg struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Types that are assignable to SuiObjectArg:
	//
	//	*SuiObjectArg_ImmOrOwnedObject
	//	*SuiObjectArg_SharedObject
	SuiObjectArg isSuiObjectArg_SuiObjectArg `protobuf_oneof:"sui_object_arg"`
}

func (x *SuiObjectArg) Reset() {
	*x = SuiObjectArg{}
	if protoimpl.UnsafeEnabled {
		mi := &file_sui_proto_msgTypes[20]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *SuiObjectArg) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SuiObjectArg) ProtoMessage() {}

func (x *SuiObjectArg) ProtoReflect() protoreflect.Message {
	mi := &file_sui_proto_msgTypes[20]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SuiObjectArg.ProtoReflect.Descriptor instead.
func (*SuiObjectArg) Descriptor() ([]byte, []int) {
	return file_sui_proto_rawDescGZIP(), []int{20}
}

func (m *SuiObjectArg) GetSuiObjectArg() isSuiObjectArg_SuiObjectArg {
	if m != nil {
		return m.SuiObjectArg
	}
	return nil
}

func (x *SuiObjectArg) GetImmOrOwnedObject() *ImmOrOwnedObject {
	if x, ok := x.GetSuiObjectArg().(*SuiObjectArg_ImmOrOwnedObject); ok {
		return x.ImmOrOwnedObject
	}
	return nil
}

func (x *SuiObjectArg) GetSharedObject() *SharedObject {
	if x, ok := x.GetSuiObjectArg().(*SuiObjectArg_SharedObject); ok {
		return x.SharedObject
	}
	return nil
}

type isSuiObjectArg_SuiObjectArg interface {
	isSuiObjectArg_SuiObjectArg()
}

type SuiObjectArg_ImmOrOwnedObject struct {
	// A Move object, either immutable, or owned mutable.
	ImmOrOwnedObject *ImmOrOwnedObject `protobuf:"bytes,1,opt,name=imm_or_owned_object,json=immOrOwnedObject,proto3,oneof"`
}

type SuiObjectArg_SharedObject struct {
	// A Move object that's shared.
	// SharedObject::mutable controls whether caller asks for a mutable reference to shared object.
	SharedObject *SharedObject `protobuf:"bytes,2,opt,name=shared_object,json=sharedObject,proto3,oneof"`
}

func (*SuiObjectArg_ImmOrOwnedObject) isSuiObjectArg_SuiObjectArg() {}

func (*SuiObjectArg_SharedObject) isSuiObjectArg_SuiObjectArg() {}

type ImmOrOwnedObject struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ObjectId *ObjectID `protobuf:"bytes,1,opt,name=object_id,json=objectId,proto3" json:"object_id,omitempty"`
	Version  uint64    `protobuf:"varint,2,opt,name=version,proto3" json:"version,omitempty"`
	Digest   string    `protobuf:"bytes,3,opt,name=digest,proto3" json:"digest,omitempty"`
}

func (x *ImmOrOwnedObject) Reset() {
	*x = ImmOrOwnedObject{}
	if protoimpl.UnsafeEnabled {
		mi := &file_sui_proto_msgTypes[21]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ImmOrOwnedObject) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ImmOrOwnedObject) ProtoMessage() {}

func (x *ImmOrOwnedObject) ProtoReflect() protoreflect.Message {
	mi := &file_sui_proto_msgTypes[21]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ImmOrOwnedObject.ProtoReflect.Descriptor instead.
func (*ImmOrOwnedObject) Descriptor() ([]byte, []int) {
	return file_sui_proto_rawDescGZIP(), []int{21}
}

func (x *ImmOrOwnedObject) GetObjectId() *ObjectID {
	if x != nil {
		return x.ObjectId
	}
	return nil
}

func (x *ImmOrOwnedObject) GetVersion() uint64 {
	if x != nil {
		return x.Version
	}
	return 0
}

func (x *ImmOrOwnedObject) GetDigest() string {
	if x != nil {
		return x.Digest
	}
	return ""
}

type SharedObject struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ObjectId             *ObjectID `protobuf:"bytes,1,opt,name=object_id,json=objectId,proto3" json:"object_id,omitempty"`
	InitialSharedVersion uint64    `protobuf:"varint,2,opt,name=initial_shared_version,json=initialSharedVersion,proto3" json:"initial_shared_version,omitempty"`
	Mutable              bool      `protobuf:"varint,3,opt,name=mutable,proto3" json:"mutable,omitempty"`
}

func (x *SharedObject) Reset() {
	*x = SharedObject{}
	if protoimpl.UnsafeEnabled {
		mi := &file_sui_proto_msgTypes[22]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *SharedObject) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SharedObject) ProtoMessage() {}

func (x *SharedObject) ProtoReflect() protoreflect.Message {
	mi := &file_sui_proto_msgTypes[22]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SharedObject.ProtoReflect.Descriptor instead.
func (*SharedObject) Descriptor() ([]byte, []int) {
	return file_sui_proto_rawDescGZIP(), []int{22}
}

func (x *SharedObject) GetObjectId() *ObjectID {
	if x != nil {
		return x.ObjectId
	}
	return nil
}

func (x *SharedObject) GetInitialSharedVersion() uint64 {
	if x != nil {
		return x.InitialSharedVersion
	}
	return 0
}

func (x *SharedObject) GetMutable() bool {
	if x != nil {
		return x.Mutable
	}
	return false
}

type SuiPureValue struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ValueType *TypeTag      `protobuf:"bytes,1,opt,name=value_type,json=valueType,proto3,oneof" json:"value_type,omitempty"`
	Value     *SuiJsonValue `protobuf:"bytes,2,opt,name=value,proto3" json:"value,omitempty"`
}

func (x *SuiPureValue) Reset() {
	*x = SuiPureValue{}
	if protoimpl.UnsafeEnabled {
		mi := &file_sui_proto_msgTypes[23]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *SuiPureValue) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SuiPureValue) ProtoMessage() {}

func (x *SuiPureValue) ProtoReflect() protoreflect.Message {
	mi := &file_sui_proto_msgTypes[23]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SuiPureValue.ProtoReflect.Descriptor instead.
func (*SuiPureValue) Descriptor() ([]byte, []int) {
	return file_sui_proto_rawDescGZIP(), []int{23}
}

func (x *SuiPureValue) GetValueType() *TypeTag {
	if x != nil {
		return x.ValueType
	}
	return nil
}

func (x *SuiPureValue) GetValue() *SuiJsonValue {
	if x != nil {
		return x.Value
	}
	return nil
}

type TypeTag struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Types that are assignable to TypeTag:
	//
	//	*TypeTag_Bool
	//	*TypeTag_U8
	//	*TypeTag_U64
	//	*TypeTag_U128
	//	*TypeTag_Address
	//	*TypeTag_Signer
	//	*TypeTag_Vector
	//	*TypeTag_Struct
	//	*TypeTag_U16
	//	*TypeTag_U32
	//	*TypeTag_U256
	TypeTag isTypeTag_TypeTag `protobuf_oneof:"type_tag"`
}

func (x *TypeTag) Reset() {
	*x = TypeTag{}
	if protoimpl.UnsafeEnabled {
		mi := &file_sui_proto_msgTypes[24]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *TypeTag) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*TypeTag) ProtoMessage() {}

func (x *TypeTag) ProtoReflect() protoreflect.Message {
	mi := &file_sui_proto_msgTypes[24]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use TypeTag.ProtoReflect.Descriptor instead.
func (*TypeTag) Descriptor() ([]byte, []int) {
	return file_sui_proto_rawDescGZIP(), []int{24}
}

func (m *TypeTag) GetTypeTag() isTypeTag_TypeTag {
	if m != nil {
		return m.TypeTag
	}
	return nil
}

func (x *TypeTag) GetBool() *emptypb.Empty {
	if x, ok := x.GetTypeTag().(*TypeTag_Bool); ok {
		return x.Bool
	}
	return nil
}

func (x *TypeTag) GetU8() *emptypb.Empty {
	if x, ok := x.GetTypeTag().(*TypeTag_U8); ok {
		return x.U8
	}
	return nil
}

func (x *TypeTag) GetU64() *emptypb.Empty {
	if x, ok := x.GetTypeTag().(*TypeTag_U64); ok {
		return x.U64
	}
	return nil
}

func (x *TypeTag) GetU128() *emptypb.Empty {
	if x, ok := x.GetTypeTag().(*TypeTag_U128); ok {
		return x.U128
	}
	return nil
}

func (x *TypeTag) GetAddress() *emptypb.Empty {
	if x, ok := x.GetTypeTag().(*TypeTag_Address); ok {
		return x.Address
	}
	return nil
}

func (x *TypeTag) GetSigner() *emptypb.Empty {
	if x, ok := x.GetTypeTag().(*TypeTag_Signer); ok {
		return x.Signer
	}
	return nil
}

func (x *TypeTag) GetVector() *TypeTag {
	if x, ok := x.GetTypeTag().(*TypeTag_Vector); ok {
		return x.Vector
	}
	return nil
}

func (x *TypeTag) GetStruct() *StructTag {
	if x, ok := x.GetTypeTag().(*TypeTag_Struct); ok {
		return x.Struct
	}
	return nil
}

func (x *TypeTag) GetU16() *emptypb.Empty {
	if x, ok := x.GetTypeTag().(*TypeTag_U16); ok {
		return x.U16
	}
	return nil
}

func (x *TypeTag) GetU32() *emptypb.Empty {
	if x, ok := x.GetTypeTag().(*TypeTag_U32); ok {
		return x.U32
	}
	return nil
}

func (x *TypeTag) GetU256() *emptypb.Empty {
	if x, ok := x.GetTypeTag().(*TypeTag_U256); ok {
		return x.U256
	}
	return nil
}

type isTypeTag_TypeTag interface {
	isTypeTag_TypeTag()
}

type TypeTag_Bool struct {
	Bool *emptypb.Empty `protobuf:"bytes,1,opt,name=bool,proto3,oneof"`
}

type TypeTag_U8 struct {
	U8 *emptypb.Empty `protobuf:"bytes,2,opt,name=u8,proto3,oneof"`
}

type TypeTag_U64 struct {
	U64 *emptypb.Empty `protobuf:"bytes,3,opt,name=u64,proto3,oneof"`
}

type TypeTag_U128 struct {
	U128 *emptypb.Empty `protobuf:"bytes,4,opt,name=u128,proto3,oneof"`
}

type TypeTag_Address struct {
	Address *emptypb.Empty `protobuf:"bytes,5,opt,name=address,proto3,oneof"`
}

type TypeTag_Signer struct {
	Signer *emptypb.Empty `protobuf:"bytes,6,opt,name=signer,proto3,oneof"`
}

type TypeTag_Vector struct {
	Vector *TypeTag `protobuf:"bytes,7,opt,name=vector,proto3,oneof"`
}

type TypeTag_Struct struct {
	Struct *StructTag `protobuf:"bytes,8,opt,name=struct,proto3,oneof"`
}

type TypeTag_U16 struct {
	U16 *emptypb.Empty `protobuf:"bytes,9,opt,name=u16,proto3,oneof"`
}

type TypeTag_U32 struct {
	U32 *emptypb.Empty `protobuf:"bytes,10,opt,name=u32,proto3,oneof"`
}

type TypeTag_U256 struct {
	U256 *emptypb.Empty `protobuf:"bytes,11,opt,name=u256,proto3,oneof"`
}

func (*TypeTag_Bool) isTypeTag_TypeTag() {}

func (*TypeTag_U8) isTypeTag_TypeTag() {}

func (*TypeTag_U64) isTypeTag_TypeTag() {}

func (*TypeTag_U128) isTypeTag_TypeTag() {}

func (*TypeTag_Address) isTypeTag_TypeTag() {}

func (*TypeTag_Signer) isTypeTag_TypeTag() {}

func (*TypeTag_Vector) isTypeTag_TypeTag() {}

func (*TypeTag_Struct) isTypeTag_TypeTag() {}

func (*TypeTag_U16) isTypeTag_TypeTag() {}

func (*TypeTag_U32) isTypeTag_TypeTag() {}

func (*TypeTag_U256) isTypeTag_TypeTag() {}

type ListOfTypeTags struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	List []*TypeTag `protobuf:"bytes,1,rep,name=list,proto3" json:"list,omitempty"`
}

func (x *ListOfTypeTags) Reset() {
	*x = ListOfTypeTags{}
	if protoimpl.UnsafeEnabled {
		mi := &file_sui_proto_msgTypes[25]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ListOfTypeTags) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ListOfTypeTags) ProtoMessage() {}

func (x *ListOfTypeTags) ProtoReflect() protoreflect.Message {
	mi := &file_sui_proto_msgTypes[25]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ListOfTypeTags.ProtoReflect.Descriptor instead.
func (*ListOfTypeTags) Descriptor() ([]byte, []int) {
	return file_sui_proto_rawDescGZIP(), []int{25}
}

func (x *ListOfTypeTags) GetList() []*TypeTag {
	if x != nil {
		return x.List
	}
	return nil
}

type StructTag struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Address    string          `protobuf:"bytes,1,opt,name=address,proto3" json:"address,omitempty"`
	Module     string          `protobuf:"bytes,2,opt,name=module,proto3" json:"module,omitempty"`
	Name       string          `protobuf:"bytes,3,opt,name=name,proto3" json:"name,omitempty"`
	TypeParams *ListOfTypeTags `protobuf:"bytes,4,opt,name=type_params,json=typeParams,proto3" json:"type_params,omitempty"`
}

func (x *StructTag) Reset() {
	*x = StructTag{}
	if protoimpl.UnsafeEnabled {
		mi := &file_sui_proto_msgTypes[26]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *StructTag) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*StructTag) ProtoMessage() {}

func (x *StructTag) ProtoReflect() protoreflect.Message {
	mi := &file_sui_proto_msgTypes[26]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use StructTag.ProtoReflect.Descriptor instead.
func (*StructTag) Descriptor() ([]byte, []int) {
	return file_sui_proto_rawDescGZIP(), []int{26}
}

func (x *StructTag) GetAddress() string {
	if x != nil {
		return x.Address
	}
	return ""
}

func (x *StructTag) GetModule() string {
	if x != nil {
		return x.Module
	}
	return ""
}

func (x *StructTag) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *StructTag) GetTypeParams() *ListOfTypeTags {
	if x != nil {
		return x.TypeParams
	}
	return nil
}

type SuiJsonValue struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Types that are assignable to Value:
	//
	//	*SuiJsonValue_Null
	//	*SuiJsonValue_Bool
	//	*SuiJsonValue_Number
	//	*SuiJsonValue_String_
	//	*SuiJsonValue_Array
	//	*SuiJsonValue_Object
	Value isSuiJsonValue_Value `protobuf_oneof:"value"`
}

func (x *SuiJsonValue) Reset() {
	*x = SuiJsonValue{}
	if protoimpl.UnsafeEnabled {
		mi := &file_sui_proto_msgTypes[27]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *SuiJsonValue) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SuiJsonValue) ProtoMessage() {}

func (x *SuiJsonValue) ProtoReflect() protoreflect.Message {
	mi := &file_sui_proto_msgTypes[27]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SuiJsonValue.ProtoReflect.Descriptor instead.
func (*SuiJsonValue) Descriptor() ([]byte, []int) {
	return file_sui_proto_rawDescGZIP(), []int{27}
}

func (m *SuiJsonValue) GetValue() isSuiJsonValue_Value {
	if m != nil {
		return m.Value
	}
	return nil
}

func (x *SuiJsonValue) GetNull() *emptypb.Empty {
	if x, ok := x.GetValue().(*SuiJsonValue_Null); ok {
		return x.Null
	}
	return nil
}

func (x *SuiJsonValue) GetBool() bool {
	if x, ok := x.GetValue().(*SuiJsonValue_Bool); ok {
		return x.Bool
	}
	return false
}

func (x *SuiJsonValue) GetNumber() string {
	if x, ok := x.GetValue().(*SuiJsonValue_Number); ok {
		return x.Number
	}
	return ""
}

func (x *SuiJsonValue) GetString_() string {
	if x, ok := x.GetValue().(*SuiJsonValue_String_); ok {
		return x.String_
	}
	return ""
}

func (x *SuiJsonValue) GetArray() *ListOfJsonValues {
	if x, ok := x.GetValue().(*SuiJsonValue_Array); ok {
		return x.Array
	}
	return nil
}

func (x *SuiJsonValue) GetObject() *SuiJsonValueMap {
	if x, ok := x.GetValue().(*SuiJsonValue_Object); ok {
		return x.Object
	}
	return nil
}

type isSuiJsonValue_Value interface {
	isSuiJsonValue_Value()
}

type SuiJsonValue_Null struct {
	Null *emptypb.Empty `protobuf:"bytes,1,opt,name=null,proto3,oneof"`
}

type SuiJsonValue_Bool struct {
	Bool bool `protobuf:"varint,2,opt,name=bool,proto3,oneof"`
}

type SuiJsonValue_Number struct {
	Number string `protobuf:"bytes,3,opt,name=number,proto3,oneof"`
}

type SuiJsonValue_String_ struct {
	String_ string `protobuf:"bytes,4,opt,name=string,proto3,oneof"`
}

type SuiJsonValue_Array struct {
	Array *ListOfJsonValues `protobuf:"bytes,5,opt,name=array,proto3,oneof"`
}

type SuiJsonValue_Object struct {
	Object *SuiJsonValueMap `protobuf:"bytes,6,opt,name=object,proto3,oneof"`
}

func (*SuiJsonValue_Null) isSuiJsonValue_Value() {}

func (*SuiJsonValue_Bool) isSuiJsonValue_Value() {}

func (*SuiJsonValue_Number) isSuiJsonValue_Value() {}

func (*SuiJsonValue_String_) isSuiJsonValue_Value() {}

func (*SuiJsonValue_Array) isSuiJsonValue_Value() {}

func (*SuiJsonValue_Object) isSuiJsonValue_Value() {}

type SuiJsonValueMap struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Map map[string]*SuiJsonValue `protobuf:"bytes,6,rep,name=map,proto3" json:"map,omitempty" protobuf_key:"bytes,1,opt,name=key,proto3" protobuf_val:"bytes,2,opt,name=value,proto3"`
}

func (x *SuiJsonValueMap) Reset() {
	*x = SuiJsonValueMap{}
	if protoimpl.UnsafeEnabled {
		mi := &file_sui_proto_msgTypes[28]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *SuiJsonValueMap) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SuiJsonValueMap) ProtoMessage() {}

func (x *SuiJsonValueMap) ProtoReflect() protoreflect.Message {
	mi := &file_sui_proto_msgTypes[28]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SuiJsonValueMap.ProtoReflect.Descriptor instead.
func (*SuiJsonValueMap) Descriptor() ([]byte, []int) {
	return file_sui_proto_rawDescGZIP(), []int{28}
}

func (x *SuiJsonValueMap) GetMap() map[string]*SuiJsonValue {
	if x != nil {
		return x.Map
	}
	return nil
}

type ListOfJsonValues struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	List []*SuiJsonValue `protobuf:"bytes,1,rep,name=list,proto3" json:"list,omitempty"`
}

func (x *ListOfJsonValues) Reset() {
	*x = ListOfJsonValues{}
	if protoimpl.UnsafeEnabled {
		mi := &file_sui_proto_msgTypes[29]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ListOfJsonValues) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ListOfJsonValues) ProtoMessage() {}

func (x *ListOfJsonValues) ProtoReflect() protoreflect.Message {
	mi := &file_sui_proto_msgTypes[29]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ListOfJsonValues.ProtoReflect.Descriptor instead.
func (*ListOfJsonValues) Descriptor() ([]byte, []int) {
	return file_sui_proto_rawDescGZIP(), []int{29}
}

func (x *ListOfJsonValues) GetList() []*SuiJsonValue {
	if x != nil {
		return x.List
	}
	return nil
}

type SuiCommand struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Types that are assignable to SuiCommand:
	//
	//	*SuiCommand_MoveCall
	//	*SuiCommand_TransferObjects
	//	*SuiCommand_SplitCoins
	//	*SuiCommand_MergeCoins
	//	*SuiCommand_Publish
	//	*SuiCommand_Upgrade
	//	*SuiCommand_MakeMoveVec
	SuiCommand isSuiCommand_SuiCommand `protobuf_oneof:"sui_command"`
}

func (x *SuiCommand) Reset() {
	*x = SuiCommand{}
	if protoimpl.UnsafeEnabled {
		mi := &file_sui_proto_msgTypes[30]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *SuiCommand) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SuiCommand) ProtoMessage() {}

func (x *SuiCommand) ProtoReflect() protoreflect.Message {
	mi := &file_sui_proto_msgTypes[30]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SuiCommand.ProtoReflect.Descriptor instead.
func (*SuiCommand) Descriptor() ([]byte, []int) {
	return file_sui_proto_rawDescGZIP(), []int{30}
}

func (m *SuiCommand) GetSuiCommand() isSuiCommand_SuiCommand {
	if m != nil {
		return m.SuiCommand
	}
	return nil
}

func (x *SuiCommand) GetMoveCall() *SuiProgrammableMoveCall {
	if x, ok := x.GetSuiCommand().(*SuiCommand_MoveCall); ok {
		return x.MoveCall
	}
	return nil
}

func (x *SuiCommand) GetTransferObjects() *TransferObjectsPair {
	if x, ok := x.GetSuiCommand().(*SuiCommand_TransferObjects); ok {
		return x.TransferObjects
	}
	return nil
}

func (x *SuiCommand) GetSplitCoins() *SplitCoinsPair {
	if x, ok := x.GetSuiCommand().(*SuiCommand_SplitCoins); ok {
		return x.SplitCoins
	}
	return nil
}

func (x *SuiCommand) GetMergeCoins() *MergeCoinsPair {
	if x, ok := x.GetSuiCommand().(*SuiCommand_MergeCoins); ok {
		return x.MergeCoins
	}
	return nil
}

func (x *SuiCommand) GetPublish() *ListOfObjects {
	if x, ok := x.GetSuiCommand().(*SuiCommand_Publish); ok {
		return x.Publish
	}
	return nil
}

func (x *SuiCommand) GetUpgrade() *SuiCommandUpgrade {
	if x, ok := x.GetSuiCommand().(*SuiCommand_Upgrade); ok {
		return x.Upgrade
	}
	return nil
}

func (x *SuiCommand) GetMakeMoveVec() *MakeMoveVecPair {
	if x, ok := x.GetSuiCommand().(*SuiCommand_MakeMoveVec); ok {
		return x.MakeMoveVec
	}
	return nil
}

type isSuiCommand_SuiCommand interface {
	isSuiCommand_SuiCommand()
}

type SuiCommand_MoveCall struct {
	// A call to either an entry or a public Move function
	MoveCall *SuiProgrammableMoveCall `protobuf:"bytes,1,opt,name=move_call,json=moveCall,proto3,oneof"`
}

type SuiCommand_TransferObjects struct {
	// `(Vec<forall T:key+store. T>, address)`
	// It sends n-objects to the specified address. These objects must have store
	// (public transfer) and either the previous owner must be an address or the object must
	// be newly created.
	TransferObjects *TransferObjectsPair `protobuf:"bytes,2,opt,name=transfer_objects,json=transferObjects,proto3,oneof"`
}

type SuiCommand_SplitCoins struct {
	// `(&mut Coin<T>, Vec<u64>)` -> `Vec<Coin<T>>`
	// It splits off some amounts into a new coins with those amounts
	SplitCoins *SplitCoinsPair `protobuf:"bytes,3,opt,name=split_coins,json=splitCoins,proto3,oneof"`
}

type SuiCommand_MergeCoins struct {
	// `(&mut Coin<T>, Vec<Coin<T>>)`
	// It merges n-coins into the first coin
	MergeCoins *MergeCoinsPair `protobuf:"bytes,4,opt,name=merge_coins,json=mergeCoins,proto3,oneof"`
}

type SuiCommand_Publish struct {
	// Publishes a Move package. It takes the package bytes and a list of the package's transitive
	// dependencies to link against on-chain.
	Publish *ListOfObjects `protobuf:"bytes,5,opt,name=publish,proto3,oneof"`
}

type SuiCommand_Upgrade struct {
	// Upgrades a Move package
	Upgrade *SuiCommandUpgrade `protobuf:"bytes,6,opt,name=upgrade,proto3,oneof"`
}

type SuiCommand_MakeMoveVec struct {
	// `forall T: Vec<T> -> vector<T>`
	// Given n-values of the same type, it constructs a vector. For non objects or an empty vector,
	// the type tag must be specified.
	MakeMoveVec *MakeMoveVecPair `protobuf:"bytes,7,opt,name=make_move_vec,json=makeMoveVec,proto3,oneof"`
}

func (*SuiCommand_MoveCall) isSuiCommand_SuiCommand() {}

func (*SuiCommand_TransferObjects) isSuiCommand_SuiCommand() {}

func (*SuiCommand_SplitCoins) isSuiCommand_SuiCommand() {}

func (*SuiCommand_MergeCoins) isSuiCommand_SuiCommand() {}

func (*SuiCommand_Publish) isSuiCommand_SuiCommand() {}

func (*SuiCommand_Upgrade) isSuiCommand_SuiCommand() {}

func (*SuiCommand_MakeMoveVec) isSuiCommand_SuiCommand() {}

type TransferObjectsPair struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	One []*SuiArgument `protobuf:"bytes,1,rep,name=one,proto3" json:"one,omitempty"`
	Two *SuiArgument   `protobuf:"bytes,2,opt,name=two,proto3" json:"two,omitempty"`
}

func (x *TransferObjectsPair) Reset() {
	*x = TransferObjectsPair{}
	if protoimpl.UnsafeEnabled {
		mi := &file_sui_proto_msgTypes[31]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *TransferObjectsPair) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*TransferObjectsPair) ProtoMessage() {}

func (x *TransferObjectsPair) ProtoReflect() protoreflect.Message {
	mi := &file_sui_proto_msgTypes[31]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use TransferObjectsPair.ProtoReflect.Descriptor instead.
func (*TransferObjectsPair) Descriptor() ([]byte, []int) {
	return file_sui_proto_rawDescGZIP(), []int{31}
}

func (x *TransferObjectsPair) GetOne() []*SuiArgument {
	if x != nil {
		return x.One
	}
	return nil
}

func (x *TransferObjectsPair) GetTwo() *SuiArgument {
	if x != nil {
		return x.Two
	}
	return nil
}

type SplitCoinsPair struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	One *SuiArgument   `protobuf:"bytes,1,opt,name=one,proto3" json:"one,omitempty"`
	Two []*SuiArgument `protobuf:"bytes,2,rep,name=two,proto3" json:"two,omitempty"`
}

func (x *SplitCoinsPair) Reset() {
	*x = SplitCoinsPair{}
	if protoimpl.UnsafeEnabled {
		mi := &file_sui_proto_msgTypes[32]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *SplitCoinsPair) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SplitCoinsPair) ProtoMessage() {}

func (x *SplitCoinsPair) ProtoReflect() protoreflect.Message {
	mi := &file_sui_proto_msgTypes[32]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SplitCoinsPair.ProtoReflect.Descriptor instead.
func (*SplitCoinsPair) Descriptor() ([]byte, []int) {
	return file_sui_proto_rawDescGZIP(), []int{32}
}

func (x *SplitCoinsPair) GetOne() *SuiArgument {
	if x != nil {
		return x.One
	}
	return nil
}

func (x *SplitCoinsPair) GetTwo() []*SuiArgument {
	if x != nil {
		return x.Two
	}
	return nil
}

type MergeCoinsPair struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	One *SuiArgument   `protobuf:"bytes,1,opt,name=one,proto3" json:"one,omitempty"`
	Two []*SuiArgument `protobuf:"bytes,2,rep,name=two,proto3" json:"two,omitempty"`
}

func (x *MergeCoinsPair) Reset() {
	*x = MergeCoinsPair{}
	if protoimpl.UnsafeEnabled {
		mi := &file_sui_proto_msgTypes[33]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *MergeCoinsPair) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*MergeCoinsPair) ProtoMessage() {}

func (x *MergeCoinsPair) ProtoReflect() protoreflect.Message {
	mi := &file_sui_proto_msgTypes[33]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use MergeCoinsPair.ProtoReflect.Descriptor instead.
func (*MergeCoinsPair) Descriptor() ([]byte, []int) {
	return file_sui_proto_rawDescGZIP(), []int{33}
}

func (x *MergeCoinsPair) GetOne() *SuiArgument {
	if x != nil {
		return x.One
	}
	return nil
}

func (x *MergeCoinsPair) GetTwo() []*SuiArgument {
	if x != nil {
		return x.Two
	}
	return nil
}

type ListOfObjects struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	List []*ObjectID `protobuf:"bytes,1,rep,name=list,proto3" json:"list,omitempty"`
}

func (x *ListOfObjects) Reset() {
	*x = ListOfObjects{}
	if protoimpl.UnsafeEnabled {
		mi := &file_sui_proto_msgTypes[34]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ListOfObjects) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ListOfObjects) ProtoMessage() {}

func (x *ListOfObjects) ProtoReflect() protoreflect.Message {
	mi := &file_sui_proto_msgTypes[34]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ListOfObjects.ProtoReflect.Descriptor instead.
func (*ListOfObjects) Descriptor() ([]byte, []int) {
	return file_sui_proto_rawDescGZIP(), []int{34}
}

func (x *ListOfObjects) GetList() []*ObjectID {
	if x != nil {
		return x.List
	}
	return nil
}

type MakeMoveVecPair struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	One *string        `protobuf:"bytes,1,opt,name=one,proto3,oneof" json:"one,omitempty"`
	Two []*SuiArgument `protobuf:"bytes,2,rep,name=two,proto3" json:"two,omitempty"`
}

func (x *MakeMoveVecPair) Reset() {
	*x = MakeMoveVecPair{}
	if protoimpl.UnsafeEnabled {
		mi := &file_sui_proto_msgTypes[35]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *MakeMoveVecPair) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*MakeMoveVecPair) ProtoMessage() {}

func (x *MakeMoveVecPair) ProtoReflect() protoreflect.Message {
	mi := &file_sui_proto_msgTypes[35]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use MakeMoveVecPair.ProtoReflect.Descriptor instead.
func (*MakeMoveVecPair) Descriptor() ([]byte, []int) {
	return file_sui_proto_rawDescGZIP(), []int{35}
}

func (x *MakeMoveVecPair) GetOne() string {
	if x != nil && x.One != nil {
		return *x.One
	}
	return ""
}

func (x *MakeMoveVecPair) GetTwo() []*SuiArgument {
	if x != nil {
		return x.Two
	}
	return nil
}

type SuiCommandUpgrade struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	One   *ListOfObjects `protobuf:"bytes,1,opt,name=one,proto3" json:"one,omitempty"`
	Two   *ObjectID      `protobuf:"bytes,2,opt,name=two,proto3" json:"two,omitempty"`
	Three *SuiArgument   `protobuf:"bytes,3,opt,name=three,proto3" json:"three,omitempty"`
}

func (x *SuiCommandUpgrade) Reset() {
	*x = SuiCommandUpgrade{}
	if protoimpl.UnsafeEnabled {
		mi := &file_sui_proto_msgTypes[36]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *SuiCommandUpgrade) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SuiCommandUpgrade) ProtoMessage() {}

func (x *SuiCommandUpgrade) ProtoReflect() protoreflect.Message {
	mi := &file_sui_proto_msgTypes[36]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SuiCommandUpgrade.ProtoReflect.Descriptor instead.
func (*SuiCommandUpgrade) Descriptor() ([]byte, []int) {
	return file_sui_proto_rawDescGZIP(), []int{36}
}

func (x *SuiCommandUpgrade) GetOne() *ListOfObjects {
	if x != nil {
		return x.One
	}
	return nil
}

func (x *SuiCommandUpgrade) GetTwo() *ObjectID {
	if x != nil {
		return x.Two
	}
	return nil
}

func (x *SuiCommandUpgrade) GetThree() *SuiArgument {
	if x != nil {
		return x.Three
	}
	return nil
}

type SuiProgrammableMoveCall struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// The package containing the module and function.
	Package *ObjectID `protobuf:"bytes,1,opt,name=package,proto3" json:"package,omitempty"`
	// The specific module in the package containing the function.
	Module string `protobuf:"bytes,2,opt,name=module,proto3" json:"module,omitempty"`
	// The function to be called.
	Function string `protobuf:"bytes,3,opt,name=function,proto3" json:"function,omitempty"`
	// The type arguments to the function.
	TypeArguments []string       `protobuf:"bytes,4,rep,name=type_arguments,json=typeArguments,proto3" json:"type_arguments,omitempty"`
	Arguments     []*SuiArgument `protobuf:"bytes,5,rep,name=arguments,proto3" json:"arguments,omitempty"`
}

func (x *SuiProgrammableMoveCall) Reset() {
	*x = SuiProgrammableMoveCall{}
	if protoimpl.UnsafeEnabled {
		mi := &file_sui_proto_msgTypes[37]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *SuiProgrammableMoveCall) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SuiProgrammableMoveCall) ProtoMessage() {}

func (x *SuiProgrammableMoveCall) ProtoReflect() protoreflect.Message {
	mi := &file_sui_proto_msgTypes[37]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SuiProgrammableMoveCall.ProtoReflect.Descriptor instead.
func (*SuiProgrammableMoveCall) Descriptor() ([]byte, []int) {
	return file_sui_proto_rawDescGZIP(), []int{37}
}

func (x *SuiProgrammableMoveCall) GetPackage() *ObjectID {
	if x != nil {
		return x.Package
	}
	return nil
}

func (x *SuiProgrammableMoveCall) GetModule() string {
	if x != nil {
		return x.Module
	}
	return ""
}

func (x *SuiProgrammableMoveCall) GetFunction() string {
	if x != nil {
		return x.Function
	}
	return ""
}

func (x *SuiProgrammableMoveCall) GetTypeArguments() []string {
	if x != nil {
		return x.TypeArguments
	}
	return nil
}

func (x *SuiProgrammableMoveCall) GetArguments() []*SuiArgument {
	if x != nil {
		return x.Arguments
	}
	return nil
}

type SuiArgument struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Types that are assignable to SuiArguments:
	//
	//	*SuiArgument_GasCoin
	//	*SuiArgument_Input
	//	*SuiArgument_Result
	//	*SuiArgument_NestedResult
	SuiArguments isSuiArgument_SuiArguments `protobuf_oneof:"sui_arguments"`
}

func (x *SuiArgument) Reset() {
	*x = SuiArgument{}
	if protoimpl.UnsafeEnabled {
		mi := &file_sui_proto_msgTypes[38]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *SuiArgument) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SuiArgument) ProtoMessage() {}

func (x *SuiArgument) ProtoReflect() protoreflect.Message {
	mi := &file_sui_proto_msgTypes[38]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SuiArgument.ProtoReflect.Descriptor instead.
func (*SuiArgument) Descriptor() ([]byte, []int) {
	return file_sui_proto_rawDescGZIP(), []int{38}
}

func (m *SuiArgument) GetSuiArguments() isSuiArgument_SuiArguments {
	if m != nil {
		return m.SuiArguments
	}
	return nil
}

func (x *SuiArgument) GetGasCoin() *emptypb.Empty {
	if x, ok := x.GetSuiArguments().(*SuiArgument_GasCoin); ok {
		return x.GasCoin
	}
	return nil
}

func (x *SuiArgument) GetInput() uint32 {
	if x, ok := x.GetSuiArguments().(*SuiArgument_Input); ok {
		return x.Input
	}
	return 0
}

func (x *SuiArgument) GetResult() uint32 {
	if x, ok := x.GetSuiArguments().(*SuiArgument_Result); ok {
		return x.Result
	}
	return 0
}

func (x *SuiArgument) GetNestedResult() *PairOfU32 {
	if x, ok := x.GetSuiArguments().(*SuiArgument_NestedResult); ok {
		return x.NestedResult
	}
	return nil
}

type isSuiArgument_SuiArguments interface {
	isSuiArgument_SuiArguments()
}

type SuiArgument_GasCoin struct {
	// The gas coin. The gas coin can only be used by-ref, except for with
	// `TransferObjects`, which can use it by-value.
	GasCoin *emptypb.Empty `protobuf:"bytes,1,opt,name=gas_coin,json=gasCoin,proto3,oneof"`
}

type SuiArgument_Input struct {
	// One of the input objects or primitive values (from
	// `ProgrammableTransactionBlock` inputs)
	Input uint32 `protobuf:"varint,2,opt,name=input,proto3,oneof"`
}

type SuiArgument_Result struct {
	// The result of another transaction (from `ProgrammableTransactionBlock` transactions)
	Result uint32 `protobuf:"varint,3,opt,name=result,proto3,oneof"`
}

type SuiArgument_NestedResult struct {
	// Like a `Result` but it accesses a nested result. Currently, the only usage
	// of this is to access a value from a Move call with multiple return values.
	NestedResult *PairOfU32 `protobuf:"bytes,4,opt,name=nested_result,json=nestedResult,proto3,oneof"`
}

func (*SuiArgument_GasCoin) isSuiArgument_SuiArguments() {}

func (*SuiArgument_Input) isSuiArgument_SuiArguments() {}

func (*SuiArgument_Result) isSuiArgument_SuiArguments() {}

func (*SuiArgument_NestedResult) isSuiArgument_SuiArguments() {}

type PairOfU32 struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	One uint32 `protobuf:"varint,1,opt,name=one,proto3" json:"one,omitempty"`
	Two uint32 `protobuf:"varint,2,opt,name=two,proto3" json:"two,omitempty"`
}

func (x *PairOfU32) Reset() {
	*x = PairOfU32{}
	if protoimpl.UnsafeEnabled {
		mi := &file_sui_proto_msgTypes[39]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *PairOfU32) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*PairOfU32) ProtoMessage() {}

func (x *PairOfU32) ProtoReflect() protoreflect.Message {
	mi := &file_sui_proto_msgTypes[39]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use PairOfU32.ProtoReflect.Descriptor instead.
func (*PairOfU32) Descriptor() ([]byte, []int) {
	return file_sui_proto_rawDescGZIP(), []int{39}
}

func (x *PairOfU32) GetOne() uint32 {
	if x != nil {
		return x.One
	}
	return 0
}

func (x *PairOfU32) GetTwo() uint32 {
	if x != nil {
		return x.Two
	}
	return 0
}

type SuiTransactionBlockEffects struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Types that are assignable to SuiTransactionBlockEffects:
	//
	//	*SuiTransactionBlockEffects_V1
	SuiTransactionBlockEffects isSuiTransactionBlockEffects_SuiTransactionBlockEffects `protobuf_oneof:"sui_transaction_block_effects"`
}

func (x *SuiTransactionBlockEffects) Reset() {
	*x = SuiTransactionBlockEffects{}
	if protoimpl.UnsafeEnabled {
		mi := &file_sui_proto_msgTypes[40]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *SuiTransactionBlockEffects) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SuiTransactionBlockEffects) ProtoMessage() {}

func (x *SuiTransactionBlockEffects) ProtoReflect() protoreflect.Message {
	mi := &file_sui_proto_msgTypes[40]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SuiTransactionBlockEffects.ProtoReflect.Descriptor instead.
func (*SuiTransactionBlockEffects) Descriptor() ([]byte, []int) {
	return file_sui_proto_rawDescGZIP(), []int{40}
}

func (m *SuiTransactionBlockEffects) GetSuiTransactionBlockEffects() isSuiTransactionBlockEffects_SuiTransactionBlockEffects {
	if m != nil {
		return m.SuiTransactionBlockEffects
	}
	return nil
}

func (x *SuiTransactionBlockEffects) GetV1() *SuiTransactionBlockEffectsV1 {
	if x, ok := x.GetSuiTransactionBlockEffects().(*SuiTransactionBlockEffects_V1); ok {
		return x.V1
	}
	return nil
}

type isSuiTransactionBlockEffects_SuiTransactionBlockEffects interface {
	isSuiTransactionBlockEffects_SuiTransactionBlockEffects()
}

type SuiTransactionBlockEffects_V1 struct {
	V1 *SuiTransactionBlockEffectsV1 `protobuf:"bytes,1,opt,name=v1,proto3,oneof"`
}

func (*SuiTransactionBlockEffects_V1) isSuiTransactionBlockEffects_SuiTransactionBlockEffects() {}

type SuiTransactionBlockEffectsV1 struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// The status of the execution
	Status *SuiExecutionStatus `protobuf:"bytes,1,opt,name=status,proto3" json:"status,omitempty"`
	// The epoch when this transaction was executed.
	ExecutedEpoch uint64 `protobuf:"varint,2,opt,name=executed_epoch,json=executedEpoch,proto3" json:"executed_epoch,omitempty"`
	// Gas cost summary of the transaction
	GasUsed *GasCostSummary `protobuf:"bytes,3,opt,name=gas_used,json=gasUsed,proto3" json:"gas_used,omitempty"`
	// The version that every modified (mutated or deleted) object had before it was modified by this transaction.
	ModifiedAtVersions []*SuiTransactionBlockEffectsModifiedAtVersions `protobuf:"bytes,4,rep,name=modified_at_versions,json=modifiedAtVersions,proto3" json:"modified_at_versions,omitempty"`
	// The object references of the shared objects used in this transaction. Empty if no shared objects were used.
	SharedObjects []*SuiObjectRef `protobuf:"bytes,5,rep,name=shared_objects,json=sharedObjects,proto3" json:"shared_objects,omitempty"`
	// The transaction digest
	TransactionDigest string `protobuf:"bytes,6,opt,name=transaction_digest,json=transactionDigest,proto3" json:"transaction_digest,omitempty"`
	// ObjectRef and owner of new objects created.
	Created []*OwnedObjectRef `protobuf:"bytes,7,rep,name=created,proto3" json:"created,omitempty"`
	// ObjectRef and owner of mutated objects, including gas object.
	Mutated []*OwnedObjectRef `protobuf:"bytes,8,rep,name=mutated,proto3" json:"mutated,omitempty"`
	// ObjectRef and owner of objects that are unwrapped in this transaction.
	// Unwrapped objects are objects that were wrapped into other objects in the past,
	// and just got extracted out.
	Unwrapped []*OwnedObjectRef `protobuf:"bytes,9,rep,name=unwrapped,proto3" json:"unwrapped,omitempty"`
	// Object Refs of objects now deleted (the old refs).
	Deleted []*SuiObjectRef `protobuf:"bytes,10,rep,name=deleted,proto3" json:"deleted,omitempty"`
	// Object refs of objects previously wrapped in other objects but now deleted.
	UnwrappedThenDeleted []*SuiObjectRef `protobuf:"bytes,11,rep,name=unwrapped_then_deleted,json=unwrappedThenDeleted,proto3" json:"unwrapped_then_deleted,omitempty"`
	// Object refs of objects now wrapped in other objects.
	Wrapped []*SuiObjectRef `protobuf:"bytes,12,rep,name=wrapped,proto3" json:"wrapped,omitempty"`
	// The updated gas object reference. Have a dedicated field for convenient access.
	// It's also included in mutated.
	GasObject *OwnedObjectRef `protobuf:"bytes,13,opt,name=gas_object,json=gasObject,proto3" json:"gas_object,omitempty"`
	// The digest of the events emitted during execution,
	// can be None if the transaction does not emit any event.
	EventsDigest *string `protobuf:"bytes,14,opt,name=events_digest,json=eventsDigest,proto3,oneof" json:"events_digest,omitempty"`
	// The set of transaction digests this transaction depends on.
	Dependencies []string `protobuf:"bytes,15,rep,name=dependencies,proto3" json:"dependencies,omitempty"`
}

func (x *SuiTransactionBlockEffectsV1) Reset() {
	*x = SuiTransactionBlockEffectsV1{}
	if protoimpl.UnsafeEnabled {
		mi := &file_sui_proto_msgTypes[41]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *SuiTransactionBlockEffectsV1) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SuiTransactionBlockEffectsV1) ProtoMessage() {}

func (x *SuiTransactionBlockEffectsV1) ProtoReflect() protoreflect.Message {
	mi := &file_sui_proto_msgTypes[41]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SuiTransactionBlockEffectsV1.ProtoReflect.Descriptor instead.
func (*SuiTransactionBlockEffectsV1) Descriptor() ([]byte, []int) {
	return file_sui_proto_rawDescGZIP(), []int{41}
}

func (x *SuiTransactionBlockEffectsV1) GetStatus() *SuiExecutionStatus {
	if x != nil {
		return x.Status
	}
	return nil
}

func (x *SuiTransactionBlockEffectsV1) GetExecutedEpoch() uint64 {
	if x != nil {
		return x.ExecutedEpoch
	}
	return 0
}

func (x *SuiTransactionBlockEffectsV1) GetGasUsed() *GasCostSummary {
	if x != nil {
		return x.GasUsed
	}
	return nil
}

func (x *SuiTransactionBlockEffectsV1) GetModifiedAtVersions() []*SuiTransactionBlockEffectsModifiedAtVersions {
	if x != nil {
		return x.ModifiedAtVersions
	}
	return nil
}

func (x *SuiTransactionBlockEffectsV1) GetSharedObjects() []*SuiObjectRef {
	if x != nil {
		return x.SharedObjects
	}
	return nil
}

func (x *SuiTransactionBlockEffectsV1) GetTransactionDigest() string {
	if x != nil {
		return x.TransactionDigest
	}
	return ""
}

func (x *SuiTransactionBlockEffectsV1) GetCreated() []*OwnedObjectRef {
	if x != nil {
		return x.Created
	}
	return nil
}

func (x *SuiTransactionBlockEffectsV1) GetMutated() []*OwnedObjectRef {
	if x != nil {
		return x.Mutated
	}
	return nil
}

func (x *SuiTransactionBlockEffectsV1) GetUnwrapped() []*OwnedObjectRef {
	if x != nil {
		return x.Unwrapped
	}
	return nil
}

func (x *SuiTransactionBlockEffectsV1) GetDeleted() []*SuiObjectRef {
	if x != nil {
		return x.Deleted
	}
	return nil
}

func (x *SuiTransactionBlockEffectsV1) GetUnwrappedThenDeleted() []*SuiObjectRef {
	if x != nil {
		return x.UnwrappedThenDeleted
	}
	return nil
}

func (x *SuiTransactionBlockEffectsV1) GetWrapped() []*SuiObjectRef {
	if x != nil {
		return x.Wrapped
	}
	return nil
}

func (x *SuiTransactionBlockEffectsV1) GetGasObject() *OwnedObjectRef {
	if x != nil {
		return x.GasObject
	}
	return nil
}

func (x *SuiTransactionBlockEffectsV1) GetEventsDigest() string {
	if x != nil && x.EventsDigest != nil {
		return *x.EventsDigest
	}
	return ""
}

func (x *SuiTransactionBlockEffectsV1) GetDependencies() []string {
	if x != nil {
		return x.Dependencies
	}
	return nil
}

type OwnedObjectRef struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Owner     *Owner        `protobuf:"bytes,1,opt,name=owner,proto3" json:"owner,omitempty"`
	Reference *SuiObjectRef `protobuf:"bytes,2,opt,name=reference,proto3" json:"reference,omitempty"`
}

func (x *OwnedObjectRef) Reset() {
	*x = OwnedObjectRef{}
	if protoimpl.UnsafeEnabled {
		mi := &file_sui_proto_msgTypes[42]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *OwnedObjectRef) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*OwnedObjectRef) ProtoMessage() {}

func (x *OwnedObjectRef) ProtoReflect() protoreflect.Message {
	mi := &file_sui_proto_msgTypes[42]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use OwnedObjectRef.ProtoReflect.Descriptor instead.
func (*OwnedObjectRef) Descriptor() ([]byte, []int) {
	return file_sui_proto_rawDescGZIP(), []int{42}
}

func (x *OwnedObjectRef) GetOwner() *Owner {
	if x != nil {
		return x.Owner
	}
	return nil
}

func (x *OwnedObjectRef) GetReference() *SuiObjectRef {
	if x != nil {
		return x.Reference
	}
	return nil
}

type Owner struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Types that are assignable to Owner:
	//
	//	*Owner_AddressOwner
	//	*Owner_ObjectOwner
	//	*Owner_Shared
	//	*Owner_Immutable
	Owner isOwner_Owner `protobuf_oneof:"owner"`
}

func (x *Owner) Reset() {
	*x = Owner{}
	if protoimpl.UnsafeEnabled {
		mi := &file_sui_proto_msgTypes[43]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Owner) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Owner) ProtoMessage() {}

func (x *Owner) ProtoReflect() protoreflect.Message {
	mi := &file_sui_proto_msgTypes[43]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Owner.ProtoReflect.Descriptor instead.
func (*Owner) Descriptor() ([]byte, []int) {
	return file_sui_proto_rawDescGZIP(), []int{43}
}

func (m *Owner) GetOwner() isOwner_Owner {
	if m != nil {
		return m.Owner
	}
	return nil
}

func (x *Owner) GetAddressOwner() string {
	if x, ok := x.GetOwner().(*Owner_AddressOwner); ok {
		return x.AddressOwner
	}
	return ""
}

func (x *Owner) GetObjectOwner() string {
	if x, ok := x.GetOwner().(*Owner_ObjectOwner); ok {
		return x.ObjectOwner
	}
	return ""
}

func (x *Owner) GetShared() *Shared {
	if x, ok := x.GetOwner().(*Owner_Shared); ok {
		return x.Shared
	}
	return nil
}

func (x *Owner) GetImmutable() *emptypb.Empty {
	if x, ok := x.GetOwner().(*Owner_Immutable); ok {
		return x.Immutable
	}
	return nil
}

type isOwner_Owner interface {
	isOwner_Owner()
}

type Owner_AddressOwner struct {
	// Object is exclusively owned by a single address, and is mutable.
	AddressOwner string `protobuf:"bytes,1,opt,name=address_owner,json=addressOwner,proto3,oneof"`
}

type Owner_ObjectOwner struct {
	// Object is exclusively owned by a single object, and is mutable.
	// The object ID is converted to SuiAddress as SuiAddress is universal.
	ObjectOwner string `protobuf:"bytes,2,opt,name=object_owner,json=objectOwner,proto3,oneof"`
}

type Owner_Shared struct {
	// Object is shared, can be used by any address, and is mutable.
	Shared *Shared `protobuf:"bytes,3,opt,name=shared,proto3,oneof"`
}

type Owner_Immutable struct {
	// Object is immutable, and hence ownership doesn't matter.
	Immutable *emptypb.Empty `protobuf:"bytes,4,opt,name=immutable,proto3,oneof"`
}

func (*Owner_AddressOwner) isOwner_Owner() {}

func (*Owner_ObjectOwner) isOwner_Owner() {}

func (*Owner_Shared) isOwner_Owner() {}

func (*Owner_Immutable) isOwner_Owner() {}

type Shared struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// The version at which the object became shared
	InitialSharedVersion uint64 `protobuf:"varint,1,opt,name=initial_shared_version,json=initialSharedVersion,proto3" json:"initial_shared_version,omitempty"`
}

func (x *Shared) Reset() {
	*x = Shared{}
	if protoimpl.UnsafeEnabled {
		mi := &file_sui_proto_msgTypes[44]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Shared) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Shared) ProtoMessage() {}

func (x *Shared) ProtoReflect() protoreflect.Message {
	mi := &file_sui_proto_msgTypes[44]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Shared.ProtoReflect.Descriptor instead.
func (*Shared) Descriptor() ([]byte, []int) {
	return file_sui_proto_rawDescGZIP(), []int{44}
}

func (x *Shared) GetInitialSharedVersion() uint64 {
	if x != nil {
		return x.InitialSharedVersion
	}
	return 0
}

type SuiExecutionStatus struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Types that are assignable to SuiExecutionStatus:
	//
	//	*SuiExecutionStatus_Success
	//	*SuiExecutionStatus_Failure
	SuiExecutionStatus isSuiExecutionStatus_SuiExecutionStatus `protobuf_oneof:"sui_execution_status"`
}

func (x *SuiExecutionStatus) Reset() {
	*x = SuiExecutionStatus{}
	if protoimpl.UnsafeEnabled {
		mi := &file_sui_proto_msgTypes[45]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *SuiExecutionStatus) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SuiExecutionStatus) ProtoMessage() {}

func (x *SuiExecutionStatus) ProtoReflect() protoreflect.Message {
	mi := &file_sui_proto_msgTypes[45]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SuiExecutionStatus.ProtoReflect.Descriptor instead.
func (*SuiExecutionStatus) Descriptor() ([]byte, []int) {
	return file_sui_proto_rawDescGZIP(), []int{45}
}

func (m *SuiExecutionStatus) GetSuiExecutionStatus() isSuiExecutionStatus_SuiExecutionStatus {
	if m != nil {
		return m.SuiExecutionStatus
	}
	return nil
}

func (x *SuiExecutionStatus) GetSuccess() *emptypb.Empty {
	if x, ok := x.GetSuiExecutionStatus().(*SuiExecutionStatus_Success); ok {
		return x.Success
	}
	return nil
}

func (x *SuiExecutionStatus) GetFailure() *Failure {
	if x, ok := x.GetSuiExecutionStatus().(*SuiExecutionStatus_Failure); ok {
		return x.Failure
	}
	return nil
}

type isSuiExecutionStatus_SuiExecutionStatus interface {
	isSuiExecutionStatus_SuiExecutionStatus()
}

type SuiExecutionStatus_Success struct {
	// Gas used in the success case.
	Success *emptypb.Empty `protobuf:"bytes,1,opt,name=success,proto3,oneof"`
}

type SuiExecutionStatus_Failure struct {
	// Gas used in the failed case, and the error.
	Failure *Failure `protobuf:"bytes,2,opt,name=failure,proto3,oneof"`
}

func (*SuiExecutionStatus_Success) isSuiExecutionStatus_SuiExecutionStatus() {}

func (*SuiExecutionStatus_Failure) isSuiExecutionStatus_SuiExecutionStatus() {}

type Failure struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Error string `protobuf:"bytes,1,opt,name=error,proto3" json:"error,omitempty"`
}

func (x *Failure) Reset() {
	*x = Failure{}
	if protoimpl.UnsafeEnabled {
		mi := &file_sui_proto_msgTypes[46]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Failure) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Failure) ProtoMessage() {}

func (x *Failure) ProtoReflect() protoreflect.Message {
	mi := &file_sui_proto_msgTypes[46]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Failure.ProtoReflect.Descriptor instead.
func (*Failure) Descriptor() ([]byte, []int) {
	return file_sui_proto_rawDescGZIP(), []int{46}
}

func (x *Failure) GetError() string {
	if x != nil {
		return x.Error
	}
	return ""
}

type SuiTransactionBlockEffectsModifiedAtVersions struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ObjectId       *ObjectID `protobuf:"bytes,1,opt,name=object_id,json=objectId,proto3" json:"object_id,omitempty"`
	SequenceNumber uint64    `protobuf:"varint,2,opt,name=sequence_number,json=sequenceNumber,proto3" json:"sequence_number,omitempty"`
}

func (x *SuiTransactionBlockEffectsModifiedAtVersions) Reset() {
	*x = SuiTransactionBlockEffectsModifiedAtVersions{}
	if protoimpl.UnsafeEnabled {
		mi := &file_sui_proto_msgTypes[47]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *SuiTransactionBlockEffectsModifiedAtVersions) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SuiTransactionBlockEffectsModifiedAtVersions) ProtoMessage() {}

func (x *SuiTransactionBlockEffectsModifiedAtVersions) ProtoReflect() protoreflect.Message {
	mi := &file_sui_proto_msgTypes[47]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SuiTransactionBlockEffectsModifiedAtVersions.ProtoReflect.Descriptor instead.
func (*SuiTransactionBlockEffectsModifiedAtVersions) Descriptor() ([]byte, []int) {
	return file_sui_proto_rawDescGZIP(), []int{47}
}

func (x *SuiTransactionBlockEffectsModifiedAtVersions) GetObjectId() *ObjectID {
	if x != nil {
		return x.ObjectId
	}
	return nil
}

func (x *SuiTransactionBlockEffectsModifiedAtVersions) GetSequenceNumber() uint64 {
	if x != nil {
		return x.SequenceNumber
	}
	return 0
}

type SuiTransactionBlockEvents struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Data []*SuiEvent `protobuf:"bytes,1,rep,name=data,proto3" json:"data,omitempty"`
}

func (x *SuiTransactionBlockEvents) Reset() {
	*x = SuiTransactionBlockEvents{}
	if protoimpl.UnsafeEnabled {
		mi := &file_sui_proto_msgTypes[48]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *SuiTransactionBlockEvents) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SuiTransactionBlockEvents) ProtoMessage() {}

func (x *SuiTransactionBlockEvents) ProtoReflect() protoreflect.Message {
	mi := &file_sui_proto_msgTypes[48]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SuiTransactionBlockEvents.ProtoReflect.Descriptor instead.
func (*SuiTransactionBlockEvents) Descriptor() ([]byte, []int) {
	return file_sui_proto_rawDescGZIP(), []int{48}
}

func (x *SuiTransactionBlockEvents) GetData() []*SuiEvent {
	if x != nil {
		return x.Data
	}
	return nil
}

type SuiEvent struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Sequential event ID, ie (transaction seq number, event seq number).
	//  1. Serves as a unique event ID for each fullnode
	//  2. Also serves to sequence events for the purposes of pagination and querying.
	//     A higher id is an event seen later by that fullnode.
	//
	// This ID is the "cursor" for event querying.
	Id *EventID `protobuf:"bytes,1,opt,name=id,proto3" json:"id,omitempty"`
	// Move package where this event was emitted.
	PackageId *ObjectID `protobuf:"bytes,2,opt,name=package_id,json=packageId,proto3" json:"package_id,omitempty"`
	// Move module where this event was emitted.
	TransactionModule string `protobuf:"bytes,3,opt,name=transaction_module,json=transactionModule,proto3" json:"transaction_module,omitempty"`
	// Sender's Sui address.
	Sender string `protobuf:"bytes,4,opt,name=sender,proto3" json:"sender,omitempty"`
	// Move event type.
	Type *StructTag `protobuf:"bytes,5,opt,name=type,proto3" json:"type,omitempty"`
	// Parsed json value of the event
	ParsedJson *SuiJsonValue `protobuf:"bytes,6,opt,name=parsed_json,json=parsedJson,proto3" json:"parsed_json,omitempty"`
	// Base 58 encoded bcs bytes of the move event
	Bcs string `protobuf:"bytes,7,opt,name=bcs,proto3" json:"bcs,omitempty"`
	// UTC timestamp in milliseconds since epoch (1/1/1970)
	TimestampMs *uint64 `protobuf:"varint,8,opt,name=timestamp_ms,json=timestampMs,proto3,oneof" json:"timestamp_ms,omitempty"`
}

func (x *SuiEvent) Reset() {
	*x = SuiEvent{}
	if protoimpl.UnsafeEnabled {
		mi := &file_sui_proto_msgTypes[49]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *SuiEvent) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SuiEvent) ProtoMessage() {}

func (x *SuiEvent) ProtoReflect() protoreflect.Message {
	mi := &file_sui_proto_msgTypes[49]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SuiEvent.ProtoReflect.Descriptor instead.
func (*SuiEvent) Descriptor() ([]byte, []int) {
	return file_sui_proto_rawDescGZIP(), []int{49}
}

func (x *SuiEvent) GetId() *EventID {
	if x != nil {
		return x.Id
	}
	return nil
}

func (x *SuiEvent) GetPackageId() *ObjectID {
	if x != nil {
		return x.PackageId
	}
	return nil
}

func (x *SuiEvent) GetTransactionModule() string {
	if x != nil {
		return x.TransactionModule
	}
	return ""
}

func (x *SuiEvent) GetSender() string {
	if x != nil {
		return x.Sender
	}
	return ""
}

func (x *SuiEvent) GetType() *StructTag {
	if x != nil {
		return x.Type
	}
	return nil
}

func (x *SuiEvent) GetParsedJson() *SuiJsonValue {
	if x != nil {
		return x.ParsedJson
	}
	return nil
}

func (x *SuiEvent) GetBcs() string {
	if x != nil {
		return x.Bcs
	}
	return ""
}

func (x *SuiEvent) GetTimestampMs() uint64 {
	if x != nil && x.TimestampMs != nil {
		return *x.TimestampMs
	}
	return 0
}

type EventID struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	TxDigest string `protobuf:"bytes,1,opt,name=tx_digest,json=txDigest,proto3" json:"tx_digest,omitempty"`
	EventSeq uint64 `protobuf:"varint,2,opt,name=event_seq,json=eventSeq,proto3" json:"event_seq,omitempty"`
}

func (x *EventID) Reset() {
	*x = EventID{}
	if protoimpl.UnsafeEnabled {
		mi := &file_sui_proto_msgTypes[50]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *EventID) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*EventID) ProtoMessage() {}

func (x *EventID) ProtoReflect() protoreflect.Message {
	mi := &file_sui_proto_msgTypes[50]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use EventID.ProtoReflect.Descriptor instead.
func (*EventID) Descriptor() ([]byte, []int) {
	return file_sui_proto_rawDescGZIP(), []int{50}
}

func (x *EventID) GetTxDigest() string {
	if x != nil {
		return x.TxDigest
	}
	return ""
}

func (x *EventID) GetEventSeq() uint64 {
	if x != nil {
		return x.EventSeq
	}
	return 0
}

type ChangedObject struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Status *ObjectStatus  `protobuf:"bytes,1,opt,name=status,proto3" json:"status,omitempty"`
	Data   *SuiObjectData `protobuf:"bytes,2,opt,name=data,proto3" json:"data,omitempty"`
}

func (x *ChangedObject) Reset() {
	*x = ChangedObject{}
	if protoimpl.UnsafeEnabled {
		mi := &file_sui_proto_msgTypes[51]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ChangedObject) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ChangedObject) ProtoMessage() {}

func (x *ChangedObject) ProtoReflect() protoreflect.Message {
	mi := &file_sui_proto_msgTypes[51]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ChangedObject.ProtoReflect.Descriptor instead.
func (*ChangedObject) Descriptor() ([]byte, []int) {
	return file_sui_proto_rawDescGZIP(), []int{51}
}

func (x *ChangedObject) GetStatus() *ObjectStatus {
	if x != nil {
		return x.Status
	}
	return nil
}

func (x *ChangedObject) GetData() *SuiObjectData {
	if x != nil {
		return x.Data
	}
	return nil
}

type ObjectStatus struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Types that are assignable to ObjectStatus:
	//
	//	*ObjectStatus_Created
	//	*ObjectStatus_Mutated
	//	*ObjectStatus_Deleted
	//	*ObjectStatus_Wrapped
	//	*ObjectStatus_Unwrapped
	//	*ObjectStatus_UnwrappedThenDeleted
	ObjectStatus isObjectStatus_ObjectStatus `protobuf_oneof:"object_status"`
}

func (x *ObjectStatus) Reset() {
	*x = ObjectStatus{}
	if protoimpl.UnsafeEnabled {
		mi := &file_sui_proto_msgTypes[52]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ObjectStatus) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ObjectStatus) ProtoMessage() {}

func (x *ObjectStatus) ProtoReflect() protoreflect.Message {
	mi := &file_sui_proto_msgTypes[52]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ObjectStatus.ProtoReflect.Descriptor instead.
func (*ObjectStatus) Descriptor() ([]byte, []int) {
	return file_sui_proto_rawDescGZIP(), []int{52}
}

func (m *ObjectStatus) GetObjectStatus() isObjectStatus_ObjectStatus {
	if m != nil {
		return m.ObjectStatus
	}
	return nil
}

func (x *ObjectStatus) GetCreated() *emptypb.Empty {
	if x, ok := x.GetObjectStatus().(*ObjectStatus_Created); ok {
		return x.Created
	}
	return nil
}

func (x *ObjectStatus) GetMutated() *emptypb.Empty {
	if x, ok := x.GetObjectStatus().(*ObjectStatus_Mutated); ok {
		return x.Mutated
	}
	return nil
}

func (x *ObjectStatus) GetDeleted() *emptypb.Empty {
	if x, ok := x.GetObjectStatus().(*ObjectStatus_Deleted); ok {
		return x.Deleted
	}
	return nil
}

func (x *ObjectStatus) GetWrapped() *emptypb.Empty {
	if x, ok := x.GetObjectStatus().(*ObjectStatus_Wrapped); ok {
		return x.Wrapped
	}
	return nil
}

func (x *ObjectStatus) GetUnwrapped() *emptypb.Empty {
	if x, ok := x.GetObjectStatus().(*ObjectStatus_Unwrapped); ok {
		return x.Unwrapped
	}
	return nil
}

func (x *ObjectStatus) GetUnwrappedThenDeleted() *emptypb.Empty {
	if x, ok := x.GetObjectStatus().(*ObjectStatus_UnwrappedThenDeleted); ok {
		return x.UnwrappedThenDeleted
	}
	return nil
}

type isObjectStatus_ObjectStatus interface {
	isObjectStatus_ObjectStatus()
}

type ObjectStatus_Created struct {
	Created *emptypb.Empty `protobuf:"bytes,1,opt,name=created,proto3,oneof"`
}

type ObjectStatus_Mutated struct {
	Mutated *emptypb.Empty `protobuf:"bytes,2,opt,name=mutated,proto3,oneof"`
}

type ObjectStatus_Deleted struct {
	Deleted *emptypb.Empty `protobuf:"bytes,3,opt,name=deleted,proto3,oneof"`
}

type ObjectStatus_Wrapped struct {
	Wrapped *emptypb.Empty `protobuf:"bytes,4,opt,name=wrapped,proto3,oneof"`
}

type ObjectStatus_Unwrapped struct {
	Unwrapped *emptypb.Empty `protobuf:"bytes,5,opt,name=unwrapped,proto3,oneof"`
}

type ObjectStatus_UnwrappedThenDeleted struct {
	UnwrappedThenDeleted *emptypb.Empty `protobuf:"bytes,6,opt,name=unwrapped_then_deleted,json=unwrappedThenDeleted,proto3,oneof"`
}

func (*ObjectStatus_Created) isObjectStatus_ObjectStatus() {}

func (*ObjectStatus_Mutated) isObjectStatus_ObjectStatus() {}

func (*ObjectStatus_Deleted) isObjectStatus_ObjectStatus() {}

func (*ObjectStatus_Wrapped) isObjectStatus_ObjectStatus() {}

func (*ObjectStatus_Unwrapped) isObjectStatus_ObjectStatus() {}

func (*ObjectStatus_UnwrappedThenDeleted) isObjectStatus_ObjectStatus() {}

type SuiObjectData struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Object id
	ObjectId *ObjectID `protobuf:"bytes,1,opt,name=object_id,json=objectId,proto3" json:"object_id,omitempty"`
	// Object version
	Version uint64 `protobuf:"varint,2,opt,name=version,proto3" json:"version,omitempty"`
	// Base58 string representing the object digest
	Digest string `protobuf:"bytes,3,opt,name=digest,proto3" json:"digest,omitempty"`
	// The type of the object. Default to be None unless SuiObjectDataOptions.showType is set to true
	Type *ObjectType `protobuf:"bytes,4,opt,name=type,proto3,oneof" json:"type,omitempty"`
	// Default to be None because otherwise it will be repeated for the getOwnedObjects endpoint
	// The owner of this object. Default to be None unless SuiObjectDataOptions.showOwner is set to true
	Owner *Owner `protobuf:"bytes,5,opt,name=owner,proto3,oneof" json:"owner,omitempty"`
	// The digest of the transaction that created or last mutated this object. Default to be None unless
	// SuiObjectDataOptions.showPreviousTransaction is set to true
	PreviousTransaction *string `protobuf:"bytes,6,opt,name=previous_transaction,json=previousTransaction,proto3,oneof" json:"previous_transaction,omitempty"`
	// The amount of SUI we would rebate if this object gets deleted.
	// This number is re-calculated each time the object is mutated based on
	// the present storage gas price.
	StorageRebate *uint64 `protobuf:"varint,7,opt,name=storage_rebate,json=storageRebate,proto3,oneof" json:"storage_rebate,omitempty"`
	// The Display metadata for frontend UI rendering, default to be None unless SuiObjectDataOptions.showContent is set to true
	// This can also be None if the struct type does not have Display defined
	// See more details in <https://forums.sui.io/t/nft-object-display-proposal/4872>
	Display *DisplayFieldsResponse `protobuf:"bytes,8,opt,name=display,proto3,oneof" json:"display,omitempty"`
	// Move object content or package content, default to be None unless SuiObjectDataOptions.showContent is set to true
	Content *SuiParsedData `protobuf:"bytes,9,opt,name=content,proto3,oneof" json:"content,omitempty"`
	// Move object content or package content in BCS, default to be None unless SuiObjectDataOptions.showBcs is set to true
	Bcs *SuiRawData `protobuf:"bytes,10,opt,name=bcs,proto3,oneof" json:"bcs,omitempty"`
}

func (x *SuiObjectData) Reset() {
	*x = SuiObjectData{}
	if protoimpl.UnsafeEnabled {
		mi := &file_sui_proto_msgTypes[53]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *SuiObjectData) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SuiObjectData) ProtoMessage() {}

func (x *SuiObjectData) ProtoReflect() protoreflect.Message {
	mi := &file_sui_proto_msgTypes[53]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SuiObjectData.ProtoReflect.Descriptor instead.
func (*SuiObjectData) Descriptor() ([]byte, []int) {
	return file_sui_proto_rawDescGZIP(), []int{53}
}

func (x *SuiObjectData) GetObjectId() *ObjectID {
	if x != nil {
		return x.ObjectId
	}
	return nil
}

func (x *SuiObjectData) GetVersion() uint64 {
	if x != nil {
		return x.Version
	}
	return 0
}

func (x *SuiObjectData) GetDigest() string {
	if x != nil {
		return x.Digest
	}
	return ""
}

func (x *SuiObjectData) GetType() *ObjectType {
	if x != nil {
		return x.Type
	}
	return nil
}

func (x *SuiObjectData) GetOwner() *Owner {
	if x != nil {
		return x.Owner
	}
	return nil
}

func (x *SuiObjectData) GetPreviousTransaction() string {
	if x != nil && x.PreviousTransaction != nil {
		return *x.PreviousTransaction
	}
	return ""
}

func (x *SuiObjectData) GetStorageRebate() uint64 {
	if x != nil && x.StorageRebate != nil {
		return *x.StorageRebate
	}
	return 0
}

func (x *SuiObjectData) GetDisplay() *DisplayFieldsResponse {
	if x != nil {
		return x.Display
	}
	return nil
}

func (x *SuiObjectData) GetContent() *SuiParsedData {
	if x != nil {
		return x.Content
	}
	return nil
}

func (x *SuiObjectData) GetBcs() *SuiRawData {
	if x != nil {
		return x.Bcs
	}
	return nil
}

type ObjectType struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Types that are assignable to ObjectType:
	//
	//	*ObjectType_Package
	//	*ObjectType_Struct
	ObjectType isObjectType_ObjectType `protobuf_oneof:"object_type"`
}

func (x *ObjectType) Reset() {
	*x = ObjectType{}
	if protoimpl.UnsafeEnabled {
		mi := &file_sui_proto_msgTypes[54]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ObjectType) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ObjectType) ProtoMessage() {}

func (x *ObjectType) ProtoReflect() protoreflect.Message {
	mi := &file_sui_proto_msgTypes[54]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ObjectType.ProtoReflect.Descriptor instead.
func (*ObjectType) Descriptor() ([]byte, []int) {
	return file_sui_proto_rawDescGZIP(), []int{54}
}

func (m *ObjectType) GetObjectType() isObjectType_ObjectType {
	if m != nil {
		return m.ObjectType
	}
	return nil
}

func (x *ObjectType) GetPackage() *emptypb.Empty {
	if x, ok := x.GetObjectType().(*ObjectType_Package); ok {
		return x.Package
	}
	return nil
}

func (x *ObjectType) GetStruct() *MoveObjectType {
	if x, ok := x.GetObjectType().(*ObjectType_Struct); ok {
		return x.Struct
	}
	return nil
}

type isObjectType_ObjectType interface {
	isObjectType_ObjectType()
}

type ObjectType_Package struct {
	// Move package containing one or more bytecode modules
	Package *emptypb.Empty `protobuf:"bytes,1,opt,name=package,proto3,oneof"`
}

type ObjectType_Struct struct {
	// A Move struct of the given type
	Struct *MoveObjectType `protobuf:"bytes,2,opt,name=struct,proto3,oneof"`
}

func (*ObjectType_Package) isObjectType_ObjectType() {}

func (*ObjectType_Struct) isObjectType_ObjectType() {}

type MoveObjectType struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Types that are assignable to MoveObjectType:
	//
	//	*MoveObjectType_Other
	//	*MoveObjectType_GasCoin
	//	*MoveObjectType_StakedSui
	//	*MoveObjectType_Coin
	MoveObjectType isMoveObjectType_MoveObjectType `protobuf_oneof:"move_object_type"`
}

func (x *MoveObjectType) Reset() {
	*x = MoveObjectType{}
	if protoimpl.UnsafeEnabled {
		mi := &file_sui_proto_msgTypes[55]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *MoveObjectType) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*MoveObjectType) ProtoMessage() {}

func (x *MoveObjectType) ProtoReflect() protoreflect.Message {
	mi := &file_sui_proto_msgTypes[55]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use MoveObjectType.ProtoReflect.Descriptor instead.
func (*MoveObjectType) Descriptor() ([]byte, []int) {
	return file_sui_proto_rawDescGZIP(), []int{55}
}

func (m *MoveObjectType) GetMoveObjectType() isMoveObjectType_MoveObjectType {
	if m != nil {
		return m.MoveObjectType
	}
	return nil
}

func (x *MoveObjectType) GetOther() *StructTag {
	if x, ok := x.GetMoveObjectType().(*MoveObjectType_Other); ok {
		return x.Other
	}
	return nil
}

func (x *MoveObjectType) GetGasCoin() *emptypb.Empty {
	if x, ok := x.GetMoveObjectType().(*MoveObjectType_GasCoin); ok {
		return x.GasCoin
	}
	return nil
}

func (x *MoveObjectType) GetStakedSui() *emptypb.Empty {
	if x, ok := x.GetMoveObjectType().(*MoveObjectType_StakedSui); ok {
		return x.StakedSui
	}
	return nil
}

func (x *MoveObjectType) GetCoin() *TypeTag {
	if x, ok := x.GetMoveObjectType().(*MoveObjectType_Coin); ok {
		return x.Coin
	}
	return nil
}

type isMoveObjectType_MoveObjectType interface {
	isMoveObjectType_MoveObjectType()
}

type MoveObjectType_Other struct {
	// A type that is not `0x2::coin::Coin<T>`
	Other *StructTag `protobuf:"bytes,1,opt,name=other,proto3,oneof"`
}

type MoveObjectType_GasCoin struct {
	// A SUI coin (i.e., `0x2::coin::Coin<0x2::sui::SUI>`)
	GasCoin *emptypb.Empty `protobuf:"bytes,2,opt,name=gas_coin,json=gasCoin,proto3,oneof"`
}

type MoveObjectType_StakedSui struct {
	// A record of a staked SUI coin (i.e., `0x3::staking_pool::StakedSui`)
	StakedSui *emptypb.Empty `protobuf:"bytes,3,opt,name=staked_sui,json=stakedSui,proto3,oneof"`
}

type MoveObjectType_Coin struct {
	// A non-SUI coin type (i.e., `0x2::coin::Coin<T> where T != 0x2::sui::SUI`)
	Coin *TypeTag `protobuf:"bytes,4,opt,name=coin,proto3,oneof"`
}

func (*MoveObjectType_Other) isMoveObjectType_MoveObjectType() {}

func (*MoveObjectType_GasCoin) isMoveObjectType_MoveObjectType() {}

func (*MoveObjectType_StakedSui) isMoveObjectType_MoveObjectType() {}

func (*MoveObjectType_Coin) isMoveObjectType_MoveObjectType() {}

type DisplayFieldsResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Data  map[string]string       `protobuf:"bytes,1,rep,name=data,proto3" json:"data,omitempty" protobuf_key:"bytes,1,opt,name=key,proto3" protobuf_val:"bytes,2,opt,name=value,proto3"`
	Error *SuiObjectResponseError `protobuf:"bytes,2,opt,name=error,proto3" json:"error,omitempty"`
}

func (x *DisplayFieldsResponse) Reset() {
	*x = DisplayFieldsResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_sui_proto_msgTypes[56]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *DisplayFieldsResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DisplayFieldsResponse) ProtoMessage() {}

func (x *DisplayFieldsResponse) ProtoReflect() protoreflect.Message {
	mi := &file_sui_proto_msgTypes[56]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DisplayFieldsResponse.ProtoReflect.Descriptor instead.
func (*DisplayFieldsResponse) Descriptor() ([]byte, []int) {
	return file_sui_proto_rawDescGZIP(), []int{56}
}

func (x *DisplayFieldsResponse) GetData() map[string]string {
	if x != nil {
		return x.Data
	}
	return nil
}

func (x *DisplayFieldsResponse) GetError() *SuiObjectResponseError {
	if x != nil {
		return x.Error
	}
	return nil
}

type SuiObjectResponseError struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Types that are assignable to SuiObjectResponseError:
	//
	//	*SuiObjectResponseError_NotExists_
	//	*SuiObjectResponseError_DynamicFieldNotFound_
	//	*SuiObjectResponseError_Deleted_
	//	*SuiObjectResponseError_Unknown
	//	*SuiObjectResponseError_DisplayError_
	SuiObjectResponseError isSuiObjectResponseError_SuiObjectResponseError `protobuf_oneof:"sui_object_response_error"`
}

func (x *SuiObjectResponseError) Reset() {
	*x = SuiObjectResponseError{}
	if protoimpl.UnsafeEnabled {
		mi := &file_sui_proto_msgTypes[57]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *SuiObjectResponseError) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SuiObjectResponseError) ProtoMessage() {}

func (x *SuiObjectResponseError) ProtoReflect() protoreflect.Message {
	mi := &file_sui_proto_msgTypes[57]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SuiObjectResponseError.ProtoReflect.Descriptor instead.
func (*SuiObjectResponseError) Descriptor() ([]byte, []int) {
	return file_sui_proto_rawDescGZIP(), []int{57}
}

func (m *SuiObjectResponseError) GetSuiObjectResponseError() isSuiObjectResponseError_SuiObjectResponseError {
	if m != nil {
		return m.SuiObjectResponseError
	}
	return nil
}

func (x *SuiObjectResponseError) GetNotExists() *SuiObjectResponseError_NotExists {
	if x, ok := x.GetSuiObjectResponseError().(*SuiObjectResponseError_NotExists_); ok {
		return x.NotExists
	}
	return nil
}

func (x *SuiObjectResponseError) GetDynamicFieldNotFound() *SuiObjectResponseError_DynamicFieldNotFound {
	if x, ok := x.GetSuiObjectResponseError().(*SuiObjectResponseError_DynamicFieldNotFound_); ok {
		return x.DynamicFieldNotFound
	}
	return nil
}

func (x *SuiObjectResponseError) GetDeleted() *SuiObjectResponseError_Deleted {
	if x, ok := x.GetSuiObjectResponseError().(*SuiObjectResponseError_Deleted_); ok {
		return x.Deleted
	}
	return nil
}

func (x *SuiObjectResponseError) GetUnknown() *emptypb.Empty {
	if x, ok := x.GetSuiObjectResponseError().(*SuiObjectResponseError_Unknown); ok {
		return x.Unknown
	}
	return nil
}

func (x *SuiObjectResponseError) GetDisplayError() *SuiObjectResponseError_DisplayError {
	if x, ok := x.GetSuiObjectResponseError().(*SuiObjectResponseError_DisplayError_); ok {
		return x.DisplayError
	}
	return nil
}

type isSuiObjectResponseError_SuiObjectResponseError interface {
	isSuiObjectResponseError_SuiObjectResponseError()
}

type SuiObjectResponseError_NotExists_ struct {
	NotExists *SuiObjectResponseError_NotExists `protobuf:"bytes,1,opt,name=not_exists,json=notExists,proto3,oneof"`
}

type SuiObjectResponseError_DynamicFieldNotFound_ struct {
	DynamicFieldNotFound *SuiObjectResponseError_DynamicFieldNotFound `protobuf:"bytes,2,opt,name=dynamic_field_not_found,json=dynamicFieldNotFound,proto3,oneof"`
}

type SuiObjectResponseError_Deleted_ struct {
	Deleted *SuiObjectResponseError_Deleted `protobuf:"bytes,3,opt,name=deleted,proto3,oneof"`
}

type SuiObjectResponseError_Unknown struct {
	Unknown *emptypb.Empty `protobuf:"bytes,4,opt,name=Unknown,proto3,oneof"`
}

type SuiObjectResponseError_DisplayError_ struct {
	DisplayError *SuiObjectResponseError_DisplayError `protobuf:"bytes,5,opt,name=display_error,json=displayError,proto3,oneof"`
}

func (*SuiObjectResponseError_NotExists_) isSuiObjectResponseError_SuiObjectResponseError() {}

func (*SuiObjectResponseError_DynamicFieldNotFound_) isSuiObjectResponseError_SuiObjectResponseError() {
}

func (*SuiObjectResponseError_Deleted_) isSuiObjectResponseError_SuiObjectResponseError() {}

func (*SuiObjectResponseError_Unknown) isSuiObjectResponseError_SuiObjectResponseError() {}

func (*SuiObjectResponseError_DisplayError_) isSuiObjectResponseError_SuiObjectResponseError() {}

type SuiParsedData struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Types that are assignable to SuiParsedData:
	//
	//	*SuiParsedData_MoveObject
	//	*SuiParsedData_Package
	SuiParsedData isSuiParsedData_SuiParsedData `protobuf_oneof:"sui_parsed_data"`
}

func (x *SuiParsedData) Reset() {
	*x = SuiParsedData{}
	if protoimpl.UnsafeEnabled {
		mi := &file_sui_proto_msgTypes[58]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *SuiParsedData) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SuiParsedData) ProtoMessage() {}

func (x *SuiParsedData) ProtoReflect() protoreflect.Message {
	mi := &file_sui_proto_msgTypes[58]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SuiParsedData.ProtoReflect.Descriptor instead.
func (*SuiParsedData) Descriptor() ([]byte, []int) {
	return file_sui_proto_rawDescGZIP(), []int{58}
}

func (m *SuiParsedData) GetSuiParsedData() isSuiParsedData_SuiParsedData {
	if m != nil {
		return m.SuiParsedData
	}
	return nil
}

func (x *SuiParsedData) GetMoveObject() *SuiParsedMoveObject {
	if x, ok := x.GetSuiParsedData().(*SuiParsedData_MoveObject); ok {
		return x.MoveObject
	}
	return nil
}

func (x *SuiParsedData) GetPackage() *SuiMovePackage {
	if x, ok := x.GetSuiParsedData().(*SuiParsedData_Package); ok {
		return x.Package
	}
	return nil
}

type isSuiParsedData_SuiParsedData interface {
	isSuiParsedData_SuiParsedData()
}

type SuiParsedData_MoveObject struct {
	MoveObject *SuiParsedMoveObject `protobuf:"bytes,1,opt,name=move_object,json=moveObject,proto3,oneof"`
}

type SuiParsedData_Package struct {
	Package *SuiMovePackage `protobuf:"bytes,2,opt,name=package,proto3,oneof"`
}

func (*SuiParsedData_MoveObject) isSuiParsedData_SuiParsedData() {}

func (*SuiParsedData_Package) isSuiParsedData_SuiParsedData() {}

type SuiParsedMoveObject struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Type              *StructTag     `protobuf:"bytes,1,opt,name=type,proto3" json:"type,omitempty"`
	HasPublicTransfer bool           `protobuf:"varint,2,opt,name=has_public_transfer,json=hasPublicTransfer,proto3" json:"has_public_transfer,omitempty"`
	Fields            *SuiMoveStruct `protobuf:"bytes,3,opt,name=fields,proto3" json:"fields,omitempty"`
}

func (x *SuiParsedMoveObject) Reset() {
	*x = SuiParsedMoveObject{}
	if protoimpl.UnsafeEnabled {
		mi := &file_sui_proto_msgTypes[59]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *SuiParsedMoveObject) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SuiParsedMoveObject) ProtoMessage() {}

func (x *SuiParsedMoveObject) ProtoReflect() protoreflect.Message {
	mi := &file_sui_proto_msgTypes[59]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SuiParsedMoveObject.ProtoReflect.Descriptor instead.
func (*SuiParsedMoveObject) Descriptor() ([]byte, []int) {
	return file_sui_proto_rawDescGZIP(), []int{59}
}

func (x *SuiParsedMoveObject) GetType() *StructTag {
	if x != nil {
		return x.Type
	}
	return nil
}

func (x *SuiParsedMoveObject) GetHasPublicTransfer() bool {
	if x != nil {
		return x.HasPublicTransfer
	}
	return false
}

func (x *SuiParsedMoveObject) GetFields() *SuiMoveStruct {
	if x != nil {
		return x.Fields
	}
	return nil
}

type SuiMoveStruct struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Types that are assignable to SuiMoveStruct:
	//
	//	*SuiMoveStruct_Runtime
	//	*SuiMoveStruct_WithTypes
	//	*SuiMoveStruct_WithFields
	SuiMoveStruct isSuiMoveStruct_SuiMoveStruct `protobuf_oneof:"sui_move_struct"`
}

func (x *SuiMoveStruct) Reset() {
	*x = SuiMoveStruct{}
	if protoimpl.UnsafeEnabled {
		mi := &file_sui_proto_msgTypes[60]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *SuiMoveStruct) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SuiMoveStruct) ProtoMessage() {}

func (x *SuiMoveStruct) ProtoReflect() protoreflect.Message {
	mi := &file_sui_proto_msgTypes[60]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SuiMoveStruct.ProtoReflect.Descriptor instead.
func (*SuiMoveStruct) Descriptor() ([]byte, []int) {
	return file_sui_proto_rawDescGZIP(), []int{60}
}

func (m *SuiMoveStruct) GetSuiMoveStruct() isSuiMoveStruct_SuiMoveStruct {
	if m != nil {
		return m.SuiMoveStruct
	}
	return nil
}

func (x *SuiMoveStruct) GetRuntime() *ListOfSuiMoveValues {
	if x, ok := x.GetSuiMoveStruct().(*SuiMoveStruct_Runtime); ok {
		return x.Runtime
	}
	return nil
}

func (x *SuiMoveStruct) GetWithTypes() *WithTypes {
	if x, ok := x.GetSuiMoveStruct().(*SuiMoveStruct_WithTypes); ok {
		return x.WithTypes
	}
	return nil
}

func (x *SuiMoveStruct) GetWithFields() *WithFields {
	if x, ok := x.GetSuiMoveStruct().(*SuiMoveStruct_WithFields); ok {
		return x.WithFields
	}
	return nil
}

type isSuiMoveStruct_SuiMoveStruct interface {
	isSuiMoveStruct_SuiMoveStruct()
}

type SuiMoveStruct_Runtime struct {
	Runtime *ListOfSuiMoveValues `protobuf:"bytes,1,opt,name=runtime,proto3,oneof"`
}

type SuiMoveStruct_WithTypes struct {
	WithTypes *WithTypes `protobuf:"bytes,2,opt,name=with_types,json=withTypes,proto3,oneof"`
}

type SuiMoveStruct_WithFields struct {
	WithFields *WithFields `protobuf:"bytes,3,opt,name=with_fields,json=withFields,proto3,oneof"`
}

func (*SuiMoveStruct_Runtime) isSuiMoveStruct_SuiMoveStruct() {}

func (*SuiMoveStruct_WithTypes) isSuiMoveStruct_SuiMoveStruct() {}

func (*SuiMoveStruct_WithFields) isSuiMoveStruct_SuiMoveStruct() {}

type ListOfSuiMoveValues struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	List []*SuiMoveValue `protobuf:"bytes,1,rep,name=list,proto3" json:"list,omitempty"`
}

func (x *ListOfSuiMoveValues) Reset() {
	*x = ListOfSuiMoveValues{}
	if protoimpl.UnsafeEnabled {
		mi := &file_sui_proto_msgTypes[61]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ListOfSuiMoveValues) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ListOfSuiMoveValues) ProtoMessage() {}

func (x *ListOfSuiMoveValues) ProtoReflect() protoreflect.Message {
	mi := &file_sui_proto_msgTypes[61]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ListOfSuiMoveValues.ProtoReflect.Descriptor instead.
func (*ListOfSuiMoveValues) Descriptor() ([]byte, []int) {
	return file_sui_proto_rawDescGZIP(), []int{61}
}

func (x *ListOfSuiMoveValues) GetList() []*SuiMoveValue {
	if x != nil {
		return x.List
	}
	return nil
}

type WithTypes struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Type   *StructTag               `protobuf:"bytes,1,opt,name=type,proto3" json:"type,omitempty"`
	Fields map[string]*SuiMoveValue `protobuf:"bytes,2,rep,name=fields,proto3" json:"fields,omitempty" protobuf_key:"bytes,1,opt,name=key,proto3" protobuf_val:"bytes,2,opt,name=value,proto3"`
}

func (x *WithTypes) Reset() {
	*x = WithTypes{}
	if protoimpl.UnsafeEnabled {
		mi := &file_sui_proto_msgTypes[62]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *WithTypes) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*WithTypes) ProtoMessage() {}

func (x *WithTypes) ProtoReflect() protoreflect.Message {
	mi := &file_sui_proto_msgTypes[62]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use WithTypes.ProtoReflect.Descriptor instead.
func (*WithTypes) Descriptor() ([]byte, []int) {
	return file_sui_proto_rawDescGZIP(), []int{62}
}

func (x *WithTypes) GetType() *StructTag {
	if x != nil {
		return x.Type
	}
	return nil
}

func (x *WithTypes) GetFields() map[string]*SuiMoveValue {
	if x != nil {
		return x.Fields
	}
	return nil
}

type WithFields struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Fields map[string]*SuiMoveValue `protobuf:"bytes,2,rep,name=fields,proto3" json:"fields,omitempty" protobuf_key:"bytes,1,opt,name=key,proto3" protobuf_val:"bytes,2,opt,name=value,proto3"`
}

func (x *WithFields) Reset() {
	*x = WithFields{}
	if protoimpl.UnsafeEnabled {
		mi := &file_sui_proto_msgTypes[63]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *WithFields) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*WithFields) ProtoMessage() {}

func (x *WithFields) ProtoReflect() protoreflect.Message {
	mi := &file_sui_proto_msgTypes[63]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use WithFields.ProtoReflect.Descriptor instead.
func (*WithFields) Descriptor() ([]byte, []int) {
	return file_sui_proto_rawDescGZIP(), []int{63}
}

func (x *WithFields) GetFields() map[string]*SuiMoveValue {
	if x != nil {
		return x.Fields
	}
	return nil
}

type SuiMoveValue struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Types that are assignable to SuiMoveValue:
	//
	//	*SuiMoveValue_Number
	//	*SuiMoveValue_Bool
	//	*SuiMoveValue_Address
	//	*SuiMoveValue_Vector
	//	*SuiMoveValue_String_
	//	*SuiMoveValue_UID
	//	*SuiMoveValue_Struct
	//	*SuiMoveValue_Option
	SuiMoveValue isSuiMoveValue_SuiMoveValue `protobuf_oneof:"sui_move_value"`
}

func (x *SuiMoveValue) Reset() {
	*x = SuiMoveValue{}
	if protoimpl.UnsafeEnabled {
		mi := &file_sui_proto_msgTypes[64]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *SuiMoveValue) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SuiMoveValue) ProtoMessage() {}

func (x *SuiMoveValue) ProtoReflect() protoreflect.Message {
	mi := &file_sui_proto_msgTypes[64]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SuiMoveValue.ProtoReflect.Descriptor instead.
func (*SuiMoveValue) Descriptor() ([]byte, []int) {
	return file_sui_proto_rawDescGZIP(), []int{64}
}

func (m *SuiMoveValue) GetSuiMoveValue() isSuiMoveValue_SuiMoveValue {
	if m != nil {
		return m.SuiMoveValue
	}
	return nil
}

func (x *SuiMoveValue) GetNumber() uint32 {
	if x, ok := x.GetSuiMoveValue().(*SuiMoveValue_Number); ok {
		return x.Number
	}
	return 0
}

func (x *SuiMoveValue) GetBool() bool {
	if x, ok := x.GetSuiMoveValue().(*SuiMoveValue_Bool); ok {
		return x.Bool
	}
	return false
}

func (x *SuiMoveValue) GetAddress() string {
	if x, ok := x.GetSuiMoveValue().(*SuiMoveValue_Address); ok {
		return x.Address
	}
	return ""
}

func (x *SuiMoveValue) GetVector() *ListOfSuiMoveValues {
	if x, ok := x.GetSuiMoveValue().(*SuiMoveValue_Vector); ok {
		return x.Vector
	}
	return nil
}

func (x *SuiMoveValue) GetString_() string {
	if x, ok := x.GetSuiMoveValue().(*SuiMoveValue_String_); ok {
		return x.String_
	}
	return ""
}

func (x *SuiMoveValue) GetUID() *UID {
	if x, ok := x.GetSuiMoveValue().(*SuiMoveValue_UID); ok {
		return x.UID
	}
	return nil
}

func (x *SuiMoveValue) GetStruct() *SuiMoveStruct {
	if x, ok := x.GetSuiMoveValue().(*SuiMoveValue_Struct); ok {
		return x.Struct
	}
	return nil
}

func (x *SuiMoveValue) GetOption() *SuiMoveValue {
	if x, ok := x.GetSuiMoveValue().(*SuiMoveValue_Option); ok {
		return x.Option
	}
	return nil
}

type isSuiMoveValue_SuiMoveValue interface {
	isSuiMoveValue_SuiMoveValue()
}

type SuiMoveValue_Number struct {
	Number uint32 `protobuf:"varint,1,opt,name=number,proto3,oneof"`
}

type SuiMoveValue_Bool struct {
	Bool bool `protobuf:"varint,2,opt,name=bool,proto3,oneof"`
}

type SuiMoveValue_Address struct {
	Address string `protobuf:"bytes,3,opt,name=address,proto3,oneof"`
}

type SuiMoveValue_Vector struct {
	Vector *ListOfSuiMoveValues `protobuf:"bytes,4,opt,name=vector,proto3,oneof"`
}

type SuiMoveValue_String_ struct {
	String_ string `protobuf:"bytes,5,opt,name=string,proto3,oneof"`
}

type SuiMoveValue_UID struct {
	UID *UID `protobuf:"bytes,6,opt,name=UID,proto3,oneof"`
}

type SuiMoveValue_Struct struct {
	Struct *SuiMoveStruct `protobuf:"bytes,7,opt,name=struct,proto3,oneof"`
}

type SuiMoveValue_Option struct {
	Option *SuiMoveValue `protobuf:"bytes,8,opt,name=option,proto3,oneof"`
}

func (*SuiMoveValue_Number) isSuiMoveValue_SuiMoveValue() {}

func (*SuiMoveValue_Bool) isSuiMoveValue_SuiMoveValue() {}

func (*SuiMoveValue_Address) isSuiMoveValue_SuiMoveValue() {}

func (*SuiMoveValue_Vector) isSuiMoveValue_SuiMoveValue() {}

func (*SuiMoveValue_String_) isSuiMoveValue_SuiMoveValue() {}

func (*SuiMoveValue_UID) isSuiMoveValue_SuiMoveValue() {}

func (*SuiMoveValue_Struct) isSuiMoveValue_SuiMoveValue() {}

func (*SuiMoveValue_Option) isSuiMoveValue_SuiMoveValue() {}

type UID struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Id *ObjectID `protobuf:"bytes,1,opt,name=id,proto3" json:"id,omitempty"`
}

func (x *UID) Reset() {
	*x = UID{}
	if protoimpl.UnsafeEnabled {
		mi := &file_sui_proto_msgTypes[65]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *UID) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*UID) ProtoMessage() {}

func (x *UID) ProtoReflect() protoreflect.Message {
	mi := &file_sui_proto_msgTypes[65]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use UID.ProtoReflect.Descriptor instead.
func (*UID) Descriptor() ([]byte, []int) {
	return file_sui_proto_rawDescGZIP(), []int{65}
}

func (x *UID) GetId() *ObjectID {
	if x != nil {
		return x.Id
	}
	return nil
}

type SuiMovePackage struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Disassembled map[string]*SuiJsonValue `protobuf:"bytes,1,rep,name=disassembled,proto3" json:"disassembled,omitempty" protobuf_key:"bytes,1,opt,name=key,proto3" protobuf_val:"bytes,2,opt,name=value,proto3"`
}

func (x *SuiMovePackage) Reset() {
	*x = SuiMovePackage{}
	if protoimpl.UnsafeEnabled {
		mi := &file_sui_proto_msgTypes[66]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *SuiMovePackage) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SuiMovePackage) ProtoMessage() {}

func (x *SuiMovePackage) ProtoReflect() protoreflect.Message {
	mi := &file_sui_proto_msgTypes[66]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SuiMovePackage.ProtoReflect.Descriptor instead.
func (*SuiMovePackage) Descriptor() ([]byte, []int) {
	return file_sui_proto_rawDescGZIP(), []int{66}
}

func (x *SuiMovePackage) GetDisassembled() map[string]*SuiJsonValue {
	if x != nil {
		return x.Disassembled
	}
	return nil
}

type SuiRawData struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Types that are assignable to SuiRawData:
	//
	//	*SuiRawData_MoveObject
	//	*SuiRawData_Package
	SuiRawData isSuiRawData_SuiRawData `protobuf_oneof:"sui_raw_data"`
}

func (x *SuiRawData) Reset() {
	*x = SuiRawData{}
	if protoimpl.UnsafeEnabled {
		mi := &file_sui_proto_msgTypes[67]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *SuiRawData) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SuiRawData) ProtoMessage() {}

func (x *SuiRawData) ProtoReflect() protoreflect.Message {
	mi := &file_sui_proto_msgTypes[67]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SuiRawData.ProtoReflect.Descriptor instead.
func (*SuiRawData) Descriptor() ([]byte, []int) {
	return file_sui_proto_rawDescGZIP(), []int{67}
}

func (m *SuiRawData) GetSuiRawData() isSuiRawData_SuiRawData {
	if m != nil {
		return m.SuiRawData
	}
	return nil
}

func (x *SuiRawData) GetMoveObject() *SuiRawMoveObject {
	if x, ok := x.GetSuiRawData().(*SuiRawData_MoveObject); ok {
		return x.MoveObject
	}
	return nil
}

func (x *SuiRawData) GetPackage() *SuiRawMovePackage {
	if x, ok := x.GetSuiRawData().(*SuiRawData_Package); ok {
		return x.Package
	}
	return nil
}

type isSuiRawData_SuiRawData interface {
	isSuiRawData_SuiRawData()
}

type SuiRawData_MoveObject struct {
	MoveObject *SuiRawMoveObject `protobuf:"bytes,1,opt,name=move_object,json=moveObject,proto3,oneof"`
}

type SuiRawData_Package struct {
	Package *SuiRawMovePackage `protobuf:"bytes,2,opt,name=package,proto3,oneof"`
}

func (*SuiRawData_MoveObject) isSuiRawData_SuiRawData() {}

func (*SuiRawData_Package) isSuiRawData_SuiRawData() {}

type SuiRawMoveObject struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Type              *StructTag `protobuf:"bytes,1,opt,name=type,proto3" json:"type,omitempty"`
	HasPublicTransfer bool       `protobuf:"varint,2,opt,name=has_public_transfer,json=hasPublicTransfer,proto3" json:"has_public_transfer,omitempty"`
	Version           uint64     `protobuf:"varint,3,opt,name=version,proto3" json:"version,omitempty"`
	BcsBytes          []byte     `protobuf:"bytes,4,opt,name=bcs_bytes,json=bcsBytes,proto3" json:"bcs_bytes,omitempty"`
}

func (x *SuiRawMoveObject) Reset() {
	*x = SuiRawMoveObject{}
	if protoimpl.UnsafeEnabled {
		mi := &file_sui_proto_msgTypes[68]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *SuiRawMoveObject) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SuiRawMoveObject) ProtoMessage() {}

func (x *SuiRawMoveObject) ProtoReflect() protoreflect.Message {
	mi := &file_sui_proto_msgTypes[68]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SuiRawMoveObject.ProtoReflect.Descriptor instead.
func (*SuiRawMoveObject) Descriptor() ([]byte, []int) {
	return file_sui_proto_rawDescGZIP(), []int{68}
}

func (x *SuiRawMoveObject) GetType() *StructTag {
	if x != nil {
		return x.Type
	}
	return nil
}

func (x *SuiRawMoveObject) GetHasPublicTransfer() bool {
	if x != nil {
		return x.HasPublicTransfer
	}
	return false
}

func (x *SuiRawMoveObject) GetVersion() uint64 {
	if x != nil {
		return x.Version
	}
	return 0
}

func (x *SuiRawMoveObject) GetBcsBytes() []byte {
	if x != nil {
		return x.BcsBytes
	}
	return nil
}

type SuiRawMovePackage struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Id              *ObjectID         `protobuf:"bytes,1,opt,name=id,proto3" json:"id,omitempty"`
	Version         uint64            `protobuf:"varint,2,opt,name=version,proto3" json:"version,omitempty"`
	ModuleMap       map[string][]byte `protobuf:"bytes,3,rep,name=module_map,json=moduleMap,proto3" json:"module_map,omitempty" protobuf_key:"bytes,1,opt,name=key,proto3" protobuf_val:"bytes,2,opt,name=value,proto3"`
	TypeOriginTable []*TypeOrigin     `protobuf:"bytes,4,rep,name=type_origin_table,json=typeOriginTable,proto3" json:"type_origin_table,omitempty"`
	// Note the key here is ObjectID, but we cannot use Message as keys in a map thus we covnert it into hex string
	// that is key = hex(ObjectId)
	LinkageTable map[string]*UpgradeInfo `protobuf:"bytes,5,rep,name=linkage_table,json=linkageTable,proto3" json:"linkage_table,omitempty" protobuf_key:"bytes,1,opt,name=key,proto3" protobuf_val:"bytes,2,opt,name=value,proto3"`
}

func (x *SuiRawMovePackage) Reset() {
	*x = SuiRawMovePackage{}
	if protoimpl.UnsafeEnabled {
		mi := &file_sui_proto_msgTypes[69]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *SuiRawMovePackage) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SuiRawMovePackage) ProtoMessage() {}

func (x *SuiRawMovePackage) ProtoReflect() protoreflect.Message {
	mi := &file_sui_proto_msgTypes[69]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SuiRawMovePackage.ProtoReflect.Descriptor instead.
func (*SuiRawMovePackage) Descriptor() ([]byte, []int) {
	return file_sui_proto_rawDescGZIP(), []int{69}
}

func (x *SuiRawMovePackage) GetId() *ObjectID {
	if x != nil {
		return x.Id
	}
	return nil
}

func (x *SuiRawMovePackage) GetVersion() uint64 {
	if x != nil {
		return x.Version
	}
	return 0
}

func (x *SuiRawMovePackage) GetModuleMap() map[string][]byte {
	if x != nil {
		return x.ModuleMap
	}
	return nil
}

func (x *SuiRawMovePackage) GetTypeOriginTable() []*TypeOrigin {
	if x != nil {
		return x.TypeOriginTable
	}
	return nil
}

func (x *SuiRawMovePackage) GetLinkageTable() map[string]*UpgradeInfo {
	if x != nil {
		return x.LinkageTable
	}
	return nil
}

type TypeOrigin struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ModuleName string    `protobuf:"bytes,1,opt,name=module_name,json=moduleName,proto3" json:"module_name,omitempty"`
	StructName string    `protobuf:"bytes,2,opt,name=struct_name,json=structName,proto3" json:"struct_name,omitempty"`
	Package    *ObjectID `protobuf:"bytes,3,opt,name=package,proto3" json:"package,omitempty"`
}

func (x *TypeOrigin) Reset() {
	*x = TypeOrigin{}
	if protoimpl.UnsafeEnabled {
		mi := &file_sui_proto_msgTypes[70]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *TypeOrigin) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*TypeOrigin) ProtoMessage() {}

func (x *TypeOrigin) ProtoReflect() protoreflect.Message {
	mi := &file_sui_proto_msgTypes[70]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use TypeOrigin.ProtoReflect.Descriptor instead.
func (*TypeOrigin) Descriptor() ([]byte, []int) {
	return file_sui_proto_rawDescGZIP(), []int{70}
}

func (x *TypeOrigin) GetModuleName() string {
	if x != nil {
		return x.ModuleName
	}
	return ""
}

func (x *TypeOrigin) GetStructName() string {
	if x != nil {
		return x.StructName
	}
	return ""
}

func (x *TypeOrigin) GetPackage() *ObjectID {
	if x != nil {
		return x.Package
	}
	return nil
}

type UpgradeInfo struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	UpgradedId      *ObjectID `protobuf:"bytes,1,opt,name=upgraded_id,json=upgradedId,proto3" json:"upgraded_id,omitempty"`
	UpgradedVersion uint64    `protobuf:"varint,2,opt,name=upgraded_version,json=upgradedVersion,proto3" json:"upgraded_version,omitempty"`
}

func (x *UpgradeInfo) Reset() {
	*x = UpgradeInfo{}
	if protoimpl.UnsafeEnabled {
		mi := &file_sui_proto_msgTypes[71]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *UpgradeInfo) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*UpgradeInfo) ProtoMessage() {}

func (x *UpgradeInfo) ProtoReflect() protoreflect.Message {
	mi := &file_sui_proto_msgTypes[71]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use UpgradeInfo.ProtoReflect.Descriptor instead.
func (*UpgradeInfo) Descriptor() ([]byte, []int) {
	return file_sui_proto_rawDescGZIP(), []int{71}
}

func (x *UpgradeInfo) GetUpgradedId() *ObjectID {
	if x != nil {
		return x.UpgradedId
	}
	return nil
}

func (x *UpgradeInfo) GetUpgradedVersion() uint64 {
	if x != nil {
		return x.UpgradedVersion
	}
	return 0
}

type SuiObjectResponseError_NotExists struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ObjectId *ObjectID `protobuf:"bytes,1,opt,name=object_id,json=objectId,proto3" json:"object_id,omitempty"`
}

func (x *SuiObjectResponseError_NotExists) Reset() {
	*x = SuiObjectResponseError_NotExists{}
	if protoimpl.UnsafeEnabled {
		mi := &file_sui_proto_msgTypes[74]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *SuiObjectResponseError_NotExists) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SuiObjectResponseError_NotExists) ProtoMessage() {}

func (x *SuiObjectResponseError_NotExists) ProtoReflect() protoreflect.Message {
	mi := &file_sui_proto_msgTypes[74]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SuiObjectResponseError_NotExists.ProtoReflect.Descriptor instead.
func (*SuiObjectResponseError_NotExists) Descriptor() ([]byte, []int) {
	return file_sui_proto_rawDescGZIP(), []int{57, 0}
}

func (x *SuiObjectResponseError_NotExists) GetObjectId() *ObjectID {
	if x != nil {
		return x.ObjectId
	}
	return nil
}

type SuiObjectResponseError_DynamicFieldNotFound struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ParentObjectId *ObjectID `protobuf:"bytes,1,opt,name=parent_object_id,json=parentObjectId,proto3" json:"parent_object_id,omitempty"`
}

func (x *SuiObjectResponseError_DynamicFieldNotFound) Reset() {
	*x = SuiObjectResponseError_DynamicFieldNotFound{}
	if protoimpl.UnsafeEnabled {
		mi := &file_sui_proto_msgTypes[75]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *SuiObjectResponseError_DynamicFieldNotFound) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SuiObjectResponseError_DynamicFieldNotFound) ProtoMessage() {}

func (x *SuiObjectResponseError_DynamicFieldNotFound) ProtoReflect() protoreflect.Message {
	mi := &file_sui_proto_msgTypes[75]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SuiObjectResponseError_DynamicFieldNotFound.ProtoReflect.Descriptor instead.
func (*SuiObjectResponseError_DynamicFieldNotFound) Descriptor() ([]byte, []int) {
	return file_sui_proto_rawDescGZIP(), []int{57, 1}
}

func (x *SuiObjectResponseError_DynamicFieldNotFound) GetParentObjectId() *ObjectID {
	if x != nil {
		return x.ParentObjectId
	}
	return nil
}

type SuiObjectResponseError_Deleted struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ObjectId *ObjectID `protobuf:"bytes,1,opt,name=object_id,json=objectId,proto3" json:"object_id,omitempty"`
	Version  uint64    `protobuf:"varint,2,opt,name=version,proto3" json:"version,omitempty"`
	Digest   string    `protobuf:"bytes,3,opt,name=digest,proto3" json:"digest,omitempty"`
}

func (x *SuiObjectResponseError_Deleted) Reset() {
	*x = SuiObjectResponseError_Deleted{}
	if protoimpl.UnsafeEnabled {
		mi := &file_sui_proto_msgTypes[76]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *SuiObjectResponseError_Deleted) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SuiObjectResponseError_Deleted) ProtoMessage() {}

func (x *SuiObjectResponseError_Deleted) ProtoReflect() protoreflect.Message {
	mi := &file_sui_proto_msgTypes[76]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SuiObjectResponseError_Deleted.ProtoReflect.Descriptor instead.
func (*SuiObjectResponseError_Deleted) Descriptor() ([]byte, []int) {
	return file_sui_proto_rawDescGZIP(), []int{57, 2}
}

func (x *SuiObjectResponseError_Deleted) GetObjectId() *ObjectID {
	if x != nil {
		return x.ObjectId
	}
	return nil
}

func (x *SuiObjectResponseError_Deleted) GetVersion() uint64 {
	if x != nil {
		return x.Version
	}
	return 0
}

func (x *SuiObjectResponseError_Deleted) GetDigest() string {
	if x != nil {
		return x.Digest
	}
	return ""
}

type SuiObjectResponseError_DisplayError struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Error string `protobuf:"bytes,1,opt,name=error,proto3" json:"error,omitempty"`
}

func (x *SuiObjectResponseError_DisplayError) Reset() {
	*x = SuiObjectResponseError_DisplayError{}
	if protoimpl.UnsafeEnabled {
		mi := &file_sui_proto_msgTypes[77]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *SuiObjectResponseError_DisplayError) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SuiObjectResponseError_DisplayError) ProtoMessage() {}

func (x *SuiObjectResponseError_DisplayError) ProtoReflect() protoreflect.Message {
	mi := &file_sui_proto_msgTypes[77]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SuiObjectResponseError_DisplayError.ProtoReflect.Descriptor instead.
func (*SuiObjectResponseError_DisplayError) Descriptor() ([]byte, []int) {
	return file_sui_proto_rawDescGZIP(), []int{57, 3}
}

func (x *SuiObjectResponseError_DisplayError) GetError() string {
	if x != nil {
		return x.Error
	}
	return ""
}

var File_sui_proto protoreflect.FileDescriptor

var file_sui_proto_rawDesc = []byte{
	0x0a, 0x09, 0x73, 0x75, 0x69, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x12, 0x11, 0x73, 0x75, 0x69,
	0x2e, 0x63, 0x68, 0x65, 0x63, 0x6b, 0x70, 0x6f, 0x69, 0x6e, 0x74, 0x2e, 0x76, 0x31, 0x1a, 0x1b,
	0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2f, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2f,
	0x65, 0x6d, 0x70, 0x74, 0x79, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x22, 0xf5, 0x01, 0x0a, 0x0e,
	0x43, 0x68, 0x65, 0x63, 0x6b, 0x70, 0x6f, 0x69, 0x6e, 0x74, 0x44, 0x61, 0x74, 0x61, 0x12, 0x3d,
	0x0a, 0x0a, 0x63, 0x68, 0x65, 0x63, 0x6b, 0x70, 0x6f, 0x69, 0x6e, 0x74, 0x18, 0x01, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x1d, 0x2e, 0x73, 0x75, 0x69, 0x2e, 0x63, 0x68, 0x65, 0x63, 0x6b, 0x70, 0x6f,
	0x69, 0x6e, 0x74, 0x2e, 0x76, 0x31, 0x2e, 0x43, 0x68, 0x65, 0x63, 0x6b, 0x70, 0x6f, 0x69, 0x6e,
	0x74, 0x52, 0x0a, 0x63, 0x68, 0x65, 0x63, 0x6b, 0x70, 0x6f, 0x69, 0x6e, 0x74, 0x12, 0x59, 0x0a,
	0x0c, 0x74, 0x72, 0x61, 0x6e, 0x73, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x18, 0x02, 0x20,
	0x03, 0x28, 0x0b, 0x32, 0x35, 0x2e, 0x73, 0x75, 0x69, 0x2e, 0x63, 0x68, 0x65, 0x63, 0x6b, 0x70,
	0x6f, 0x69, 0x6e, 0x74, 0x2e, 0x76, 0x31, 0x2e, 0x43, 0x68, 0x65, 0x63, 0x6b, 0x70, 0x6f, 0x69,
	0x6e, 0x74, 0x54, 0x72, 0x61, 0x6e, 0x73, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x42, 0x6c, 0x6f,
	0x63, 0x6b, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x52, 0x0c, 0x74, 0x72, 0x61, 0x6e,
	0x73, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x12, 0x49, 0x0a, 0x0f, 0x63, 0x68, 0x61, 0x6e,
	0x67, 0x65, 0x64, 0x5f, 0x6f, 0x62, 0x6a, 0x65, 0x63, 0x74, 0x73, 0x18, 0x03, 0x20, 0x03, 0x28,
	0x0b, 0x32, 0x20, 0x2e, 0x73, 0x75, 0x69, 0x2e, 0x63, 0x68, 0x65, 0x63, 0x6b, 0x70, 0x6f, 0x69,
	0x6e, 0x74, 0x2e, 0x76, 0x31, 0x2e, 0x43, 0x68, 0x61, 0x6e, 0x67, 0x65, 0x64, 0x4f, 0x62, 0x6a,
	0x65, 0x63, 0x74, 0x52, 0x0e, 0x63, 0x68, 0x61, 0x6e, 0x67, 0x65, 0x64, 0x4f, 0x62, 0x6a, 0x65,
	0x63, 0x74, 0x73, 0x22, 0x8b, 0x05, 0x0a, 0x0a, 0x43, 0x68, 0x65, 0x63, 0x6b, 0x70, 0x6f, 0x69,
	0x6e, 0x74, 0x12, 0x14, 0x0a, 0x05, 0x65, 0x70, 0x6f, 0x63, 0x68, 0x18, 0x01, 0x20, 0x01, 0x28,
	0x04, 0x52, 0x05, 0x65, 0x70, 0x6f, 0x63, 0x68, 0x12, 0x27, 0x0a, 0x0f, 0x73, 0x65, 0x71, 0x75,
	0x65, 0x6e, 0x63, 0x65, 0x5f, 0x6e, 0x75, 0x6d, 0x62, 0x65, 0x72, 0x18, 0x02, 0x20, 0x01, 0x28,
	0x04, 0x52, 0x0e, 0x73, 0x65, 0x71, 0x75, 0x65, 0x6e, 0x63, 0x65, 0x4e, 0x75, 0x6d, 0x62, 0x65,
	0x72, 0x12, 0x16, 0x0a, 0x06, 0x64, 0x69, 0x67, 0x65, 0x73, 0x74, 0x18, 0x03, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x06, 0x64, 0x69, 0x67, 0x65, 0x73, 0x74, 0x12, 0x3c, 0x0a, 0x1a, 0x6e, 0x65, 0x74,
	0x77, 0x6f, 0x72, 0x6b, 0x5f, 0x74, 0x6f, 0x74, 0x61, 0x6c, 0x5f, 0x74, 0x72, 0x61, 0x6e, 0x73,
	0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x18, 0x04, 0x20, 0x01, 0x28, 0x04, 0x52, 0x18, 0x6e,
	0x65, 0x74, 0x77, 0x6f, 0x72, 0x6b, 0x54, 0x6f, 0x74, 0x61, 0x6c, 0x54, 0x72, 0x61, 0x6e, 0x73,
	0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x12, 0x2c, 0x0a, 0x0f, 0x70, 0x72, 0x65, 0x76, 0x69,
	0x6f, 0x75, 0x73, 0x5f, 0x64, 0x69, 0x67, 0x65, 0x73, 0x74, 0x18, 0x05, 0x20, 0x01, 0x28, 0x09,
	0x48, 0x00, 0x52, 0x0e, 0x70, 0x72, 0x65, 0x76, 0x69, 0x6f, 0x75, 0x73, 0x44, 0x69, 0x67, 0x65,
	0x73, 0x74, 0x88, 0x01, 0x01, 0x12, 0x65, 0x0a, 0x1e, 0x65, 0x70, 0x6f, 0x63, 0x68, 0x5f, 0x72,
	0x6f, 0x6c, 0x6c, 0x69, 0x6e, 0x67, 0x5f, 0x67, 0x61, 0x73, 0x5f, 0x63, 0x6f, 0x73, 0x74, 0x5f,
	0x73, 0x75, 0x6d, 0x6d, 0x61, 0x72, 0x79, 0x18, 0x06, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x21, 0x2e,
	0x73, 0x75, 0x69, 0x2e, 0x63, 0x68, 0x65, 0x63, 0x6b, 0x70, 0x6f, 0x69, 0x6e, 0x74, 0x2e, 0x76,
	0x31, 0x2e, 0x47, 0x61, 0x73, 0x43, 0x6f, 0x73, 0x74, 0x53, 0x75, 0x6d, 0x6d, 0x61, 0x72, 0x79,
	0x52, 0x1a, 0x65, 0x70, 0x6f, 0x63, 0x68, 0x52, 0x6f, 0x6c, 0x6c, 0x69, 0x6e, 0x67, 0x47, 0x61,
	0x73, 0x43, 0x6f, 0x73, 0x74, 0x53, 0x75, 0x6d, 0x6d, 0x61, 0x72, 0x79, 0x12, 0x21, 0x0a, 0x0c,
	0x74, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x5f, 0x6d, 0x73, 0x18, 0x07, 0x20, 0x01,
	0x28, 0x04, 0x52, 0x0b, 0x74, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x4d, 0x73, 0x12,
	0x51, 0x0a, 0x11, 0x65, 0x6e, 0x64, 0x5f, 0x6f, 0x66, 0x5f, 0x65, 0x70, 0x6f, 0x63, 0x68, 0x5f,
	0x64, 0x61, 0x74, 0x61, 0x18, 0x08, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x21, 0x2e, 0x73, 0x75, 0x69,
	0x2e, 0x63, 0x68, 0x65, 0x63, 0x6b, 0x70, 0x6f, 0x69, 0x6e, 0x74, 0x2e, 0x76, 0x31, 0x2e, 0x45,
	0x6e, 0x64, 0x4f, 0x66, 0x45, 0x70, 0x6f, 0x63, 0x68, 0x44, 0x61, 0x74, 0x61, 0x48, 0x01, 0x52,
	0x0e, 0x65, 0x6e, 0x64, 0x4f, 0x66, 0x45, 0x70, 0x6f, 0x63, 0x68, 0x44, 0x61, 0x74, 0x61, 0x88,
	0x01, 0x01, 0x12, 0x22, 0x0a, 0x0c, 0x74, 0x72, 0x61, 0x6e, 0x73, 0x61, 0x63, 0x74, 0x69, 0x6f,
	0x6e, 0x73, 0x18, 0x09, 0x20, 0x03, 0x28, 0x09, 0x52, 0x0c, 0x74, 0x72, 0x61, 0x6e, 0x73, 0x61,
	0x63, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x12, 0x5e, 0x0a, 0x16, 0x63, 0x68, 0x65, 0x63, 0x6b, 0x70,
	0x6f, 0x69, 0x6e, 0x74, 0x5f, 0x63, 0x6f, 0x6d, 0x6d, 0x69, 0x74, 0x6d, 0x65, 0x6e, 0x74, 0x73,
	0x18, 0x0a, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x27, 0x2e, 0x73, 0x75, 0x69, 0x2e, 0x63, 0x68, 0x65,
	0x63, 0x6b, 0x70, 0x6f, 0x69, 0x6e, 0x74, 0x2e, 0x76, 0x31, 0x2e, 0x43, 0x68, 0x65, 0x63, 0x6b,
	0x70, 0x6f, 0x69, 0x6e, 0x74, 0x43, 0x6f, 0x6d, 0x6d, 0x69, 0x74, 0x6d, 0x65, 0x6e, 0x74, 0x52,
	0x15, 0x63, 0x68, 0x65, 0x63, 0x6b, 0x70, 0x6f, 0x69, 0x6e, 0x74, 0x43, 0x6f, 0x6d, 0x6d, 0x69,
	0x74, 0x6d, 0x65, 0x6e, 0x74, 0x73, 0x12, 0x2f, 0x0a, 0x13, 0x76, 0x61, 0x6c, 0x69, 0x64, 0x61,
	0x74, 0x6f, 0x72, 0x5f, 0x73, 0x69, 0x67, 0x6e, 0x61, 0x74, 0x75, 0x72, 0x65, 0x18, 0x0b, 0x20,
	0x01, 0x28, 0x0c, 0x52, 0x12, 0x76, 0x61, 0x6c, 0x69, 0x64, 0x61, 0x74, 0x6f, 0x72, 0x53, 0x69,
	0x67, 0x6e, 0x61, 0x74, 0x75, 0x72, 0x65, 0x42, 0x12, 0x0a, 0x10, 0x5f, 0x70, 0x72, 0x65, 0x76,
	0x69, 0x6f, 0x75, 0x73, 0x5f, 0x64, 0x69, 0x67, 0x65, 0x73, 0x74, 0x42, 0x14, 0x0a, 0x12, 0x5f,
	0x65, 0x6e, 0x64, 0x5f, 0x6f, 0x66, 0x5f, 0x65, 0x70, 0x6f, 0x63, 0x68, 0x5f, 0x64, 0x61, 0x74,
	0x61, 0x22, 0xe0, 0x03, 0x0a, 0x22, 0x43, 0x68, 0x65, 0x63, 0x6b, 0x70, 0x6f, 0x69, 0x6e, 0x74,
	0x54, 0x72, 0x61, 0x6e, 0x73, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x42, 0x6c, 0x6f, 0x63, 0x6b,
	0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x16, 0x0a, 0x06, 0x64, 0x69, 0x67, 0x65,
	0x73, 0x74, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x64, 0x69, 0x67, 0x65, 0x73, 0x74,
	0x12, 0x48, 0x0a, 0x0b, 0x74, 0x72, 0x61, 0x6e, 0x73, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x18,
	0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x26, 0x2e, 0x73, 0x75, 0x69, 0x2e, 0x63, 0x68, 0x65, 0x63,
	0x6b, 0x70, 0x6f, 0x69, 0x6e, 0x74, 0x2e, 0x76, 0x31, 0x2e, 0x53, 0x75, 0x69, 0x54, 0x72, 0x61,
	0x6e, 0x73, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x42, 0x6c, 0x6f, 0x63, 0x6b, 0x52, 0x0b, 0x74,
	0x72, 0x61, 0x6e, 0x73, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x27, 0x0a, 0x0f, 0x72, 0x61,
	0x77, 0x5f, 0x74, 0x72, 0x61, 0x6e, 0x73, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x03, 0x20,
	0x01, 0x28, 0x0c, 0x52, 0x0e, 0x72, 0x61, 0x77, 0x54, 0x72, 0x61, 0x6e, 0x73, 0x61, 0x63, 0x74,
	0x69, 0x6f, 0x6e, 0x12, 0x47, 0x0a, 0x07, 0x65, 0x66, 0x66, 0x65, 0x63, 0x74, 0x73, 0x18, 0x04,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x2d, 0x2e, 0x73, 0x75, 0x69, 0x2e, 0x63, 0x68, 0x65, 0x63, 0x6b,
	0x70, 0x6f, 0x69, 0x6e, 0x74, 0x2e, 0x76, 0x31, 0x2e, 0x53, 0x75, 0x69, 0x54, 0x72, 0x61, 0x6e,
	0x73, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x42, 0x6c, 0x6f, 0x63, 0x6b, 0x45, 0x66, 0x66, 0x65,
	0x63, 0x74, 0x73, 0x52, 0x07, 0x65, 0x66, 0x66, 0x65, 0x63, 0x74, 0x73, 0x12, 0x44, 0x0a, 0x06,
	0x65, 0x76, 0x65, 0x6e, 0x74, 0x73, 0x18, 0x05, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x2c, 0x2e, 0x73,
	0x75, 0x69, 0x2e, 0x63, 0x68, 0x65, 0x63, 0x6b, 0x70, 0x6f, 0x69, 0x6e, 0x74, 0x2e, 0x76, 0x31,
	0x2e, 0x53, 0x75, 0x69, 0x54, 0x72, 0x61, 0x6e, 0x73, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x42,
	0x6c, 0x6f, 0x63, 0x6b, 0x45, 0x76, 0x65, 0x6e, 0x74, 0x73, 0x52, 0x06, 0x65, 0x76, 0x65, 0x6e,
	0x74, 0x73, 0x12, 0x21, 0x0a, 0x0c, 0x74, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x5f,
	0x6d, 0x73, 0x18, 0x06, 0x20, 0x01, 0x28, 0x04, 0x52, 0x0b, 0x74, 0x69, 0x6d, 0x65, 0x73, 0x74,
	0x61, 0x6d, 0x70, 0x4d, 0x73, 0x12, 0x3f, 0x0a, 0x19, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x72, 0x6d,
	0x65, 0x64, 0x5f, 0x6c, 0x6f, 0x63, 0x61, 0x6c, 0x5f, 0x65, 0x78, 0x65, 0x63, 0x75, 0x74, 0x69,
	0x6f, 0x6e, 0x18, 0x07, 0x20, 0x01, 0x28, 0x08, 0x48, 0x00, 0x52, 0x17, 0x63, 0x6f, 0x6e, 0x66,
	0x69, 0x72, 0x6d, 0x65, 0x64, 0x4c, 0x6f, 0x63, 0x61, 0x6c, 0x45, 0x78, 0x65, 0x63, 0x75, 0x74,
	0x69, 0x6f, 0x6e, 0x88, 0x01, 0x01, 0x12, 0x1e, 0x0a, 0x0a, 0x63, 0x68, 0x65, 0x63, 0x6b, 0x70,
	0x6f, 0x69, 0x6e, 0x74, 0x18, 0x08, 0x20, 0x01, 0x28, 0x04, 0x52, 0x0a, 0x63, 0x68, 0x65, 0x63,
	0x6b, 0x70, 0x6f, 0x69, 0x6e, 0x74, 0x42, 0x1c, 0x0a, 0x1a, 0x5f, 0x63, 0x6f, 0x6e, 0x66, 0x69,
	0x72, 0x6d, 0x65, 0x64, 0x5f, 0x6c, 0x6f, 0x63, 0x61, 0x6c, 0x5f, 0x65, 0x78, 0x65, 0x63, 0x75,
	0x74, 0x69, 0x6f, 0x6e, 0x22, 0xc2, 0x01, 0x0a, 0x0e, 0x47, 0x61, 0x73, 0x43, 0x6f, 0x73, 0x74,
	0x53, 0x75, 0x6d, 0x6d, 0x61, 0x72, 0x79, 0x12, 0x29, 0x0a, 0x10, 0x63, 0x6f, 0x6d, 0x70, 0x75,
	0x74, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x63, 0x6f, 0x73, 0x74, 0x18, 0x01, 0x20, 0x01, 0x28,
	0x04, 0x52, 0x0f, 0x63, 0x6f, 0x6d, 0x70, 0x75, 0x74, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x43, 0x6f,
	0x73, 0x74, 0x12, 0x21, 0x0a, 0x0c, 0x73, 0x74, 0x6f, 0x72, 0x61, 0x67, 0x65, 0x5f, 0x63, 0x6f,
	0x73, 0x74, 0x18, 0x02, 0x20, 0x01, 0x28, 0x04, 0x52, 0x0b, 0x73, 0x74, 0x6f, 0x72, 0x61, 0x67,
	0x65, 0x43, 0x6f, 0x73, 0x74, 0x12, 0x25, 0x0a, 0x0e, 0x73, 0x74, 0x6f, 0x72, 0x61, 0x67, 0x65,
	0x5f, 0x72, 0x65, 0x62, 0x61, 0x74, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x04, 0x52, 0x0d, 0x73,
	0x74, 0x6f, 0x72, 0x61, 0x67, 0x65, 0x52, 0x65, 0x62, 0x61, 0x74, 0x65, 0x12, 0x3b, 0x0a, 0x1a,
	0x6e, 0x6f, 0x6e, 0x5f, 0x72, 0x65, 0x66, 0x75, 0x6e, 0x64, 0x61, 0x62, 0x6c, 0x65, 0x5f, 0x73,
	0x74, 0x6f, 0x72, 0x61, 0x67, 0x65, 0x5f, 0x66, 0x65, 0x65, 0x18, 0x04, 0x20, 0x01, 0x28, 0x04,
	0x52, 0x17, 0x6e, 0x6f, 0x6e, 0x52, 0x65, 0x66, 0x75, 0x6e, 0x64, 0x61, 0x62, 0x6c, 0x65, 0x53,
	0x74, 0x6f, 0x72, 0x61, 0x67, 0x65, 0x46, 0x65, 0x65, 0x22, 0xfe, 0x01, 0x0a, 0x0e, 0x45, 0x6e,
	0x64, 0x4f, 0x66, 0x45, 0x70, 0x6f, 0x63, 0x68, 0x44, 0x61, 0x74, 0x61, 0x12, 0x57, 0x0a, 0x14,
	0x6e, 0x65, 0x78, 0x74, 0x5f, 0x65, 0x70, 0x6f, 0x63, 0x68, 0x5f, 0x63, 0x6f, 0x6d, 0x6d, 0x69,
	0x74, 0x74, 0x65, 0x65, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x25, 0x2e, 0x73, 0x75, 0x69,
	0x2e, 0x63, 0x68, 0x65, 0x63, 0x6b, 0x70, 0x6f, 0x69, 0x6e, 0x74, 0x2e, 0x76, 0x31, 0x2e, 0x4e,
	0x65, 0x78, 0x74, 0x45, 0x70, 0x6f, 0x63, 0x68, 0x43, 0x6f, 0x6d, 0x6d, 0x69, 0x74, 0x74, 0x65,
	0x65, 0x52, 0x12, 0x6e, 0x65, 0x78, 0x74, 0x45, 0x70, 0x6f, 0x63, 0x68, 0x43, 0x6f, 0x6d, 0x6d,
	0x69, 0x74, 0x74, 0x65, 0x65, 0x12, 0x3d, 0x0a, 0x1b, 0x6e, 0x65, 0x78, 0x74, 0x5f, 0x65, 0x70,
	0x6f, 0x63, 0x68, 0x5f, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x63, 0x6f, 0x6c, 0x5f, 0x76, 0x65, 0x72,
	0x73, 0x69, 0x6f, 0x6e, 0x18, 0x02, 0x20, 0x01, 0x28, 0x04, 0x52, 0x18, 0x6e, 0x65, 0x78, 0x74,
	0x45, 0x70, 0x6f, 0x63, 0x68, 0x50, 0x72, 0x6f, 0x74, 0x6f, 0x63, 0x6f, 0x6c, 0x56, 0x65, 0x72,
	0x73, 0x69, 0x6f, 0x6e, 0x12, 0x54, 0x0a, 0x11, 0x65, 0x70, 0x6f, 0x63, 0x68, 0x5f, 0x63, 0x6f,
	0x6d, 0x6d, 0x69, 0x74, 0x6d, 0x65, 0x6e, 0x74, 0x73, 0x18, 0x03, 0x20, 0x03, 0x28, 0x0b, 0x32,
	0x27, 0x2e, 0x73, 0x75, 0x69, 0x2e, 0x63, 0x68, 0x65, 0x63, 0x6b, 0x70, 0x6f, 0x69, 0x6e, 0x74,
	0x2e, 0x76, 0x31, 0x2e, 0x43, 0x68, 0x65, 0x63, 0x6b, 0x70, 0x6f, 0x69, 0x6e, 0x74, 0x43, 0x6f,
	0x6d, 0x6d, 0x69, 0x74, 0x6d, 0x65, 0x6e, 0x74, 0x52, 0x10, 0x65, 0x70, 0x6f, 0x63, 0x68, 0x43,
	0x6f, 0x6d, 0x6d, 0x69, 0x74, 0x6d, 0x65, 0x6e, 0x74, 0x73, 0x22, 0x5a, 0x0a, 0x12, 0x4e, 0x65,
	0x78, 0x74, 0x45, 0x70, 0x6f, 0x63, 0x68, 0x43, 0x6f, 0x6d, 0x6d, 0x69, 0x74, 0x74, 0x65, 0x65,
	0x12, 0x25, 0x0a, 0x0e, 0x61, 0x75, 0x74, 0x68, 0x6f, 0x72, 0x69, 0x74, 0x79, 0x5f, 0x6e, 0x61,
	0x6d, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0d, 0x61, 0x75, 0x74, 0x68, 0x6f, 0x72,
	0x69, 0x74, 0x79, 0x4e, 0x61, 0x6d, 0x65, 0x12, 0x1d, 0x0a, 0x0a, 0x73, 0x74, 0x61, 0x6b, 0x65,
	0x5f, 0x75, 0x6e, 0x69, 0x74, 0x18, 0x02, 0x20, 0x01, 0x28, 0x04, 0x52, 0x09, 0x73, 0x74, 0x61,
	0x6b, 0x65, 0x55, 0x6e, 0x69, 0x74, 0x22, 0x9b, 0x01, 0x0a, 0x14, 0x43, 0x68, 0x65, 0x63, 0x6b,
	0x70, 0x6f, 0x69, 0x6e, 0x74, 0x43, 0x6f, 0x6d, 0x6d, 0x69, 0x74, 0x6d, 0x65, 0x6e, 0x74, 0x12,
	0x6a, 0x0a, 0x1b, 0x45, 0x43, 0x4d, 0x48, 0x5f, 0x6c, 0x69, 0x76, 0x65, 0x5f, 0x6f, 0x62, 0x6a,
	0x65, 0x63, 0x74, 0x5f, 0x73, 0x65, 0x74, 0x5f, 0x64, 0x69, 0x67, 0x65, 0x73, 0x74, 0x18, 0x01,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x2a, 0x2e, 0x73, 0x75, 0x69, 0x2e, 0x63, 0x68, 0x65, 0x63, 0x6b,
	0x70, 0x6f, 0x69, 0x6e, 0x74, 0x2e, 0x76, 0x31, 0x2e, 0x45, 0x43, 0x4d, 0x48, 0x4c, 0x69, 0x76,
	0x65, 0x4f, 0x62, 0x6a, 0x65, 0x63, 0x74, 0x53, 0x65, 0x74, 0x44, 0x69, 0x67, 0x65, 0x73, 0x74,
	0x48, 0x00, 0x52, 0x17, 0x45, 0x43, 0x4d, 0x48, 0x4c, 0x69, 0x76, 0x65, 0x4f, 0x62, 0x6a, 0x65,
	0x63, 0x74, 0x53, 0x65, 0x74, 0x44, 0x69, 0x67, 0x65, 0x73, 0x74, 0x42, 0x17, 0x0a, 0x15, 0x63,
	0x68, 0x65, 0x63, 0x6b, 0x70, 0x6f, 0x69, 0x6e, 0x74, 0x5f, 0x63, 0x6f, 0x6d, 0x6d, 0x69, 0x74,
	0x6d, 0x65, 0x6e, 0x74, 0x22, 0x31, 0x0a, 0x17, 0x45, 0x43, 0x4d, 0x48, 0x4c, 0x69, 0x76, 0x65,
	0x4f, 0x62, 0x6a, 0x65, 0x63, 0x74, 0x53, 0x65, 0x74, 0x44, 0x69, 0x67, 0x65, 0x73, 0x74, 0x12,
	0x16, 0x0a, 0x06, 0x64, 0x69, 0x67, 0x65, 0x73, 0x74, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x06, 0x64, 0x69, 0x67, 0x65, 0x73, 0x74, 0x22, 0x55, 0x0a, 0x13, 0x53, 0x75, 0x69, 0x54, 0x72,
	0x61, 0x6e, 0x73, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x42, 0x6c, 0x6f, 0x63, 0x6b, 0x12, 0x3e,
	0x0a, 0x04, 0x64, 0x61, 0x74, 0x61, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x2a, 0x2e, 0x73,
	0x75, 0x69, 0x2e, 0x63, 0x68, 0x65, 0x63, 0x6b, 0x70, 0x6f, 0x69, 0x6e, 0x74, 0x2e, 0x76, 0x31,
	0x2e, 0x53, 0x75, 0x69, 0x54, 0x72, 0x61, 0x6e, 0x73, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x42,
	0x6c, 0x6f, 0x63, 0x6b, 0x44, 0x61, 0x74, 0x61, 0x52, 0x04, 0x64, 0x61, 0x74, 0x61, 0x22, 0x77,
	0x0a, 0x17, 0x53, 0x75, 0x69, 0x54, 0x72, 0x61, 0x6e, 0x73, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e,
	0x42, 0x6c, 0x6f, 0x63, 0x6b, 0x44, 0x61, 0x74, 0x61, 0x12, 0x3e, 0x0a, 0x02, 0x76, 0x31, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x2c, 0x2e, 0x73, 0x75, 0x69, 0x2e, 0x63, 0x68, 0x65, 0x63,
	0x6b, 0x70, 0x6f, 0x69, 0x6e, 0x74, 0x2e, 0x76, 0x31, 0x2e, 0x53, 0x75, 0x69, 0x54, 0x72, 0x61,
	0x6e, 0x73, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x42, 0x6c, 0x6f, 0x63, 0x6b, 0x44, 0x61, 0x74,
	0x61, 0x56, 0x31, 0x48, 0x00, 0x52, 0x02, 0x76, 0x31, 0x42, 0x1c, 0x0a, 0x1a, 0x73, 0x75, 0x69,
	0x5f, 0x74, 0x72, 0x61, 0x6e, 0x73, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x62, 0x6c, 0x6f,
	0x63, 0x6b, 0x5f, 0x64, 0x61, 0x74, 0x61, 0x22, 0xbb, 0x01, 0x0a, 0x19, 0x53, 0x75, 0x69, 0x54,
	0x72, 0x61, 0x6e, 0x73, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x42, 0x6c, 0x6f, 0x63, 0x6b, 0x44,
	0x61, 0x74, 0x61, 0x56, 0x31, 0x12, 0x4c, 0x0a, 0x0b, 0x74, 0x72, 0x61, 0x6e, 0x73, 0x61, 0x63,
	0x74, 0x69, 0x6f, 0x6e, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x2a, 0x2e, 0x73, 0x75, 0x69,
	0x2e, 0x63, 0x68, 0x65, 0x63, 0x6b, 0x70, 0x6f, 0x69, 0x6e, 0x74, 0x2e, 0x76, 0x31, 0x2e, 0x53,
	0x75, 0x69, 0x54, 0x72, 0x61, 0x6e, 0x73, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x42, 0x6c, 0x6f,
	0x63, 0x6b, 0x4b, 0x69, 0x6e, 0x64, 0x52, 0x0b, 0x74, 0x72, 0x61, 0x6e, 0x73, 0x61, 0x63, 0x74,
	0x69, 0x6f, 0x6e, 0x12, 0x16, 0x0a, 0x06, 0x73, 0x65, 0x6e, 0x64, 0x65, 0x72, 0x18, 0x02, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x06, 0x73, 0x65, 0x6e, 0x64, 0x65, 0x72, 0x12, 0x38, 0x0a, 0x08, 0x67,
	0x61, 0x73, 0x5f, 0x64, 0x61, 0x74, 0x61, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1d, 0x2e,
	0x73, 0x75, 0x69, 0x2e, 0x63, 0x68, 0x65, 0x63, 0x6b, 0x70, 0x6f, 0x69, 0x6e, 0x74, 0x2e, 0x76,
	0x31, 0x2e, 0x53, 0x75, 0x69, 0x47, 0x61, 0x73, 0x44, 0x61, 0x74, 0x61, 0x52, 0x07, 0x67, 0x61,
	0x73, 0x44, 0x61, 0x74, 0x61, 0x22, 0xa3, 0x03, 0x0a, 0x17, 0x53, 0x75, 0x69, 0x54, 0x72, 0x61,
	0x6e, 0x73, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x42, 0x6c, 0x6f, 0x63, 0x6b, 0x4b, 0x69, 0x6e,
	0x64, 0x12, 0x46, 0x0a, 0x0c, 0x63, 0x68, 0x61, 0x6e, 0x67, 0x65, 0x5f, 0x65, 0x70, 0x6f, 0x63,
	0x68, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x21, 0x2e, 0x73, 0x75, 0x69, 0x2e, 0x63, 0x68,
	0x65, 0x63, 0x6b, 0x70, 0x6f, 0x69, 0x6e, 0x74, 0x2e, 0x76, 0x31, 0x2e, 0x53, 0x75, 0x69, 0x43,
	0x68, 0x61, 0x6e, 0x67, 0x65, 0x45, 0x70, 0x6f, 0x63, 0x68, 0x48, 0x00, 0x52, 0x0b, 0x63, 0x68,
	0x61, 0x6e, 0x67, 0x65, 0x45, 0x70, 0x6f, 0x63, 0x68, 0x12, 0x44, 0x0a, 0x07, 0x67, 0x65, 0x6e,
	0x65, 0x73, 0x69, 0x73, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x28, 0x2e, 0x73, 0x75, 0x69,
	0x2e, 0x63, 0x68, 0x65, 0x63, 0x6b, 0x70, 0x6f, 0x69, 0x6e, 0x74, 0x2e, 0x76, 0x31, 0x2e, 0x53,
	0x75, 0x69, 0x47, 0x65, 0x6e, 0x65, 0x73, 0x69, 0x73, 0x54, 0x72, 0x61, 0x6e, 0x73, 0x61, 0x63,
	0x74, 0x69, 0x6f, 0x6e, 0x48, 0x00, 0x52, 0x07, 0x67, 0x65, 0x6e, 0x65, 0x73, 0x69, 0x73, 0x12,
	0x6b, 0x0a, 0x19, 0x63, 0x6f, 0x6e, 0x73, 0x65, 0x6e, 0x73, 0x75, 0x73, 0x5f, 0x63, 0x6f, 0x6d,
	0x6d, 0x69, 0x74, 0x5f, 0x70, 0x72, 0x6f, 0x6c, 0x6f, 0x67, 0x75, 0x65, 0x18, 0x03, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x2d, 0x2e, 0x73, 0x75, 0x69, 0x2e, 0x63, 0x68, 0x65, 0x63, 0x6b, 0x70, 0x6f,
	0x69, 0x6e, 0x74, 0x2e, 0x76, 0x31, 0x2e, 0x53, 0x75, 0x69, 0x43, 0x6f, 0x6e, 0x73, 0x65, 0x6e,
	0x73, 0x75, 0x73, 0x43, 0x6f, 0x6d, 0x6d, 0x69, 0x74, 0x50, 0x72, 0x6f, 0x6c, 0x6f, 0x67, 0x75,
	0x65, 0x48, 0x00, 0x52, 0x17, 0x63, 0x6f, 0x6e, 0x73, 0x65, 0x6e, 0x73, 0x75, 0x73, 0x43, 0x6f,
	0x6d, 0x6d, 0x69, 0x74, 0x50, 0x72, 0x6f, 0x6c, 0x6f, 0x67, 0x75, 0x65, 0x12, 0x6f, 0x0a, 0x18,
	0x70, 0x72, 0x6f, 0x67, 0x72, 0x61, 0x6d, 0x6d, 0x61, 0x62, 0x6c, 0x65, 0x5f, 0x74, 0x72, 0x61,
	0x6e, 0x73, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x32,
	0x2e, 0x73, 0x75, 0x69, 0x2e, 0x63, 0x68, 0x65, 0x63, 0x6b, 0x70, 0x6f, 0x69, 0x6e, 0x74, 0x2e,
	0x76, 0x31, 0x2e, 0x53, 0x75, 0x69, 0x50, 0x72, 0x6f, 0x67, 0x72, 0x61, 0x6d, 0x6d, 0x61, 0x62,
	0x6c, 0x65, 0x54, 0x72, 0x61, 0x6e, 0x73, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x42, 0x6c, 0x6f,
	0x63, 0x6b, 0x48, 0x00, 0x52, 0x17, 0x70, 0x72, 0x6f, 0x67, 0x72, 0x61, 0x6d, 0x6d, 0x61, 0x62,
	0x6c, 0x65, 0x54, 0x72, 0x61, 0x6e, 0x73, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x42, 0x1c, 0x0a,
	0x1a, 0x73, 0x75, 0x69, 0x5f, 0x74, 0x72, 0x61, 0x6e, 0x73, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e,
	0x5f, 0x62, 0x6c, 0x6f, 0x63, 0x6b, 0x5f, 0x6b, 0x69, 0x6e, 0x64, 0x22, 0x8b, 0x01, 0x0a, 0x0a,
	0x53, 0x75, 0x69, 0x47, 0x61, 0x73, 0x44, 0x61, 0x74, 0x61, 0x12, 0x39, 0x0a, 0x07, 0x70, 0x61,
	0x79, 0x6d, 0x65, 0x6e, 0x74, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x1f, 0x2e, 0x73, 0x75,
	0x69, 0x2e, 0x63, 0x68, 0x65, 0x63, 0x6b, 0x70, 0x6f, 0x69, 0x6e, 0x74, 0x2e, 0x76, 0x31, 0x2e,
	0x53, 0x75, 0x69, 0x4f, 0x62, 0x6a, 0x65, 0x63, 0x74, 0x52, 0x65, 0x66, 0x52, 0x07, 0x70, 0x61,
	0x79, 0x6d, 0x65, 0x6e, 0x74, 0x12, 0x14, 0x0a, 0x05, 0x6f, 0x77, 0x6e, 0x65, 0x72, 0x18, 0x02,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x6f, 0x77, 0x6e, 0x65, 0x72, 0x12, 0x14, 0x0a, 0x05, 0x70,
	0x72, 0x69, 0x63, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x04, 0x52, 0x05, 0x70, 0x72, 0x69, 0x63,
	0x65, 0x12, 0x16, 0x0a, 0x06, 0x62, 0x75, 0x64, 0x67, 0x65, 0x74, 0x18, 0x04, 0x20, 0x01, 0x28,
	0x04, 0x52, 0x06, 0x62, 0x75, 0x64, 0x67, 0x65, 0x74, 0x22, 0x7a, 0x0a, 0x0c, 0x53, 0x75, 0x69,
	0x4f, 0x62, 0x6a, 0x65, 0x63, 0x74, 0x52, 0x65, 0x66, 0x12, 0x38, 0x0a, 0x09, 0x6f, 0x62, 0x6a,
	0x65, 0x63, 0x74, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1b, 0x2e, 0x73,
	0x75, 0x69, 0x2e, 0x63, 0x68, 0x65, 0x63, 0x6b, 0x70, 0x6f, 0x69, 0x6e, 0x74, 0x2e, 0x76, 0x31,
	0x2e, 0x4f, 0x62, 0x6a, 0x65, 0x63, 0x74, 0x49, 0x44, 0x52, 0x08, 0x6f, 0x62, 0x6a, 0x65, 0x63,
	0x74, 0x49, 0x64, 0x12, 0x18, 0x0a, 0x07, 0x76, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x18, 0x02,
	0x20, 0x01, 0x28, 0x04, 0x52, 0x07, 0x76, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x12, 0x16, 0x0a,
	0x06, 0x64, 0x69, 0x67, 0x65, 0x73, 0x74, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x64,
	0x69, 0x67, 0x65, 0x73, 0x74, 0x22, 0xdc, 0x01, 0x0a, 0x0e, 0x53, 0x75, 0x69, 0x43, 0x68, 0x61,
	0x6e, 0x67, 0x65, 0x45, 0x70, 0x6f, 0x63, 0x68, 0x12, 0x14, 0x0a, 0x05, 0x65, 0x70, 0x6f, 0x63,
	0x68, 0x18, 0x01, 0x20, 0x01, 0x28, 0x04, 0x52, 0x05, 0x65, 0x70, 0x6f, 0x63, 0x68, 0x12, 0x25,
	0x0a, 0x0e, 0x73, 0x74, 0x6f, 0x72, 0x61, 0x67, 0x65, 0x5f, 0x63, 0x68, 0x61, 0x72, 0x67, 0x65,
	0x18, 0x02, 0x20, 0x01, 0x28, 0x04, 0x52, 0x0d, 0x73, 0x74, 0x6f, 0x72, 0x61, 0x67, 0x65, 0x43,
	0x68, 0x61, 0x72, 0x67, 0x65, 0x12, 0x2d, 0x0a, 0x12, 0x63, 0x6f, 0x6d, 0x70, 0x75, 0x74, 0x61,
	0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x63, 0x68, 0x61, 0x72, 0x67, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28,
	0x04, 0x52, 0x11, 0x63, 0x6f, 0x6d, 0x70, 0x75, 0x74, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x43, 0x68,
	0x61, 0x72, 0x67, 0x65, 0x12, 0x25, 0x0a, 0x0e, 0x73, 0x74, 0x6f, 0x72, 0x61, 0x67, 0x65, 0x5f,
	0x72, 0x65, 0x62, 0x61, 0x74, 0x65, 0x18, 0x04, 0x20, 0x01, 0x28, 0x04, 0x52, 0x0d, 0x73, 0x74,
	0x6f, 0x72, 0x61, 0x67, 0x65, 0x52, 0x65, 0x62, 0x61, 0x74, 0x65, 0x12, 0x37, 0x0a, 0x18, 0x65,
	0x70, 0x6f, 0x63, 0x68, 0x5f, 0x73, 0x74, 0x61, 0x72, 0x74, 0x5f, 0x74, 0x69, 0x6d, 0x65, 0x73,
	0x74, 0x61, 0x6d, 0x70, 0x5f, 0x6d, 0x73, 0x18, 0x05, 0x20, 0x01, 0x28, 0x04, 0x52, 0x15, 0x65,
	0x70, 0x6f, 0x63, 0x68, 0x53, 0x74, 0x61, 0x72, 0x74, 0x54, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61,
	0x6d, 0x70, 0x4d, 0x73, 0x22, 0x4e, 0x0a, 0x15, 0x53, 0x75, 0x69, 0x47, 0x65, 0x6e, 0x65, 0x73,
	0x69, 0x73, 0x54, 0x72, 0x61, 0x6e, 0x73, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x35, 0x0a,
	0x07, 0x6f, 0x62, 0x6a, 0x65, 0x63, 0x74, 0x73, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x1b,
	0x2e, 0x73, 0x75, 0x69, 0x2e, 0x63, 0x68, 0x65, 0x63, 0x6b, 0x70, 0x6f, 0x69, 0x6e, 0x74, 0x2e,
	0x76, 0x31, 0x2e, 0x4f, 0x62, 0x6a, 0x65, 0x63, 0x74, 0x49, 0x44, 0x52, 0x07, 0x6f, 0x62, 0x6a,
	0x65, 0x63, 0x74, 0x73, 0x22, 0x33, 0x0a, 0x08, 0x4f, 0x62, 0x6a, 0x65, 0x63, 0x74, 0x49, 0x44,
	0x12, 0x27, 0x0a, 0x0f, 0x61, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x5f, 0x61, 0x64, 0x64, 0x72,
	0x65, 0x73, 0x73, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0e, 0x61, 0x63, 0x63, 0x6f, 0x75,
	0x6e, 0x74, 0x41, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x22, 0x78, 0x0a, 0x1a, 0x53, 0x75, 0x69,
	0x43, 0x6f, 0x6e, 0x73, 0x65, 0x6e, 0x73, 0x75, 0x73, 0x43, 0x6f, 0x6d, 0x6d, 0x69, 0x74, 0x50,
	0x72, 0x6f, 0x6c, 0x6f, 0x67, 0x75, 0x65, 0x12, 0x14, 0x0a, 0x05, 0x65, 0x70, 0x6f, 0x63, 0x68,
	0x18, 0x01, 0x20, 0x01, 0x28, 0x04, 0x52, 0x05, 0x65, 0x70, 0x6f, 0x63, 0x68, 0x12, 0x14, 0x0a,
	0x05, 0x72, 0x6f, 0x75, 0x6e, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x04, 0x52, 0x05, 0x72, 0x6f,
	0x75, 0x6e, 0x64, 0x12, 0x2e, 0x0a, 0x13, 0x63, 0x6f, 0x6d, 0x6d, 0x69, 0x74, 0x5f, 0x74, 0x69,
	0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x5f, 0x6d, 0x73, 0x18, 0x03, 0x20, 0x01, 0x28, 0x04,
	0x52, 0x11, 0x63, 0x6f, 0x6d, 0x6d, 0x69, 0x74, 0x54, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d,
	0x70, 0x4d, 0x73, 0x22, 0x93, 0x01, 0x0a, 0x1f, 0x53, 0x75, 0x69, 0x50, 0x72, 0x6f, 0x67, 0x72,
	0x61, 0x6d, 0x6d, 0x61, 0x62, 0x6c, 0x65, 0x54, 0x72, 0x61, 0x6e, 0x73, 0x61, 0x63, 0x74, 0x69,
	0x6f, 0x6e, 0x42, 0x6c, 0x6f, 0x63, 0x6b, 0x12, 0x35, 0x0a, 0x06, 0x69, 0x6e, 0x70, 0x75, 0x74,
	0x73, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x1d, 0x2e, 0x73, 0x75, 0x69, 0x2e, 0x63, 0x68,
	0x65, 0x63, 0x6b, 0x70, 0x6f, 0x69, 0x6e, 0x74, 0x2e, 0x76, 0x31, 0x2e, 0x53, 0x75, 0x69, 0x43,
	0x61, 0x6c, 0x6c, 0x41, 0x72, 0x67, 0x52, 0x06, 0x69, 0x6e, 0x70, 0x75, 0x74, 0x73, 0x12, 0x39,
	0x0a, 0x08, 0x63, 0x6f, 0x6d, 0x6d, 0x61, 0x6e, 0x64, 0x73, 0x18, 0x02, 0x20, 0x03, 0x28, 0x0b,
	0x32, 0x1d, 0x2e, 0x73, 0x75, 0x69, 0x2e, 0x63, 0x68, 0x65, 0x63, 0x6b, 0x70, 0x6f, 0x69, 0x6e,
	0x74, 0x2e, 0x76, 0x31, 0x2e, 0x53, 0x75, 0x69, 0x43, 0x6f, 0x6d, 0x6d, 0x61, 0x6e, 0x64, 0x52,
	0x08, 0x63, 0x6f, 0x6d, 0x6d, 0x61, 0x6e, 0x64, 0x73, 0x22, 0x8e, 0x01, 0x0a, 0x0a, 0x53, 0x75,
	0x69, 0x43, 0x61, 0x6c, 0x6c, 0x41, 0x72, 0x67, 0x12, 0x39, 0x0a, 0x06, 0x6f, 0x62, 0x6a, 0x65,
	0x63, 0x74, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1f, 0x2e, 0x73, 0x75, 0x69, 0x2e, 0x63,
	0x68, 0x65, 0x63, 0x6b, 0x70, 0x6f, 0x69, 0x6e, 0x74, 0x2e, 0x76, 0x31, 0x2e, 0x53, 0x75, 0x69,
	0x4f, 0x62, 0x6a, 0x65, 0x63, 0x74, 0x41, 0x72, 0x67, 0x48, 0x00, 0x52, 0x06, 0x6f, 0x62, 0x6a,
	0x65, 0x63, 0x74, 0x12, 0x35, 0x0a, 0x04, 0x70, 0x75, 0x72, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x1f, 0x2e, 0x73, 0x75, 0x69, 0x2e, 0x63, 0x68, 0x65, 0x63, 0x6b, 0x70, 0x6f, 0x69,
	0x6e, 0x74, 0x2e, 0x76, 0x31, 0x2e, 0x53, 0x75, 0x69, 0x50, 0x75, 0x72, 0x65, 0x56, 0x61, 0x6c,
	0x75, 0x65, 0x48, 0x00, 0x52, 0x04, 0x70, 0x75, 0x72, 0x65, 0x42, 0x0e, 0x0a, 0x0c, 0x73, 0x75,
	0x69, 0x5f, 0x63, 0x61, 0x6c, 0x6c, 0x5f, 0x61, 0x72, 0x67, 0x22, 0xbe, 0x01, 0x0a, 0x0c, 0x53,
	0x75, 0x69, 0x4f, 0x62, 0x6a, 0x65, 0x63, 0x74, 0x41, 0x72, 0x67, 0x12, 0x54, 0x0a, 0x13, 0x69,
	0x6d, 0x6d, 0x5f, 0x6f, 0x72, 0x5f, 0x6f, 0x77, 0x6e, 0x65, 0x64, 0x5f, 0x6f, 0x62, 0x6a, 0x65,
	0x63, 0x74, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x23, 0x2e, 0x73, 0x75, 0x69, 0x2e, 0x63,
	0x68, 0x65, 0x63, 0x6b, 0x70, 0x6f, 0x69, 0x6e, 0x74, 0x2e, 0x76, 0x31, 0x2e, 0x49, 0x6d, 0x6d,
	0x4f, 0x72, 0x4f, 0x77, 0x6e, 0x65, 0x64, 0x4f, 0x62, 0x6a, 0x65, 0x63, 0x74, 0x48, 0x00, 0x52,
	0x10, 0x69, 0x6d, 0x6d, 0x4f, 0x72, 0x4f, 0x77, 0x6e, 0x65, 0x64, 0x4f, 0x62, 0x6a, 0x65, 0x63,
	0x74, 0x12, 0x46, 0x0a, 0x0d, 0x73, 0x68, 0x61, 0x72, 0x65, 0x64, 0x5f, 0x6f, 0x62, 0x6a, 0x65,
	0x63, 0x74, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1f, 0x2e, 0x73, 0x75, 0x69, 0x2e, 0x63,
	0x68, 0x65, 0x63, 0x6b, 0x70, 0x6f, 0x69, 0x6e, 0x74, 0x2e, 0x76, 0x31, 0x2e, 0x53, 0x68, 0x61,
	0x72, 0x65, 0x64, 0x4f, 0x62, 0x6a, 0x65, 0x63, 0x74, 0x48, 0x00, 0x52, 0x0c, 0x73, 0x68, 0x61,
	0x72, 0x65, 0x64, 0x4f, 0x62, 0x6a, 0x65, 0x63, 0x74, 0x42, 0x10, 0x0a, 0x0e, 0x73, 0x75, 0x69,
	0x5f, 0x6f, 0x62, 0x6a, 0x65, 0x63, 0x74, 0x5f, 0x61, 0x72, 0x67, 0x22, 0x7e, 0x0a, 0x10, 0x49,
	0x6d, 0x6d, 0x4f, 0x72, 0x4f, 0x77, 0x6e, 0x65, 0x64, 0x4f, 0x62, 0x6a, 0x65, 0x63, 0x74, 0x12,
	0x38, 0x0a, 0x09, 0x6f, 0x62, 0x6a, 0x65, 0x63, 0x74, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x1b, 0x2e, 0x73, 0x75, 0x69, 0x2e, 0x63, 0x68, 0x65, 0x63, 0x6b, 0x70, 0x6f,
	0x69, 0x6e, 0x74, 0x2e, 0x76, 0x31, 0x2e, 0x4f, 0x62, 0x6a, 0x65, 0x63, 0x74, 0x49, 0x44, 0x52,
	0x08, 0x6f, 0x62, 0x6a, 0x65, 0x63, 0x74, 0x49, 0x64, 0x12, 0x18, 0x0a, 0x07, 0x76, 0x65, 0x72,
	0x73, 0x69, 0x6f, 0x6e, 0x18, 0x02, 0x20, 0x01, 0x28, 0x04, 0x52, 0x07, 0x76, 0x65, 0x72, 0x73,
	0x69, 0x6f, 0x6e, 0x12, 0x16, 0x0a, 0x06, 0x64, 0x69, 0x67, 0x65, 0x73, 0x74, 0x18, 0x03, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x06, 0x64, 0x69, 0x67, 0x65, 0x73, 0x74, 0x22, 0x98, 0x01, 0x0a, 0x0c,
	0x53, 0x68, 0x61, 0x72, 0x65, 0x64, 0x4f, 0x62, 0x6a, 0x65, 0x63, 0x74, 0x12, 0x38, 0x0a, 0x09,
	0x6f, 0x62, 0x6a, 0x65, 0x63, 0x74, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x1b, 0x2e, 0x73, 0x75, 0x69, 0x2e, 0x63, 0x68, 0x65, 0x63, 0x6b, 0x70, 0x6f, 0x69, 0x6e, 0x74,
	0x2e, 0x76, 0x31, 0x2e, 0x4f, 0x62, 0x6a, 0x65, 0x63, 0x74, 0x49, 0x44, 0x52, 0x08, 0x6f, 0x62,
	0x6a, 0x65, 0x63, 0x74, 0x49, 0x64, 0x12, 0x34, 0x0a, 0x16, 0x69, 0x6e, 0x69, 0x74, 0x69, 0x61,
	0x6c, 0x5f, 0x73, 0x68, 0x61, 0x72, 0x65, 0x64, 0x5f, 0x76, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e,
	0x18, 0x02, 0x20, 0x01, 0x28, 0x04, 0x52, 0x14, 0x69, 0x6e, 0x69, 0x74, 0x69, 0x61, 0x6c, 0x53,
	0x68, 0x61, 0x72, 0x65, 0x64, 0x56, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x12, 0x18, 0x0a, 0x07,
	0x6d, 0x75, 0x74, 0x61, 0x62, 0x6c, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x08, 0x52, 0x07, 0x6d,
	0x75, 0x74, 0x61, 0x62, 0x6c, 0x65, 0x22, 0x94, 0x01, 0x0a, 0x0c, 0x53, 0x75, 0x69, 0x50, 0x75,
	0x72, 0x65, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x12, 0x3e, 0x0a, 0x0a, 0x76, 0x61, 0x6c, 0x75, 0x65,
	0x5f, 0x74, 0x79, 0x70, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x73, 0x75,
	0x69, 0x2e, 0x63, 0x68, 0x65, 0x63, 0x6b, 0x70, 0x6f, 0x69, 0x6e, 0x74, 0x2e, 0x76, 0x31, 0x2e,
	0x54, 0x79, 0x70, 0x65, 0x54, 0x61, 0x67, 0x48, 0x00, 0x52, 0x09, 0x76, 0x61, 0x6c, 0x75, 0x65,
	0x54, 0x79, 0x70, 0x65, 0x88, 0x01, 0x01, 0x12, 0x35, 0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65,
	0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1f, 0x2e, 0x73, 0x75, 0x69, 0x2e, 0x63, 0x68, 0x65,
	0x63, 0x6b, 0x70, 0x6f, 0x69, 0x6e, 0x74, 0x2e, 0x76, 0x31, 0x2e, 0x53, 0x75, 0x69, 0x4a, 0x73,
	0x6f, 0x6e, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x52, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x42, 0x0d,
	0x0a, 0x0b, 0x5f, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x22, 0xa1, 0x04,
	0x0a, 0x07, 0x54, 0x79, 0x70, 0x65, 0x54, 0x61, 0x67, 0x12, 0x2c, 0x0a, 0x04, 0x62, 0x6f, 0x6f,
	0x6c, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x16, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65,
	0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x45, 0x6d, 0x70, 0x74, 0x79, 0x48,
	0x00, 0x52, 0x04, 0x62, 0x6f, 0x6f, 0x6c, 0x12, 0x28, 0x0a, 0x02, 0x75, 0x38, 0x18, 0x02, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x16, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f,
	0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x45, 0x6d, 0x70, 0x74, 0x79, 0x48, 0x00, 0x52, 0x02, 0x75,
	0x38, 0x12, 0x2a, 0x0a, 0x03, 0x75, 0x36, 0x34, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x16,
	0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66,
	0x2e, 0x45, 0x6d, 0x70, 0x74, 0x79, 0x48, 0x00, 0x52, 0x03, 0x75, 0x36, 0x34, 0x12, 0x2c, 0x0a,
	0x04, 0x75, 0x31, 0x32, 0x38, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x16, 0x2e, 0x67, 0x6f,
	0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x45, 0x6d,
	0x70, 0x74, 0x79, 0x48, 0x00, 0x52, 0x04, 0x75, 0x31, 0x32, 0x38, 0x12, 0x32, 0x0a, 0x07, 0x61,
	0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x18, 0x05, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x16, 0x2e, 0x67,
	0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x45,
	0x6d, 0x70, 0x74, 0x79, 0x48, 0x00, 0x52, 0x07, 0x61, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x12,
	0x30, 0x0a, 0x06, 0x73, 0x69, 0x67, 0x6e, 0x65, 0x72, 0x18, 0x06, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x16, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75,
	0x66, 0x2e, 0x45, 0x6d, 0x70, 0x74, 0x79, 0x48, 0x00, 0x52, 0x06, 0x73, 0x69, 0x67, 0x6e, 0x65,
	0x72, 0x12, 0x34, 0x0a, 0x06, 0x76, 0x65, 0x63, 0x74, 0x6f, 0x72, 0x18, 0x07, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x1a, 0x2e, 0x73, 0x75, 0x69, 0x2e, 0x63, 0x68, 0x65, 0x63, 0x6b, 0x70, 0x6f, 0x69,
	0x6e, 0x74, 0x2e, 0x76, 0x31, 0x2e, 0x54, 0x79, 0x70, 0x65, 0x54, 0x61, 0x67, 0x48, 0x00, 0x52,
	0x06, 0x76, 0x65, 0x63, 0x74, 0x6f, 0x72, 0x12, 0x36, 0x0a, 0x06, 0x73, 0x74, 0x72, 0x75, 0x63,
	0x74, 0x18, 0x08, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1c, 0x2e, 0x73, 0x75, 0x69, 0x2e, 0x63, 0x68,
	0x65, 0x63, 0x6b, 0x70, 0x6f, 0x69, 0x6e, 0x74, 0x2e, 0x76, 0x31, 0x2e, 0x53, 0x74, 0x72, 0x75,
	0x63, 0x74, 0x54, 0x61, 0x67, 0x48, 0x00, 0x52, 0x06, 0x73, 0x74, 0x72, 0x75, 0x63, 0x74, 0x12,
	0x2a, 0x0a, 0x03, 0x75, 0x31, 0x36, 0x18, 0x09, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x16, 0x2e, 0x67,
	0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x45,
	0x6d, 0x70, 0x74, 0x79, 0x48, 0x00, 0x52, 0x03, 0x75, 0x31, 0x36, 0x12, 0x2a, 0x0a, 0x03, 0x75,
	0x33, 0x32, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x16, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c,
	0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x45, 0x6d, 0x70, 0x74, 0x79,
	0x48, 0x00, 0x52, 0x03, 0x75, 0x33, 0x32, 0x12, 0x2c, 0x0a, 0x04, 0x75, 0x32, 0x35, 0x36, 0x18,
	0x0b, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x16, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70,
	0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x45, 0x6d, 0x70, 0x74, 0x79, 0x48, 0x00, 0x52,
	0x04, 0x75, 0x32, 0x35, 0x36, 0x42, 0x0a, 0x0a, 0x08, 0x74, 0x79, 0x70, 0x65, 0x5f, 0x74, 0x61,
	0x67, 0x22, 0x40, 0x0a, 0x0e, 0x4c, 0x69, 0x73, 0x74, 0x4f, 0x66, 0x54, 0x79, 0x70, 0x65, 0x54,
	0x61, 0x67, 0x73, 0x12, 0x2e, 0x0a, 0x04, 0x6c, 0x69, 0x73, 0x74, 0x18, 0x01, 0x20, 0x03, 0x28,
	0x0b, 0x32, 0x1a, 0x2e, 0x73, 0x75, 0x69, 0x2e, 0x63, 0x68, 0x65, 0x63, 0x6b, 0x70, 0x6f, 0x69,
	0x6e, 0x74, 0x2e, 0x76, 0x31, 0x2e, 0x54, 0x79, 0x70, 0x65, 0x54, 0x61, 0x67, 0x52, 0x04, 0x6c,
	0x69, 0x73, 0x74, 0x22, 0x95, 0x01, 0x0a, 0x09, 0x53, 0x74, 0x72, 0x75, 0x63, 0x74, 0x54, 0x61,
	0x67, 0x12, 0x18, 0x0a, 0x07, 0x61, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x18, 0x01, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x07, 0x61, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x12, 0x16, 0x0a, 0x06, 0x6d,
	0x6f, 0x64, 0x75, 0x6c, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x6d, 0x6f, 0x64,
	0x75, 0x6c, 0x65, 0x12, 0x12, 0x0a, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x12, 0x42, 0x0a, 0x0b, 0x74, 0x79, 0x70, 0x65, 0x5f,
	0x70, 0x61, 0x72, 0x61, 0x6d, 0x73, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x21, 0x2e, 0x73,
	0x75, 0x69, 0x2e, 0x63, 0x68, 0x65, 0x63, 0x6b, 0x70, 0x6f, 0x69, 0x6e, 0x74, 0x2e, 0x76, 0x31,
	0x2e, 0x4c, 0x69, 0x73, 0x74, 0x4f, 0x66, 0x54, 0x79, 0x70, 0x65, 0x54, 0x61, 0x67, 0x73, 0x52,
	0x0a, 0x74, 0x79, 0x70, 0x65, 0x50, 0x61, 0x72, 0x61, 0x6d, 0x73, 0x22, 0x8a, 0x02, 0x0a, 0x0c,
	0x53, 0x75, 0x69, 0x4a, 0x73, 0x6f, 0x6e, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x12, 0x2c, 0x0a, 0x04,
	0x6e, 0x75, 0x6c, 0x6c, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x16, 0x2e, 0x67, 0x6f, 0x6f,
	0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x45, 0x6d, 0x70,
	0x74, 0x79, 0x48, 0x00, 0x52, 0x04, 0x6e, 0x75, 0x6c, 0x6c, 0x12, 0x14, 0x0a, 0x04, 0x62, 0x6f,
	0x6f, 0x6c, 0x18, 0x02, 0x20, 0x01, 0x28, 0x08, 0x48, 0x00, 0x52, 0x04, 0x62, 0x6f, 0x6f, 0x6c,
	0x12, 0x18, 0x0a, 0x06, 0x6e, 0x75, 0x6d, 0x62, 0x65, 0x72, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09,
	0x48, 0x00, 0x52, 0x06, 0x6e, 0x75, 0x6d, 0x62, 0x65, 0x72, 0x12, 0x18, 0x0a, 0x06, 0x73, 0x74,
	0x72, 0x69, 0x6e, 0x67, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x48, 0x00, 0x52, 0x06, 0x73, 0x74,
	0x72, 0x69, 0x6e, 0x67, 0x12, 0x3b, 0x0a, 0x05, 0x61, 0x72, 0x72, 0x61, 0x79, 0x18, 0x05, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x23, 0x2e, 0x73, 0x75, 0x69, 0x2e, 0x63, 0x68, 0x65, 0x63, 0x6b, 0x70,
	0x6f, 0x69, 0x6e, 0x74, 0x2e, 0x76, 0x31, 0x2e, 0x4c, 0x69, 0x73, 0x74, 0x4f, 0x66, 0x4a, 0x73,
	0x6f, 0x6e, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x73, 0x48, 0x00, 0x52, 0x05, 0x61, 0x72, 0x72, 0x61,
	0x79, 0x12, 0x3c, 0x0a, 0x06, 0x6f, 0x62, 0x6a, 0x65, 0x63, 0x74, 0x18, 0x06, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x22, 0x2e, 0x73, 0x75, 0x69, 0x2e, 0x63, 0x68, 0x65, 0x63, 0x6b, 0x70, 0x6f, 0x69,
	0x6e, 0x74, 0x2e, 0x76, 0x31, 0x2e, 0x53, 0x75, 0x69, 0x4a, 0x73, 0x6f, 0x6e, 0x56, 0x61, 0x6c,
	0x75, 0x65, 0x4d, 0x61, 0x70, 0x48, 0x00, 0x52, 0x06, 0x6f, 0x62, 0x6a, 0x65, 0x63, 0x74, 0x42,
	0x07, 0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x22, 0xa9, 0x01, 0x0a, 0x0f, 0x53, 0x75, 0x69,
	0x4a, 0x73, 0x6f, 0x6e, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x4d, 0x61, 0x70, 0x12, 0x3d, 0x0a, 0x03,
	0x6d, 0x61, 0x70, 0x18, 0x06, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x2b, 0x2e, 0x73, 0x75, 0x69, 0x2e,
	0x63, 0x68, 0x65, 0x63, 0x6b, 0x70, 0x6f, 0x69, 0x6e, 0x74, 0x2e, 0x76, 0x31, 0x2e, 0x53, 0x75,
	0x69, 0x4a, 0x73, 0x6f, 0x6e, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x4d, 0x61, 0x70, 0x2e, 0x4d, 0x61,
	0x70, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x52, 0x03, 0x6d, 0x61, 0x70, 0x1a, 0x57, 0x0a, 0x08, 0x4d,
	0x61, 0x70, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x12, 0x10, 0x0a, 0x03, 0x6b, 0x65, 0x79, 0x18, 0x01,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x03, 0x6b, 0x65, 0x79, 0x12, 0x35, 0x0a, 0x05, 0x76, 0x61, 0x6c,
	0x75, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1f, 0x2e, 0x73, 0x75, 0x69, 0x2e, 0x63,
	0x68, 0x65, 0x63, 0x6b, 0x70, 0x6f, 0x69, 0x6e, 0x74, 0x2e, 0x76, 0x31, 0x2e, 0x53, 0x75, 0x69,
	0x4a, 0x73, 0x6f, 0x6e, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x52, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65,
	0x3a, 0x02, 0x38, 0x01, 0x22, 0x47, 0x0a, 0x10, 0x4c, 0x69, 0x73, 0x74, 0x4f, 0x66, 0x4a, 0x73,
	0x6f, 0x6e, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x73, 0x12, 0x33, 0x0a, 0x04, 0x6c, 0x69, 0x73, 0x74,
	0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x1f, 0x2e, 0x73, 0x75, 0x69, 0x2e, 0x63, 0x68, 0x65,
	0x63, 0x6b, 0x70, 0x6f, 0x69, 0x6e, 0x74, 0x2e, 0x76, 0x31, 0x2e, 0x53, 0x75, 0x69, 0x4a, 0x73,
	0x6f, 0x6e, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x52, 0x04, 0x6c, 0x69, 0x73, 0x74, 0x22, 0x91, 0x04,
	0x0a, 0x0a, 0x53, 0x75, 0x69, 0x43, 0x6f, 0x6d, 0x6d, 0x61, 0x6e, 0x64, 0x12, 0x49, 0x0a, 0x09,
	0x6d, 0x6f, 0x76, 0x65, 0x5f, 0x63, 0x61, 0x6c, 0x6c, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x2a, 0x2e, 0x73, 0x75, 0x69, 0x2e, 0x63, 0x68, 0x65, 0x63, 0x6b, 0x70, 0x6f, 0x69, 0x6e, 0x74,
	0x2e, 0x76, 0x31, 0x2e, 0x53, 0x75, 0x69, 0x50, 0x72, 0x6f, 0x67, 0x72, 0x61, 0x6d, 0x6d, 0x61,
	0x62, 0x6c, 0x65, 0x4d, 0x6f, 0x76, 0x65, 0x43, 0x61, 0x6c, 0x6c, 0x48, 0x00, 0x52, 0x08, 0x6d,
	0x6f, 0x76, 0x65, 0x43, 0x61, 0x6c, 0x6c, 0x12, 0x53, 0x0a, 0x10, 0x74, 0x72, 0x61, 0x6e, 0x73,
	0x66, 0x65, 0x72, 0x5f, 0x6f, 0x62, 0x6a, 0x65, 0x63, 0x74, 0x73, 0x18, 0x02, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x26, 0x2e, 0x73, 0x75, 0x69, 0x2e, 0x63, 0x68, 0x65, 0x63, 0x6b, 0x70, 0x6f, 0x69,
	0x6e, 0x74, 0x2e, 0x76, 0x31, 0x2e, 0x54, 0x72, 0x61, 0x6e, 0x73, 0x66, 0x65, 0x72, 0x4f, 0x62,
	0x6a, 0x65, 0x63, 0x74, 0x73, 0x50, 0x61, 0x69, 0x72, 0x48, 0x00, 0x52, 0x0f, 0x74, 0x72, 0x61,
	0x6e, 0x73, 0x66, 0x65, 0x72, 0x4f, 0x62, 0x6a, 0x65, 0x63, 0x74, 0x73, 0x12, 0x44, 0x0a, 0x0b,
	0x73, 0x70, 0x6c, 0x69, 0x74, 0x5f, 0x63, 0x6f, 0x69, 0x6e, 0x73, 0x18, 0x03, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x21, 0x2e, 0x73, 0x75, 0x69, 0x2e, 0x63, 0x68, 0x65, 0x63, 0x6b, 0x70, 0x6f, 0x69,
	0x6e, 0x74, 0x2e, 0x76, 0x31, 0x2e, 0x53, 0x70, 0x6c, 0x69, 0x74, 0x43, 0x6f, 0x69, 0x6e, 0x73,
	0x50, 0x61, 0x69, 0x72, 0x48, 0x00, 0x52, 0x0a, 0x73, 0x70, 0x6c, 0x69, 0x74, 0x43, 0x6f, 0x69,
	0x6e, 0x73, 0x12, 0x44, 0x0a, 0x0b, 0x6d, 0x65, 0x72, 0x67, 0x65, 0x5f, 0x63, 0x6f, 0x69, 0x6e,
	0x73, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x21, 0x2e, 0x73, 0x75, 0x69, 0x2e, 0x63, 0x68,
	0x65, 0x63, 0x6b, 0x70, 0x6f, 0x69, 0x6e, 0x74, 0x2e, 0x76, 0x31, 0x2e, 0x4d, 0x65, 0x72, 0x67,
	0x65, 0x43, 0x6f, 0x69, 0x6e, 0x73, 0x50, 0x61, 0x69, 0x72, 0x48, 0x00, 0x52, 0x0a, 0x6d, 0x65,
	0x72, 0x67, 0x65, 0x43, 0x6f, 0x69, 0x6e, 0x73, 0x12, 0x3c, 0x0a, 0x07, 0x70, 0x75, 0x62, 0x6c,
	0x69, 0x73, 0x68, 0x18, 0x05, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x20, 0x2e, 0x73, 0x75, 0x69, 0x2e,
	0x63, 0x68, 0x65, 0x63, 0x6b, 0x70, 0x6f, 0x69, 0x6e, 0x74, 0x2e, 0x76, 0x31, 0x2e, 0x4c, 0x69,
	0x73, 0x74, 0x4f, 0x66, 0x4f, 0x62, 0x6a, 0x65, 0x63, 0x74, 0x73, 0x48, 0x00, 0x52, 0x07, 0x70,
	0x75, 0x62, 0x6c, 0x69, 0x73, 0x68, 0x12, 0x40, 0x0a, 0x07, 0x75, 0x70, 0x67, 0x72, 0x61, 0x64,
	0x65, 0x18, 0x06, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x24, 0x2e, 0x73, 0x75, 0x69, 0x2e, 0x63, 0x68,
	0x65, 0x63, 0x6b, 0x70, 0x6f, 0x69, 0x6e, 0x74, 0x2e, 0x76, 0x31, 0x2e, 0x53, 0x75, 0x69, 0x43,
	0x6f, 0x6d, 0x6d, 0x61, 0x6e, 0x64, 0x55, 0x70, 0x67, 0x72, 0x61, 0x64, 0x65, 0x48, 0x00, 0x52,
	0x07, 0x75, 0x70, 0x67, 0x72, 0x61, 0x64, 0x65, 0x12, 0x48, 0x0a, 0x0d, 0x6d, 0x61, 0x6b, 0x65,
	0x5f, 0x6d, 0x6f, 0x76, 0x65, 0x5f, 0x76, 0x65, 0x63, 0x18, 0x07, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x22, 0x2e, 0x73, 0x75, 0x69, 0x2e, 0x63, 0x68, 0x65, 0x63, 0x6b, 0x70, 0x6f, 0x69, 0x6e, 0x74,
	0x2e, 0x76, 0x31, 0x2e, 0x4d, 0x61, 0x6b, 0x65, 0x4d, 0x6f, 0x76, 0x65, 0x56, 0x65, 0x63, 0x50,
	0x61, 0x69, 0x72, 0x48, 0x00, 0x52, 0x0b, 0x6d, 0x61, 0x6b, 0x65, 0x4d, 0x6f, 0x76, 0x65, 0x56,
	0x65, 0x63, 0x42, 0x0d, 0x0a, 0x0b, 0x73, 0x75, 0x69, 0x5f, 0x63, 0x6f, 0x6d, 0x6d, 0x61, 0x6e,
	0x64, 0x22, 0x79, 0x0a, 0x13, 0x54, 0x72, 0x61, 0x6e, 0x73, 0x66, 0x65, 0x72, 0x4f, 0x62, 0x6a,
	0x65, 0x63, 0x74, 0x73, 0x50, 0x61, 0x69, 0x72, 0x12, 0x30, 0x0a, 0x03, 0x6f, 0x6e, 0x65, 0x18,
	0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x1e, 0x2e, 0x73, 0x75, 0x69, 0x2e, 0x63, 0x68, 0x65, 0x63,
	0x6b, 0x70, 0x6f, 0x69, 0x6e, 0x74, 0x2e, 0x76, 0x31, 0x2e, 0x53, 0x75, 0x69, 0x41, 0x72, 0x67,
	0x75, 0x6d, 0x65, 0x6e, 0x74, 0x52, 0x03, 0x6f, 0x6e, 0x65, 0x12, 0x30, 0x0a, 0x03, 0x74, 0x77,
	0x6f, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1e, 0x2e, 0x73, 0x75, 0x69, 0x2e, 0x63, 0x68,
	0x65, 0x63, 0x6b, 0x70, 0x6f, 0x69, 0x6e, 0x74, 0x2e, 0x76, 0x31, 0x2e, 0x53, 0x75, 0x69, 0x41,
	0x72, 0x67, 0x75, 0x6d, 0x65, 0x6e, 0x74, 0x52, 0x03, 0x74, 0x77, 0x6f, 0x22, 0x74, 0x0a, 0x0e,
	0x53, 0x70, 0x6c, 0x69, 0x74, 0x43, 0x6f, 0x69, 0x6e, 0x73, 0x50, 0x61, 0x69, 0x72, 0x12, 0x30,
	0x0a, 0x03, 0x6f, 0x6e, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1e, 0x2e, 0x73, 0x75,
	0x69, 0x2e, 0x63, 0x68, 0x65, 0x63, 0x6b, 0x70, 0x6f, 0x69, 0x6e, 0x74, 0x2e, 0x76, 0x31, 0x2e,
	0x53, 0x75, 0x69, 0x41, 0x72, 0x67, 0x75, 0x6d, 0x65, 0x6e, 0x74, 0x52, 0x03, 0x6f, 0x6e, 0x65,
	0x12, 0x30, 0x0a, 0x03, 0x74, 0x77, 0x6f, 0x18, 0x02, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x1e, 0x2e,
	0x73, 0x75, 0x69, 0x2e, 0x63, 0x68, 0x65, 0x63, 0x6b, 0x70, 0x6f, 0x69, 0x6e, 0x74, 0x2e, 0x76,
	0x31, 0x2e, 0x53, 0x75, 0x69, 0x41, 0x72, 0x67, 0x75, 0x6d, 0x65, 0x6e, 0x74, 0x52, 0x03, 0x74,
	0x77, 0x6f, 0x22, 0x74, 0x0a, 0x0e, 0x4d, 0x65, 0x72, 0x67, 0x65, 0x43, 0x6f, 0x69, 0x6e, 0x73,
	0x50, 0x61, 0x69, 0x72, 0x12, 0x30, 0x0a, 0x03, 0x6f, 0x6e, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x1e, 0x2e, 0x73, 0x75, 0x69, 0x2e, 0x63, 0x68, 0x65, 0x63, 0x6b, 0x70, 0x6f, 0x69,
	0x6e, 0x74, 0x2e, 0x76, 0x31, 0x2e, 0x53, 0x75, 0x69, 0x41, 0x72, 0x67, 0x75, 0x6d, 0x65, 0x6e,
	0x74, 0x52, 0x03, 0x6f, 0x6e, 0x65, 0x12, 0x30, 0x0a, 0x03, 0x74, 0x77, 0x6f, 0x18, 0x02, 0x20,
	0x03, 0x28, 0x0b, 0x32, 0x1e, 0x2e, 0x73, 0x75, 0x69, 0x2e, 0x63, 0x68, 0x65, 0x63, 0x6b, 0x70,
	0x6f, 0x69, 0x6e, 0x74, 0x2e, 0x76, 0x31, 0x2e, 0x53, 0x75, 0x69, 0x41, 0x72, 0x67, 0x75, 0x6d,
	0x65, 0x6e, 0x74, 0x52, 0x03, 0x74, 0x77, 0x6f, 0x22, 0x40, 0x0a, 0x0d, 0x4c, 0x69, 0x73, 0x74,
	0x4f, 0x66, 0x4f, 0x62, 0x6a, 0x65, 0x63, 0x74, 0x73, 0x12, 0x2f, 0x0a, 0x04, 0x6c, 0x69, 0x73,
	0x74, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x1b, 0x2e, 0x73, 0x75, 0x69, 0x2e, 0x63, 0x68,
	0x65, 0x63, 0x6b, 0x70, 0x6f, 0x69, 0x6e, 0x74, 0x2e, 0x76, 0x31, 0x2e, 0x4f, 0x62, 0x6a, 0x65,
	0x63, 0x74, 0x49, 0x44, 0x52, 0x04, 0x6c, 0x69, 0x73, 0x74, 0x22, 0x62, 0x0a, 0x0f, 0x4d, 0x61,
	0x6b, 0x65, 0x4d, 0x6f, 0x76, 0x65, 0x56, 0x65, 0x63, 0x50, 0x61, 0x69, 0x72, 0x12, 0x15, 0x0a,
	0x03, 0x6f, 0x6e, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x48, 0x00, 0x52, 0x03, 0x6f, 0x6e,
	0x65, 0x88, 0x01, 0x01, 0x12, 0x30, 0x0a, 0x03, 0x74, 0x77, 0x6f, 0x18, 0x02, 0x20, 0x03, 0x28,
	0x0b, 0x32, 0x1e, 0x2e, 0x73, 0x75, 0x69, 0x2e, 0x63, 0x68, 0x65, 0x63, 0x6b, 0x70, 0x6f, 0x69,
	0x6e, 0x74, 0x2e, 0x76, 0x31, 0x2e, 0x53, 0x75, 0x69, 0x41, 0x72, 0x67, 0x75, 0x6d, 0x65, 0x6e,
	0x74, 0x52, 0x03, 0x74, 0x77, 0x6f, 0x42, 0x06, 0x0a, 0x04, 0x5f, 0x6f, 0x6e, 0x65, 0x22, 0xac,
	0x01, 0x0a, 0x11, 0x53, 0x75, 0x69, 0x43, 0x6f, 0x6d, 0x6d, 0x61, 0x6e, 0x64, 0x55, 0x70, 0x67,
	0x72, 0x61, 0x64, 0x65, 0x12, 0x32, 0x0a, 0x03, 0x6f, 0x6e, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x20, 0x2e, 0x73, 0x75, 0x69, 0x2e, 0x63, 0x68, 0x65, 0x63, 0x6b, 0x70, 0x6f, 0x69,
	0x6e, 0x74, 0x2e, 0x76, 0x31, 0x2e, 0x4c, 0x69, 0x73, 0x74, 0x4f, 0x66, 0x4f, 0x62, 0x6a, 0x65,
	0x63, 0x74, 0x73, 0x52, 0x03, 0x6f, 0x6e, 0x65, 0x12, 0x2d, 0x0a, 0x03, 0x74, 0x77, 0x6f, 0x18,
	0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1b, 0x2e, 0x73, 0x75, 0x69, 0x2e, 0x63, 0x68, 0x65, 0x63,
	0x6b, 0x70, 0x6f, 0x69, 0x6e, 0x74, 0x2e, 0x76, 0x31, 0x2e, 0x4f, 0x62, 0x6a, 0x65, 0x63, 0x74,
	0x49, 0x44, 0x52, 0x03, 0x74, 0x77, 0x6f, 0x12, 0x34, 0x0a, 0x05, 0x74, 0x68, 0x72, 0x65, 0x65,
	0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1e, 0x2e, 0x73, 0x75, 0x69, 0x2e, 0x63, 0x68, 0x65,
	0x63, 0x6b, 0x70, 0x6f, 0x69, 0x6e, 0x74, 0x2e, 0x76, 0x31, 0x2e, 0x53, 0x75, 0x69, 0x41, 0x72,
	0x67, 0x75, 0x6d, 0x65, 0x6e, 0x74, 0x52, 0x05, 0x74, 0x68, 0x72, 0x65, 0x65, 0x22, 0xe9, 0x01,
	0x0a, 0x17, 0x53, 0x75, 0x69, 0x50, 0x72, 0x6f, 0x67, 0x72, 0x61, 0x6d, 0x6d, 0x61, 0x62, 0x6c,
	0x65, 0x4d, 0x6f, 0x76, 0x65, 0x43, 0x61, 0x6c, 0x6c, 0x12, 0x35, 0x0a, 0x07, 0x70, 0x61, 0x63,
	0x6b, 0x61, 0x67, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1b, 0x2e, 0x73, 0x75, 0x69,
	0x2e, 0x63, 0x68, 0x65, 0x63, 0x6b, 0x70, 0x6f, 0x69, 0x6e, 0x74, 0x2e, 0x76, 0x31, 0x2e, 0x4f,
	0x62, 0x6a, 0x65, 0x63, 0x74, 0x49, 0x44, 0x52, 0x07, 0x70, 0x61, 0x63, 0x6b, 0x61, 0x67, 0x65,
	0x12, 0x16, 0x0a, 0x06, 0x6d, 0x6f, 0x64, 0x75, 0x6c, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x06, 0x6d, 0x6f, 0x64, 0x75, 0x6c, 0x65, 0x12, 0x1a, 0x0a, 0x08, 0x66, 0x75, 0x6e, 0x63,
	0x74, 0x69, 0x6f, 0x6e, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x66, 0x75, 0x6e, 0x63,
	0x74, 0x69, 0x6f, 0x6e, 0x12, 0x25, 0x0a, 0x0e, 0x74, 0x79, 0x70, 0x65, 0x5f, 0x61, 0x72, 0x67,
	0x75, 0x6d, 0x65, 0x6e, 0x74, 0x73, 0x18, 0x04, 0x20, 0x03, 0x28, 0x09, 0x52, 0x0d, 0x74, 0x79,
	0x70, 0x65, 0x41, 0x72, 0x67, 0x75, 0x6d, 0x65, 0x6e, 0x74, 0x73, 0x12, 0x3c, 0x0a, 0x09, 0x61,
	0x72, 0x67, 0x75, 0x6d, 0x65, 0x6e, 0x74, 0x73, 0x18, 0x05, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x1e,
	0x2e, 0x73, 0x75, 0x69, 0x2e, 0x63, 0x68, 0x65, 0x63, 0x6b, 0x70, 0x6f, 0x69, 0x6e, 0x74, 0x2e,
	0x76, 0x31, 0x2e, 0x53, 0x75, 0x69, 0x41, 0x72, 0x67, 0x75, 0x6d, 0x65, 0x6e, 0x74, 0x52, 0x09,
	0x61, 0x72, 0x67, 0x75, 0x6d, 0x65, 0x6e, 0x74, 0x73, 0x22, 0xca, 0x01, 0x0a, 0x0b, 0x53, 0x75,
	0x69, 0x41, 0x72, 0x67, 0x75, 0x6d, 0x65, 0x6e, 0x74, 0x12, 0x33, 0x0a, 0x08, 0x67, 0x61, 0x73,
	0x5f, 0x63, 0x6f, 0x69, 0x6e, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x16, 0x2e, 0x67, 0x6f,
	0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x45, 0x6d,
	0x70, 0x74, 0x79, 0x48, 0x00, 0x52, 0x07, 0x67, 0x61, 0x73, 0x43, 0x6f, 0x69, 0x6e, 0x12, 0x16,
	0x0a, 0x05, 0x69, 0x6e, 0x70, 0x75, 0x74, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0d, 0x48, 0x00, 0x52,
	0x05, 0x69, 0x6e, 0x70, 0x75, 0x74, 0x12, 0x18, 0x0a, 0x06, 0x72, 0x65, 0x73, 0x75, 0x6c, 0x74,
	0x18, 0x03, 0x20, 0x01, 0x28, 0x0d, 0x48, 0x00, 0x52, 0x06, 0x72, 0x65, 0x73, 0x75, 0x6c, 0x74,
	0x12, 0x43, 0x0a, 0x0d, 0x6e, 0x65, 0x73, 0x74, 0x65, 0x64, 0x5f, 0x72, 0x65, 0x73, 0x75, 0x6c,
	0x74, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1c, 0x2e, 0x73, 0x75, 0x69, 0x2e, 0x63, 0x68,
	0x65, 0x63, 0x6b, 0x70, 0x6f, 0x69, 0x6e, 0x74, 0x2e, 0x76, 0x31, 0x2e, 0x50, 0x61, 0x69, 0x72,
	0x4f, 0x66, 0x55, 0x33, 0x32, 0x48, 0x00, 0x52, 0x0c, 0x6e, 0x65, 0x73, 0x74, 0x65, 0x64, 0x52,
	0x65, 0x73, 0x75, 0x6c, 0x74, 0x42, 0x0f, 0x0a, 0x0d, 0x73, 0x75, 0x69, 0x5f, 0x61, 0x72, 0x67,
	0x75, 0x6d, 0x65, 0x6e, 0x74, 0x73, 0x22, 0x2f, 0x0a, 0x09, 0x50, 0x61, 0x69, 0x72, 0x4f, 0x66,
	0x55, 0x33, 0x32, 0x12, 0x10, 0x0a, 0x03, 0x6f, 0x6e, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0d,
	0x52, 0x03, 0x6f, 0x6e, 0x65, 0x12, 0x10, 0x0a, 0x03, 0x74, 0x77, 0x6f, 0x18, 0x02, 0x20, 0x01,
	0x28, 0x0d, 0x52, 0x03, 0x74, 0x77, 0x6f, 0x22, 0x80, 0x01, 0x0a, 0x1a, 0x53, 0x75, 0x69, 0x54,
	0x72, 0x61, 0x6e, 0x73, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x42, 0x6c, 0x6f, 0x63, 0x6b, 0x45,
	0x66, 0x66, 0x65, 0x63, 0x74, 0x73, 0x12, 0x41, 0x0a, 0x02, 0x76, 0x31, 0x18, 0x01, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x2f, 0x2e, 0x73, 0x75, 0x69, 0x2e, 0x63, 0x68, 0x65, 0x63, 0x6b, 0x70, 0x6f,
	0x69, 0x6e, 0x74, 0x2e, 0x76, 0x31, 0x2e, 0x53, 0x75, 0x69, 0x54, 0x72, 0x61, 0x6e, 0x73, 0x61,
	0x63, 0x74, 0x69, 0x6f, 0x6e, 0x42, 0x6c, 0x6f, 0x63, 0x6b, 0x45, 0x66, 0x66, 0x65, 0x63, 0x74,
	0x73, 0x56, 0x31, 0x48, 0x00, 0x52, 0x02, 0x76, 0x31, 0x42, 0x1f, 0x0a, 0x1d, 0x73, 0x75, 0x69,
	0x5f, 0x74, 0x72, 0x61, 0x6e, 0x73, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x62, 0x6c, 0x6f,
	0x63, 0x6b, 0x5f, 0x65, 0x66, 0x66, 0x65, 0x63, 0x74, 0x73, 0x22, 0xd6, 0x07, 0x0a, 0x1c, 0x53,
	0x75, 0x69, 0x54, 0x72, 0x61, 0x6e, 0x73, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x42, 0x6c, 0x6f,
	0x63, 0x6b, 0x45, 0x66, 0x66, 0x65, 0x63, 0x74, 0x73, 0x56, 0x31, 0x12, 0x3d, 0x0a, 0x06, 0x73,
	0x74, 0x61, 0x74, 0x75, 0x73, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x25, 0x2e, 0x73, 0x75,
	0x69, 0x2e, 0x63, 0x68, 0x65, 0x63, 0x6b, 0x70, 0x6f, 0x69, 0x6e, 0x74, 0x2e, 0x76, 0x31, 0x2e,
	0x53, 0x75, 0x69, 0x45, 0x78, 0x65, 0x63, 0x75, 0x74, 0x69, 0x6f, 0x6e, 0x53, 0x74, 0x61, 0x74,
	0x75, 0x73, 0x52, 0x06, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x12, 0x25, 0x0a, 0x0e, 0x65, 0x78,
	0x65, 0x63, 0x75, 0x74, 0x65, 0x64, 0x5f, 0x65, 0x70, 0x6f, 0x63, 0x68, 0x18, 0x02, 0x20, 0x01,
	0x28, 0x04, 0x52, 0x0d, 0x65, 0x78, 0x65, 0x63, 0x75, 0x74, 0x65, 0x64, 0x45, 0x70, 0x6f, 0x63,
	0x68, 0x12, 0x3c, 0x0a, 0x08, 0x67, 0x61, 0x73, 0x5f, 0x75, 0x73, 0x65, 0x64, 0x18, 0x03, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x21, 0x2e, 0x73, 0x75, 0x69, 0x2e, 0x63, 0x68, 0x65, 0x63, 0x6b, 0x70,
	0x6f, 0x69, 0x6e, 0x74, 0x2e, 0x76, 0x31, 0x2e, 0x47, 0x61, 0x73, 0x43, 0x6f, 0x73, 0x74, 0x53,
	0x75, 0x6d, 0x6d, 0x61, 0x72, 0x79, 0x52, 0x07, 0x67, 0x61, 0x73, 0x55, 0x73, 0x65, 0x64, 0x12,
	0x71, 0x0a, 0x14, 0x6d, 0x6f, 0x64, 0x69, 0x66, 0x69, 0x65, 0x64, 0x5f, 0x61, 0x74, 0x5f, 0x76,
	0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x73, 0x18, 0x04, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x3f, 0x2e,
	0x73, 0x75, 0x69, 0x2e, 0x63, 0x68, 0x65, 0x63, 0x6b, 0x70, 0x6f, 0x69, 0x6e, 0x74, 0x2e, 0x76,
	0x31, 0x2e, 0x53, 0x75, 0x69, 0x54, 0x72, 0x61, 0x6e, 0x73, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e,
	0x42, 0x6c, 0x6f, 0x63, 0x6b, 0x45, 0x66, 0x66, 0x65, 0x63, 0x74, 0x73, 0x4d, 0x6f, 0x64, 0x69,
	0x66, 0x69, 0x65, 0x64, 0x41, 0x74, 0x56, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x73, 0x52, 0x12,
	0x6d, 0x6f, 0x64, 0x69, 0x66, 0x69, 0x65, 0x64, 0x41, 0x74, 0x56, 0x65, 0x72, 0x73, 0x69, 0x6f,
	0x6e, 0x73, 0x12, 0x46, 0x0a, 0x0e, 0x73, 0x68, 0x61, 0x72, 0x65, 0x64, 0x5f, 0x6f, 0x62, 0x6a,
	0x65, 0x63, 0x74, 0x73, 0x18, 0x05, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x1f, 0x2e, 0x73, 0x75, 0x69,
	0x2e, 0x63, 0x68, 0x65, 0x63, 0x6b, 0x70, 0x6f, 0x69, 0x6e, 0x74, 0x2e, 0x76, 0x31, 0x2e, 0x53,
	0x75, 0x69, 0x4f, 0x62, 0x6a, 0x65, 0x63, 0x74, 0x52, 0x65, 0x66, 0x52, 0x0d, 0x73, 0x68, 0x61,
	0x72, 0x65, 0x64, 0x4f, 0x62, 0x6a, 0x65, 0x63, 0x74, 0x73, 0x12, 0x2d, 0x0a, 0x12, 0x74, 0x72,
	0x61, 0x6e, 0x73, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x64, 0x69, 0x67, 0x65, 0x73, 0x74,
	0x18, 0x06, 0x20, 0x01, 0x28, 0x09, 0x52, 0x11, 0x74, 0x72, 0x61, 0x6e, 0x73, 0x61, 0x63, 0x74,
	0x69, 0x6f, 0x6e, 0x44, 0x69, 0x67, 0x65, 0x73, 0x74, 0x12, 0x3b, 0x0a, 0x07, 0x63, 0x72, 0x65,
	0x61, 0x74, 0x65, 0x64, 0x18, 0x07, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x21, 0x2e, 0x73, 0x75, 0x69,
	0x2e, 0x63, 0x68, 0x65, 0x63, 0x6b, 0x70, 0x6f, 0x69, 0x6e, 0x74, 0x2e, 0x76, 0x31, 0x2e, 0x4f,
	0x77, 0x6e, 0x65, 0x64, 0x4f, 0x62, 0x6a, 0x65, 0x63, 0x74, 0x52, 0x65, 0x66, 0x52, 0x07, 0x63,
	0x72, 0x65, 0x61, 0x74, 0x65, 0x64, 0x12, 0x3b, 0x0a, 0x07, 0x6d, 0x75, 0x74, 0x61, 0x74, 0x65,
	0x64, 0x18, 0x08, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x21, 0x2e, 0x73, 0x75, 0x69, 0x2e, 0x63, 0x68,
	0x65, 0x63, 0x6b, 0x70, 0x6f, 0x69, 0x6e, 0x74, 0x2e, 0x76, 0x31, 0x2e, 0x4f, 0x77, 0x6e, 0x65,
	0x64, 0x4f, 0x62, 0x6a, 0x65, 0x63, 0x74, 0x52, 0x65, 0x66, 0x52, 0x07, 0x6d, 0x75, 0x74, 0x61,
	0x74, 0x65, 0x64, 0x12, 0x3f, 0x0a, 0x09, 0x75, 0x6e, 0x77, 0x72, 0x61, 0x70, 0x70, 0x65, 0x64,
	0x18, 0x09, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x21, 0x2e, 0x73, 0x75, 0x69, 0x2e, 0x63, 0x68, 0x65,
	0x63, 0x6b, 0x70, 0x6f, 0x69, 0x6e, 0x74, 0x2e, 0x76, 0x31, 0x2e, 0x4f, 0x77, 0x6e, 0x65, 0x64,
	0x4f, 0x62, 0x6a, 0x65, 0x63, 0x74, 0x52, 0x65, 0x66, 0x52, 0x09, 0x75, 0x6e, 0x77, 0x72, 0x61,
	0x70, 0x70, 0x65, 0x64, 0x12, 0x39, 0x0a, 0x07, 0x64, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x64, 0x18,
	0x0a, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x1f, 0x2e, 0x73, 0x75, 0x69, 0x2e, 0x63, 0x68, 0x65, 0x63,
	0x6b, 0x70, 0x6f, 0x69, 0x6e, 0x74, 0x2e, 0x76, 0x31, 0x2e, 0x53, 0x75, 0x69, 0x4f, 0x62, 0x6a,
	0x65, 0x63, 0x74, 0x52, 0x65, 0x66, 0x52, 0x07, 0x64, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x64, 0x12,
	0x55, 0x0a, 0x16, 0x75, 0x6e, 0x77, 0x72, 0x61, 0x70, 0x70, 0x65, 0x64, 0x5f, 0x74, 0x68, 0x65,
	0x6e, 0x5f, 0x64, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x64, 0x18, 0x0b, 0x20, 0x03, 0x28, 0x0b, 0x32,
	0x1f, 0x2e, 0x73, 0x75, 0x69, 0x2e, 0x63, 0x68, 0x65, 0x63, 0x6b, 0x70, 0x6f, 0x69, 0x6e, 0x74,
	0x2e, 0x76, 0x31, 0x2e, 0x53, 0x75, 0x69, 0x4f, 0x62, 0x6a, 0x65, 0x63, 0x74, 0x52, 0x65, 0x66,
	0x52, 0x14, 0x75, 0x6e, 0x77, 0x72, 0x61, 0x70, 0x70, 0x65, 0x64, 0x54, 0x68, 0x65, 0x6e, 0x44,
	0x65, 0x6c, 0x65, 0x74, 0x65, 0x64, 0x12, 0x39, 0x0a, 0x07, 0x77, 0x72, 0x61, 0x70, 0x70, 0x65,
	0x64, 0x18, 0x0c, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x1f, 0x2e, 0x73, 0x75, 0x69, 0x2e, 0x63, 0x68,
	0x65, 0x63, 0x6b, 0x70, 0x6f, 0x69, 0x6e, 0x74, 0x2e, 0x76, 0x31, 0x2e, 0x53, 0x75, 0x69, 0x4f,
	0x62, 0x6a, 0x65, 0x63, 0x74, 0x52, 0x65, 0x66, 0x52, 0x07, 0x77, 0x72, 0x61, 0x70, 0x70, 0x65,
	0x64, 0x12, 0x40, 0x0a, 0x0a, 0x67, 0x61, 0x73, 0x5f, 0x6f, 0x62, 0x6a, 0x65, 0x63, 0x74, 0x18,
	0x0d, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x21, 0x2e, 0x73, 0x75, 0x69, 0x2e, 0x63, 0x68, 0x65, 0x63,
	0x6b, 0x70, 0x6f, 0x69, 0x6e, 0x74, 0x2e, 0x76, 0x31, 0x2e, 0x4f, 0x77, 0x6e, 0x65, 0x64, 0x4f,
	0x62, 0x6a, 0x65, 0x63, 0x74, 0x52, 0x65, 0x66, 0x52, 0x09, 0x67, 0x61, 0x73, 0x4f, 0x62, 0x6a,
	0x65, 0x63, 0x74, 0x12, 0x28, 0x0a, 0x0d, 0x65, 0x76, 0x65, 0x6e, 0x74, 0x73, 0x5f, 0x64, 0x69,
	0x67, 0x65, 0x73, 0x74, 0x18, 0x0e, 0x20, 0x01, 0x28, 0x09, 0x48, 0x00, 0x52, 0x0c, 0x65, 0x76,
	0x65, 0x6e, 0x74, 0x73, 0x44, 0x69, 0x67, 0x65, 0x73, 0x74, 0x88, 0x01, 0x01, 0x12, 0x22, 0x0a,
	0x0c, 0x64, 0x65, 0x70, 0x65, 0x6e, 0x64, 0x65, 0x6e, 0x63, 0x69, 0x65, 0x73, 0x18, 0x0f, 0x20,
	0x03, 0x28, 0x09, 0x52, 0x0c, 0x64, 0x65, 0x70, 0x65, 0x6e, 0x64, 0x65, 0x6e, 0x63, 0x69, 0x65,
	0x73, 0x42, 0x10, 0x0a, 0x0e, 0x5f, 0x65, 0x76, 0x65, 0x6e, 0x74, 0x73, 0x5f, 0x64, 0x69, 0x67,
	0x65, 0x73, 0x74, 0x22, 0x7f, 0x0a, 0x0e, 0x4f, 0x77, 0x6e, 0x65, 0x64, 0x4f, 0x62, 0x6a, 0x65,
	0x63, 0x74, 0x52, 0x65, 0x66, 0x12, 0x2e, 0x0a, 0x05, 0x6f, 0x77, 0x6e, 0x65, 0x72, 0x18, 0x01,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x18, 0x2e, 0x73, 0x75, 0x69, 0x2e, 0x63, 0x68, 0x65, 0x63, 0x6b,
	0x70, 0x6f, 0x69, 0x6e, 0x74, 0x2e, 0x76, 0x31, 0x2e, 0x4f, 0x77, 0x6e, 0x65, 0x72, 0x52, 0x05,
	0x6f, 0x77, 0x6e, 0x65, 0x72, 0x12, 0x3d, 0x0a, 0x09, 0x72, 0x65, 0x66, 0x65, 0x72, 0x65, 0x6e,
	0x63, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1f, 0x2e, 0x73, 0x75, 0x69, 0x2e, 0x63,
	0x68, 0x65, 0x63, 0x6b, 0x70, 0x6f, 0x69, 0x6e, 0x74, 0x2e, 0x76, 0x31, 0x2e, 0x53, 0x75, 0x69,
	0x4f, 0x62, 0x6a, 0x65, 0x63, 0x74, 0x52, 0x65, 0x66, 0x52, 0x09, 0x72, 0x65, 0x66, 0x65, 0x72,
	0x65, 0x6e, 0x63, 0x65, 0x22, 0xc9, 0x01, 0x0a, 0x05, 0x4f, 0x77, 0x6e, 0x65, 0x72, 0x12, 0x25,
	0x0a, 0x0d, 0x61, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x5f, 0x6f, 0x77, 0x6e, 0x65, 0x72, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x09, 0x48, 0x00, 0x52, 0x0c, 0x61, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73,
	0x4f, 0x77, 0x6e, 0x65, 0x72, 0x12, 0x23, 0x0a, 0x0c, 0x6f, 0x62, 0x6a, 0x65, 0x63, 0x74, 0x5f,
	0x6f, 0x77, 0x6e, 0x65, 0x72, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x48, 0x00, 0x52, 0x0b, 0x6f,
	0x62, 0x6a, 0x65, 0x63, 0x74, 0x4f, 0x77, 0x6e, 0x65, 0x72, 0x12, 0x33, 0x0a, 0x06, 0x73, 0x68,
	0x61, 0x72, 0x65, 0x64, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x19, 0x2e, 0x73, 0x75, 0x69,
	0x2e, 0x63, 0x68, 0x65, 0x63, 0x6b, 0x70, 0x6f, 0x69, 0x6e, 0x74, 0x2e, 0x76, 0x31, 0x2e, 0x53,
	0x68, 0x61, 0x72, 0x65, 0x64, 0x48, 0x00, 0x52, 0x06, 0x73, 0x68, 0x61, 0x72, 0x65, 0x64, 0x12,
	0x36, 0x0a, 0x09, 0x69, 0x6d, 0x6d, 0x75, 0x74, 0x61, 0x62, 0x6c, 0x65, 0x18, 0x04, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x16, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74,
	0x6f, 0x62, 0x75, 0x66, 0x2e, 0x45, 0x6d, 0x70, 0x74, 0x79, 0x48, 0x00, 0x52, 0x09, 0x69, 0x6d,
	0x6d, 0x75, 0x74, 0x61, 0x62, 0x6c, 0x65, 0x42, 0x07, 0x0a, 0x05, 0x6f, 0x77, 0x6e, 0x65, 0x72,
	0x22, 0x3e, 0x0a, 0x06, 0x53, 0x68, 0x61, 0x72, 0x65, 0x64, 0x12, 0x34, 0x0a, 0x16, 0x69, 0x6e,
	0x69, 0x74, 0x69, 0x61, 0x6c, 0x5f, 0x73, 0x68, 0x61, 0x72, 0x65, 0x64, 0x5f, 0x76, 0x65, 0x72,
	0x73, 0x69, 0x6f, 0x6e, 0x18, 0x01, 0x20, 0x01, 0x28, 0x04, 0x52, 0x14, 0x69, 0x6e, 0x69, 0x74,
	0x69, 0x61, 0x6c, 0x53, 0x68, 0x61, 0x72, 0x65, 0x64, 0x56, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e,
	0x22, 0x98, 0x01, 0x0a, 0x12, 0x53, 0x75, 0x69, 0x45, 0x78, 0x65, 0x63, 0x75, 0x74, 0x69, 0x6f,
	0x6e, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x12, 0x32, 0x0a, 0x07, 0x73, 0x75, 0x63, 0x63, 0x65,
	0x73, 0x73, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x16, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c,
	0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x45, 0x6d, 0x70, 0x74, 0x79,
	0x48, 0x00, 0x52, 0x07, 0x73, 0x75, 0x63, 0x63, 0x65, 0x73, 0x73, 0x12, 0x36, 0x0a, 0x07, 0x66,
	0x61, 0x69, 0x6c, 0x75, 0x72, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x73,
	0x75, 0x69, 0x2e, 0x63, 0x68, 0x65, 0x63, 0x6b, 0x70, 0x6f, 0x69, 0x6e, 0x74, 0x2e, 0x76, 0x31,
	0x2e, 0x46, 0x61, 0x69, 0x6c, 0x75, 0x72, 0x65, 0x48, 0x00, 0x52, 0x07, 0x66, 0x61, 0x69, 0x6c,
	0x75, 0x72, 0x65, 0x42, 0x16, 0x0a, 0x14, 0x73, 0x75, 0x69, 0x5f, 0x65, 0x78, 0x65, 0x63, 0x75,
	0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x22, 0x1f, 0x0a, 0x07, 0x46,
	0x61, 0x69, 0x6c, 0x75, 0x72, 0x65, 0x12, 0x14, 0x0a, 0x05, 0x65, 0x72, 0x72, 0x6f, 0x72, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x65, 0x72, 0x72, 0x6f, 0x72, 0x22, 0x91, 0x01, 0x0a,
	0x2c, 0x53, 0x75, 0x69, 0x54, 0x72, 0x61, 0x6e, 0x73, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x42,
	0x6c, 0x6f, 0x63, 0x6b, 0x45, 0x66, 0x66, 0x65, 0x63, 0x74, 0x73, 0x4d, 0x6f, 0x64, 0x69, 0x66,
	0x69, 0x65, 0x64, 0x41, 0x74, 0x56, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x73, 0x12, 0x38, 0x0a,
	0x09, 0x6f, 0x62, 0x6a, 0x65, 0x63, 0x74, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x1b, 0x2e, 0x73, 0x75, 0x69, 0x2e, 0x63, 0x68, 0x65, 0x63, 0x6b, 0x70, 0x6f, 0x69, 0x6e,
	0x74, 0x2e, 0x76, 0x31, 0x2e, 0x4f, 0x62, 0x6a, 0x65, 0x63, 0x74, 0x49, 0x44, 0x52, 0x08, 0x6f,
	0x62, 0x6a, 0x65, 0x63, 0x74, 0x49, 0x64, 0x12, 0x27, 0x0a, 0x0f, 0x73, 0x65, 0x71, 0x75, 0x65,
	0x6e, 0x63, 0x65, 0x5f, 0x6e, 0x75, 0x6d, 0x62, 0x65, 0x72, 0x18, 0x02, 0x20, 0x01, 0x28, 0x04,
	0x52, 0x0e, 0x73, 0x65, 0x71, 0x75, 0x65, 0x6e, 0x63, 0x65, 0x4e, 0x75, 0x6d, 0x62, 0x65, 0x72,
	0x22, 0x4c, 0x0a, 0x19, 0x53, 0x75, 0x69, 0x54, 0x72, 0x61, 0x6e, 0x73, 0x61, 0x63, 0x74, 0x69,
	0x6f, 0x6e, 0x42, 0x6c, 0x6f, 0x63, 0x6b, 0x45, 0x76, 0x65, 0x6e, 0x74, 0x73, 0x12, 0x2f, 0x0a,
	0x04, 0x64, 0x61, 0x74, 0x61, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x1b, 0x2e, 0x73, 0x75,
	0x69, 0x2e, 0x63, 0x68, 0x65, 0x63, 0x6b, 0x70, 0x6f, 0x69, 0x6e, 0x74, 0x2e, 0x76, 0x31, 0x2e,
	0x53, 0x75, 0x69, 0x45, 0x76, 0x65, 0x6e, 0x74, 0x52, 0x04, 0x64, 0x61, 0x74, 0x61, 0x22, 0xf8,
	0x02, 0x0a, 0x08, 0x53, 0x75, 0x69, 0x45, 0x76, 0x65, 0x6e, 0x74, 0x12, 0x2a, 0x0a, 0x02, 0x69,
	0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x73, 0x75, 0x69, 0x2e, 0x63, 0x68,
	0x65, 0x63, 0x6b, 0x70, 0x6f, 0x69, 0x6e, 0x74, 0x2e, 0x76, 0x31, 0x2e, 0x45, 0x76, 0x65, 0x6e,
	0x74, 0x49, 0x44, 0x52, 0x02, 0x69, 0x64, 0x12, 0x3a, 0x0a, 0x0a, 0x70, 0x61, 0x63, 0x6b, 0x61,
	0x67, 0x65, 0x5f, 0x69, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1b, 0x2e, 0x73, 0x75,
	0x69, 0x2e, 0x63, 0x68, 0x65, 0x63, 0x6b, 0x70, 0x6f, 0x69, 0x6e, 0x74, 0x2e, 0x76, 0x31, 0x2e,
	0x4f, 0x62, 0x6a, 0x65, 0x63, 0x74, 0x49, 0x44, 0x52, 0x09, 0x70, 0x61, 0x63, 0x6b, 0x61, 0x67,
	0x65, 0x49, 0x64, 0x12, 0x2d, 0x0a, 0x12, 0x74, 0x72, 0x61, 0x6e, 0x73, 0x61, 0x63, 0x74, 0x69,
	0x6f, 0x6e, 0x5f, 0x6d, 0x6f, 0x64, 0x75, 0x6c, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x11, 0x74, 0x72, 0x61, 0x6e, 0x73, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x4d, 0x6f, 0x64, 0x75,
	0x6c, 0x65, 0x12, 0x16, 0x0a, 0x06, 0x73, 0x65, 0x6e, 0x64, 0x65, 0x72, 0x18, 0x04, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x06, 0x73, 0x65, 0x6e, 0x64, 0x65, 0x72, 0x12, 0x30, 0x0a, 0x04, 0x74, 0x79,
	0x70, 0x65, 0x18, 0x05, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1c, 0x2e, 0x73, 0x75, 0x69, 0x2e, 0x63,
	0x68, 0x65, 0x63, 0x6b, 0x70, 0x6f, 0x69, 0x6e, 0x74, 0x2e, 0x76, 0x31, 0x2e, 0x53, 0x74, 0x72,
	0x75, 0x63, 0x74, 0x54, 0x61, 0x67, 0x52, 0x04, 0x74, 0x79, 0x70, 0x65, 0x12, 0x40, 0x0a, 0x0b,
	0x70, 0x61, 0x72, 0x73, 0x65, 0x64, 0x5f, 0x6a, 0x73, 0x6f, 0x6e, 0x18, 0x06, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x1f, 0x2e, 0x73, 0x75, 0x69, 0x2e, 0x63, 0x68, 0x65, 0x63, 0x6b, 0x70, 0x6f, 0x69,
	0x6e, 0x74, 0x2e, 0x76, 0x31, 0x2e, 0x53, 0x75, 0x69, 0x4a, 0x73, 0x6f, 0x6e, 0x56, 0x61, 0x6c,
	0x75, 0x65, 0x52, 0x0a, 0x70, 0x61, 0x72, 0x73, 0x65, 0x64, 0x4a, 0x73, 0x6f, 0x6e, 0x12, 0x10,
	0x0a, 0x03, 0x62, 0x63, 0x73, 0x18, 0x07, 0x20, 0x01, 0x28, 0x09, 0x52, 0x03, 0x62, 0x63, 0x73,
	0x12, 0x26, 0x0a, 0x0c, 0x74, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x5f, 0x6d, 0x73,
	0x18, 0x08, 0x20, 0x01, 0x28, 0x04, 0x48, 0x00, 0x52, 0x0b, 0x74, 0x69, 0x6d, 0x65, 0x73, 0x74,
	0x61, 0x6d, 0x70, 0x4d, 0x73, 0x88, 0x01, 0x01, 0x42, 0x0f, 0x0a, 0x0d, 0x5f, 0x74, 0x69, 0x6d,
	0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x5f, 0x6d, 0x73, 0x22, 0x43, 0x0a, 0x07, 0x45, 0x76, 0x65,
	0x6e, 0x74, 0x49, 0x44, 0x12, 0x1b, 0x0a, 0x09, 0x74, 0x78, 0x5f, 0x64, 0x69, 0x67, 0x65, 0x73,
	0x74, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x74, 0x78, 0x44, 0x69, 0x67, 0x65, 0x73,
	0x74, 0x12, 0x1b, 0x0a, 0x09, 0x65, 0x76, 0x65, 0x6e, 0x74, 0x5f, 0x73, 0x65, 0x71, 0x18, 0x02,
	0x20, 0x01, 0x28, 0x04, 0x52, 0x08, 0x65, 0x76, 0x65, 0x6e, 0x74, 0x53, 0x65, 0x71, 0x22, 0x7e,
	0x0a, 0x0d, 0x43, 0x68, 0x61, 0x6e, 0x67, 0x65, 0x64, 0x4f, 0x62, 0x6a, 0x65, 0x63, 0x74, 0x12,
	0x37, 0x0a, 0x06, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x1f, 0x2e, 0x73, 0x75, 0x69, 0x2e, 0x63, 0x68, 0x65, 0x63, 0x6b, 0x70, 0x6f, 0x69, 0x6e, 0x74,
	0x2e, 0x76, 0x31, 0x2e, 0x4f, 0x62, 0x6a, 0x65, 0x63, 0x74, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73,
	0x52, 0x06, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x12, 0x34, 0x0a, 0x04, 0x64, 0x61, 0x74, 0x61,
	0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x20, 0x2e, 0x73, 0x75, 0x69, 0x2e, 0x63, 0x68, 0x65,
	0x63, 0x6b, 0x70, 0x6f, 0x69, 0x6e, 0x74, 0x2e, 0x76, 0x31, 0x2e, 0x53, 0x75, 0x69, 0x4f, 0x62,
	0x6a, 0x65, 0x63, 0x74, 0x44, 0x61, 0x74, 0x61, 0x52, 0x04, 0x64, 0x61, 0x74, 0x61, 0x22, 0xf7,
	0x02, 0x0a, 0x0c, 0x4f, 0x62, 0x6a, 0x65, 0x63, 0x74, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x12,
	0x32, 0x0a, 0x07, 0x63, 0x72, 0x65, 0x61, 0x74, 0x65, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x16, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62,
	0x75, 0x66, 0x2e, 0x45, 0x6d, 0x70, 0x74, 0x79, 0x48, 0x00, 0x52, 0x07, 0x63, 0x72, 0x65, 0x61,
	0x74, 0x65, 0x64, 0x12, 0x32, 0x0a, 0x07, 0x6d, 0x75, 0x74, 0x61, 0x74, 0x65, 0x64, 0x18, 0x02,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x16, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72,
	0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x45, 0x6d, 0x70, 0x74, 0x79, 0x48, 0x00, 0x52, 0x07,
	0x6d, 0x75, 0x74, 0x61, 0x74, 0x65, 0x64, 0x12, 0x32, 0x0a, 0x07, 0x64, 0x65, 0x6c, 0x65, 0x74,
	0x65, 0x64, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x16, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c,
	0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x45, 0x6d, 0x70, 0x74, 0x79,
	0x48, 0x00, 0x52, 0x07, 0x64, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x64, 0x12, 0x32, 0x0a, 0x07, 0x77,
	0x72, 0x61, 0x70, 0x70, 0x65, 0x64, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x16, 0x2e, 0x67,
	0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x45,
	0x6d, 0x70, 0x74, 0x79, 0x48, 0x00, 0x52, 0x07, 0x77, 0x72, 0x61, 0x70, 0x70, 0x65, 0x64, 0x12,
	0x36, 0x0a, 0x09, 0x75, 0x6e, 0x77, 0x72, 0x61, 0x70, 0x70, 0x65, 0x64, 0x18, 0x05, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x16, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74,
	0x6f, 0x62, 0x75, 0x66, 0x2e, 0x45, 0x6d, 0x70, 0x74, 0x79, 0x48, 0x00, 0x52, 0x09, 0x75, 0x6e,
	0x77, 0x72, 0x61, 0x70, 0x70, 0x65, 0x64, 0x12, 0x4e, 0x0a, 0x16, 0x75, 0x6e, 0x77, 0x72, 0x61,
	0x70, 0x70, 0x65, 0x64, 0x5f, 0x74, 0x68, 0x65, 0x6e, 0x5f, 0x64, 0x65, 0x6c, 0x65, 0x74, 0x65,
	0x64, 0x18, 0x06, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x16, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65,
	0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x45, 0x6d, 0x70, 0x74, 0x79, 0x48,
	0x00, 0x52, 0x14, 0x75, 0x6e, 0x77, 0x72, 0x61, 0x70, 0x70, 0x65, 0x64, 0x54, 0x68, 0x65, 0x6e,
	0x44, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x64, 0x42, 0x0f, 0x0a, 0x0d, 0x6f, 0x62, 0x6a, 0x65, 0x63,
	0x74, 0x5f, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x22, 0xeb, 0x04, 0x0a, 0x0d, 0x53, 0x75, 0x69,
	0x4f, 0x62, 0x6a, 0x65, 0x63, 0x74, 0x44, 0x61, 0x74, 0x61, 0x12, 0x38, 0x0a, 0x09, 0x6f, 0x62,
	0x6a, 0x65, 0x63, 0x74, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1b, 0x2e,
	0x73, 0x75, 0x69, 0x2e, 0x63, 0x68, 0x65, 0x63, 0x6b, 0x70, 0x6f, 0x69, 0x6e, 0x74, 0x2e, 0x76,
	0x31, 0x2e, 0x4f, 0x62, 0x6a, 0x65, 0x63, 0x74, 0x49, 0x44, 0x52, 0x08, 0x6f, 0x62, 0x6a, 0x65,
	0x63, 0x74, 0x49, 0x64, 0x12, 0x18, 0x0a, 0x07, 0x76, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x18,
	0x02, 0x20, 0x01, 0x28, 0x04, 0x52, 0x07, 0x76, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x12, 0x16,
	0x0a, 0x06, 0x64, 0x69, 0x67, 0x65, 0x73, 0x74, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06,
	0x64, 0x69, 0x67, 0x65, 0x73, 0x74, 0x12, 0x36, 0x0a, 0x04, 0x74, 0x79, 0x70, 0x65, 0x18, 0x04,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x1d, 0x2e, 0x73, 0x75, 0x69, 0x2e, 0x63, 0x68, 0x65, 0x63, 0x6b,
	0x70, 0x6f, 0x69, 0x6e, 0x74, 0x2e, 0x76, 0x31, 0x2e, 0x4f, 0x62, 0x6a, 0x65, 0x63, 0x74, 0x54,
	0x79, 0x70, 0x65, 0x48, 0x00, 0x52, 0x04, 0x74, 0x79, 0x70, 0x65, 0x88, 0x01, 0x01, 0x12, 0x33,
	0x0a, 0x05, 0x6f, 0x77, 0x6e, 0x65, 0x72, 0x18, 0x05, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x18, 0x2e,
	0x73, 0x75, 0x69, 0x2e, 0x63, 0x68, 0x65, 0x63, 0x6b, 0x70, 0x6f, 0x69, 0x6e, 0x74, 0x2e, 0x76,
	0x31, 0x2e, 0x4f, 0x77, 0x6e, 0x65, 0x72, 0x48, 0x01, 0x52, 0x05, 0x6f, 0x77, 0x6e, 0x65, 0x72,
	0x88, 0x01, 0x01, 0x12, 0x36, 0x0a, 0x14, 0x70, 0x72, 0x65, 0x76, 0x69, 0x6f, 0x75, 0x73, 0x5f,
	0x74, 0x72, 0x61, 0x6e, 0x73, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x06, 0x20, 0x01, 0x28,
	0x09, 0x48, 0x02, 0x52, 0x13, 0x70, 0x72, 0x65, 0x76, 0x69, 0x6f, 0x75, 0x73, 0x54, 0x72, 0x61,
	0x6e, 0x73, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x88, 0x01, 0x01, 0x12, 0x2a, 0x0a, 0x0e, 0x73,
	0x74, 0x6f, 0x72, 0x61, 0x67, 0x65, 0x5f, 0x72, 0x65, 0x62, 0x61, 0x74, 0x65, 0x18, 0x07, 0x20,
	0x01, 0x28, 0x04, 0x48, 0x03, 0x52, 0x0d, 0x73, 0x74, 0x6f, 0x72, 0x61, 0x67, 0x65, 0x52, 0x65,
	0x62, 0x61, 0x74, 0x65, 0x88, 0x01, 0x01, 0x12, 0x47, 0x0a, 0x07, 0x64, 0x69, 0x73, 0x70, 0x6c,
	0x61, 0x79, 0x18, 0x08, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x28, 0x2e, 0x73, 0x75, 0x69, 0x2e, 0x63,
	0x68, 0x65, 0x63, 0x6b, 0x70, 0x6f, 0x69, 0x6e, 0x74, 0x2e, 0x76, 0x31, 0x2e, 0x44, 0x69, 0x73,
	0x70, 0x6c, 0x61, 0x79, 0x46, 0x69, 0x65, 0x6c, 0x64, 0x73, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e,
	0x73, 0x65, 0x48, 0x04, 0x52, 0x07, 0x64, 0x69, 0x73, 0x70, 0x6c, 0x61, 0x79, 0x88, 0x01, 0x01,
	0x12, 0x3f, 0x0a, 0x07, 0x63, 0x6f, 0x6e, 0x74, 0x65, 0x6e, 0x74, 0x18, 0x09, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x20, 0x2e, 0x73, 0x75, 0x69, 0x2e, 0x63, 0x68, 0x65, 0x63, 0x6b, 0x70, 0x6f, 0x69,
	0x6e, 0x74, 0x2e, 0x76, 0x31, 0x2e, 0x53, 0x75, 0x69, 0x50, 0x61, 0x72, 0x73, 0x65, 0x64, 0x44,
	0x61, 0x74, 0x61, 0x48, 0x05, 0x52, 0x07, 0x63, 0x6f, 0x6e, 0x74, 0x65, 0x6e, 0x74, 0x88, 0x01,
	0x01, 0x12, 0x34, 0x0a, 0x03, 0x62, 0x63, 0x73, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1d,
	0x2e, 0x73, 0x75, 0x69, 0x2e, 0x63, 0x68, 0x65, 0x63, 0x6b, 0x70, 0x6f, 0x69, 0x6e, 0x74, 0x2e,
	0x76, 0x31, 0x2e, 0x53, 0x75, 0x69, 0x52, 0x61, 0x77, 0x44, 0x61, 0x74, 0x61, 0x48, 0x06, 0x52,
	0x03, 0x62, 0x63, 0x73, 0x88, 0x01, 0x01, 0x42, 0x07, 0x0a, 0x05, 0x5f, 0x74, 0x79, 0x70, 0x65,
	0x42, 0x08, 0x0a, 0x06, 0x5f, 0x6f, 0x77, 0x6e, 0x65, 0x72, 0x42, 0x17, 0x0a, 0x15, 0x5f, 0x70,
	0x72, 0x65, 0x76, 0x69, 0x6f, 0x75, 0x73, 0x5f, 0x74, 0x72, 0x61, 0x6e, 0x73, 0x61, 0x63, 0x74,
	0x69, 0x6f, 0x6e, 0x42, 0x11, 0x0a, 0x0f, 0x5f, 0x73, 0x74, 0x6f, 0x72, 0x61, 0x67, 0x65, 0x5f,
	0x72, 0x65, 0x62, 0x61, 0x74, 0x65, 0x42, 0x0a, 0x0a, 0x08, 0x5f, 0x64, 0x69, 0x73, 0x70, 0x6c,
	0x61, 0x79, 0x42, 0x0a, 0x0a, 0x08, 0x5f, 0x63, 0x6f, 0x6e, 0x74, 0x65, 0x6e, 0x74, 0x42, 0x06,
	0x0a, 0x04, 0x5f, 0x62, 0x63, 0x73, 0x22, 0x8c, 0x01, 0x0a, 0x0a, 0x4f, 0x62, 0x6a, 0x65, 0x63,
	0x74, 0x54, 0x79, 0x70, 0x65, 0x12, 0x32, 0x0a, 0x07, 0x70, 0x61, 0x63, 0x6b, 0x61, 0x67, 0x65,
	0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x16, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e,
	0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x45, 0x6d, 0x70, 0x74, 0x79, 0x48, 0x00,
	0x52, 0x07, 0x70, 0x61, 0x63, 0x6b, 0x61, 0x67, 0x65, 0x12, 0x3b, 0x0a, 0x06, 0x73, 0x74, 0x72,
	0x75, 0x63, 0x74, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x21, 0x2e, 0x73, 0x75, 0x69, 0x2e,
	0x63, 0x68, 0x65, 0x63, 0x6b, 0x70, 0x6f, 0x69, 0x6e, 0x74, 0x2e, 0x76, 0x31, 0x2e, 0x4d, 0x6f,
	0x76, 0x65, 0x4f, 0x62, 0x6a, 0x65, 0x63, 0x74, 0x54, 0x79, 0x70, 0x65, 0x48, 0x00, 0x52, 0x06,
	0x73, 0x74, 0x72, 0x75, 0x63, 0x74, 0x42, 0x0d, 0x0a, 0x0b, 0x6f, 0x62, 0x6a, 0x65, 0x63, 0x74,
	0x5f, 0x74, 0x79, 0x70, 0x65, 0x22, 0xfa, 0x01, 0x0a, 0x0e, 0x4d, 0x6f, 0x76, 0x65, 0x4f, 0x62,
	0x6a, 0x65, 0x63, 0x74, 0x54, 0x79, 0x70, 0x65, 0x12, 0x34, 0x0a, 0x05, 0x6f, 0x74, 0x68, 0x65,
	0x72, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1c, 0x2e, 0x73, 0x75, 0x69, 0x2e, 0x63, 0x68,
	0x65, 0x63, 0x6b, 0x70, 0x6f, 0x69, 0x6e, 0x74, 0x2e, 0x76, 0x31, 0x2e, 0x53, 0x74, 0x72, 0x75,
	0x63, 0x74, 0x54, 0x61, 0x67, 0x48, 0x00, 0x52, 0x05, 0x6f, 0x74, 0x68, 0x65, 0x72, 0x12, 0x33,
	0x0a, 0x08, 0x67, 0x61, 0x73, 0x5f, 0x63, 0x6f, 0x69, 0x6e, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x16, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62,
	0x75, 0x66, 0x2e, 0x45, 0x6d, 0x70, 0x74, 0x79, 0x48, 0x00, 0x52, 0x07, 0x67, 0x61, 0x73, 0x43,
	0x6f, 0x69, 0x6e, 0x12, 0x37, 0x0a, 0x0a, 0x73, 0x74, 0x61, 0x6b, 0x65, 0x64, 0x5f, 0x73, 0x75,
	0x69, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x16, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65,
	0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x45, 0x6d, 0x70, 0x74, 0x79, 0x48,
	0x00, 0x52, 0x09, 0x73, 0x74, 0x61, 0x6b, 0x65, 0x64, 0x53, 0x75, 0x69, 0x12, 0x30, 0x0a, 0x04,
	0x63, 0x6f, 0x69, 0x6e, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x73, 0x75, 0x69,
	0x2e, 0x63, 0x68, 0x65, 0x63, 0x6b, 0x70, 0x6f, 0x69, 0x6e, 0x74, 0x2e, 0x76, 0x31, 0x2e, 0x54,
	0x79, 0x70, 0x65, 0x54, 0x61, 0x67, 0x48, 0x00, 0x52, 0x04, 0x63, 0x6f, 0x69, 0x6e, 0x42, 0x12,
	0x0a, 0x10, 0x6d, 0x6f, 0x76, 0x65, 0x5f, 0x6f, 0x62, 0x6a, 0x65, 0x63, 0x74, 0x5f, 0x74, 0x79,
	0x70, 0x65, 0x22, 0xd9, 0x01, 0x0a, 0x15, 0x44, 0x69, 0x73, 0x70, 0x6c, 0x61, 0x79, 0x46, 0x69,
	0x65, 0x6c, 0x64, 0x73, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x46, 0x0a, 0x04,
	0x64, 0x61, 0x74, 0x61, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x32, 0x2e, 0x73, 0x75, 0x69,
	0x2e, 0x63, 0x68, 0x65, 0x63, 0x6b, 0x70, 0x6f, 0x69, 0x6e, 0x74, 0x2e, 0x76, 0x31, 0x2e, 0x44,
	0x69, 0x73, 0x70, 0x6c, 0x61, 0x79, 0x46, 0x69, 0x65, 0x6c, 0x64, 0x73, 0x52, 0x65, 0x73, 0x70,
	0x6f, 0x6e, 0x73, 0x65, 0x2e, 0x44, 0x61, 0x74, 0x61, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x52, 0x04,
	0x64, 0x61, 0x74, 0x61, 0x12, 0x3f, 0x0a, 0x05, 0x65, 0x72, 0x72, 0x6f, 0x72, 0x18, 0x02, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x29, 0x2e, 0x73, 0x75, 0x69, 0x2e, 0x63, 0x68, 0x65, 0x63, 0x6b, 0x70,
	0x6f, 0x69, 0x6e, 0x74, 0x2e, 0x76, 0x31, 0x2e, 0x53, 0x75, 0x69, 0x4f, 0x62, 0x6a, 0x65, 0x63,
	0x74, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x45, 0x72, 0x72, 0x6f, 0x72, 0x52, 0x05,
	0x65, 0x72, 0x72, 0x6f, 0x72, 0x1a, 0x37, 0x0a, 0x09, 0x44, 0x61, 0x74, 0x61, 0x45, 0x6e, 0x74,
	0x72, 0x79, 0x12, 0x10, 0x0a, 0x03, 0x6b, 0x65, 0x79, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x03, 0x6b, 0x65, 0x79, 0x12, 0x14, 0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x02, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x3a, 0x02, 0x38, 0x01, 0x22, 0xa9,
	0x06, 0x0a, 0x16, 0x53, 0x75, 0x69, 0x4f, 0x62, 0x6a, 0x65, 0x63, 0x74, 0x52, 0x65, 0x73, 0x70,
	0x6f, 0x6e, 0x73, 0x65, 0x45, 0x72, 0x72, 0x6f, 0x72, 0x12, 0x54, 0x0a, 0x0a, 0x6e, 0x6f, 0x74,
	0x5f, 0x65, 0x78, 0x69, 0x73, 0x74, 0x73, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x33, 0x2e,
	0x73, 0x75, 0x69, 0x2e, 0x63, 0x68, 0x65, 0x63, 0x6b, 0x70, 0x6f, 0x69, 0x6e, 0x74, 0x2e, 0x76,
	0x31, 0x2e, 0x53, 0x75, 0x69, 0x4f, 0x62, 0x6a, 0x65, 0x63, 0x74, 0x52, 0x65, 0x73, 0x70, 0x6f,
	0x6e, 0x73, 0x65, 0x45, 0x72, 0x72, 0x6f, 0x72, 0x2e, 0x4e, 0x6f, 0x74, 0x45, 0x78, 0x69, 0x73,
	0x74, 0x73, 0x48, 0x00, 0x52, 0x09, 0x6e, 0x6f, 0x74, 0x45, 0x78, 0x69, 0x73, 0x74, 0x73, 0x12,
	0x77, 0x0a, 0x17, 0x64, 0x79, 0x6e, 0x61, 0x6d, 0x69, 0x63, 0x5f, 0x66, 0x69, 0x65, 0x6c, 0x64,
	0x5f, 0x6e, 0x6f, 0x74, 0x5f, 0x66, 0x6f, 0x75, 0x6e, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x3e, 0x2e, 0x73, 0x75, 0x69, 0x2e, 0x63, 0x68, 0x65, 0x63, 0x6b, 0x70, 0x6f, 0x69, 0x6e,
	0x74, 0x2e, 0x76, 0x31, 0x2e, 0x53, 0x75, 0x69, 0x4f, 0x62, 0x6a, 0x65, 0x63, 0x74, 0x52, 0x65,
	0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x45, 0x72, 0x72, 0x6f, 0x72, 0x2e, 0x44, 0x79, 0x6e, 0x61,
	0x6d, 0x69, 0x63, 0x46, 0x69, 0x65, 0x6c, 0x64, 0x4e, 0x6f, 0x74, 0x46, 0x6f, 0x75, 0x6e, 0x64,
	0x48, 0x00, 0x52, 0x14, 0x64, 0x79, 0x6e, 0x61, 0x6d, 0x69, 0x63, 0x46, 0x69, 0x65, 0x6c, 0x64,
	0x4e, 0x6f, 0x74, 0x46, 0x6f, 0x75, 0x6e, 0x64, 0x12, 0x4d, 0x0a, 0x07, 0x64, 0x65, 0x6c, 0x65,
	0x74, 0x65, 0x64, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x31, 0x2e, 0x73, 0x75, 0x69, 0x2e,
	0x63, 0x68, 0x65, 0x63, 0x6b, 0x70, 0x6f, 0x69, 0x6e, 0x74, 0x2e, 0x76, 0x31, 0x2e, 0x53, 0x75,
	0x69, 0x4f, 0x62, 0x6a, 0x65, 0x63, 0x74, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x45,
	0x72, 0x72, 0x6f, 0x72, 0x2e, 0x44, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x64, 0x48, 0x00, 0x52, 0x07,
	0x64, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x64, 0x12, 0x32, 0x0a, 0x07, 0x55, 0x6e, 0x6b, 0x6e, 0x6f,
	0x77, 0x6e, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x16, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c,
	0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x45, 0x6d, 0x70, 0x74, 0x79,
	0x48, 0x00, 0x52, 0x07, 0x55, 0x6e, 0x6b, 0x6e, 0x6f, 0x77, 0x6e, 0x12, 0x5d, 0x0a, 0x0d, 0x64,
	0x69, 0x73, 0x70, 0x6c, 0x61, 0x79, 0x5f, 0x65, 0x72, 0x72, 0x6f, 0x72, 0x18, 0x05, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x36, 0x2e, 0x73, 0x75, 0x69, 0x2e, 0x63, 0x68, 0x65, 0x63, 0x6b, 0x70, 0x6f,
	0x69, 0x6e, 0x74, 0x2e, 0x76, 0x31, 0x2e, 0x53, 0x75, 0x69, 0x4f, 0x62, 0x6a, 0x65, 0x63, 0x74,
	0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x45, 0x72, 0x72, 0x6f, 0x72, 0x2e, 0x44, 0x69,
	0x73, 0x70, 0x6c, 0x61, 0x79, 0x45, 0x72, 0x72, 0x6f, 0x72, 0x48, 0x00, 0x52, 0x0c, 0x64, 0x69,
	0x73, 0x70, 0x6c, 0x61, 0x79, 0x45, 0x72, 0x72, 0x6f, 0x72, 0x1a, 0x45, 0x0a, 0x09, 0x4e, 0x6f,
	0x74, 0x45, 0x78, 0x69, 0x73, 0x74, 0x73, 0x12, 0x38, 0x0a, 0x09, 0x6f, 0x62, 0x6a, 0x65, 0x63,
	0x74, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1b, 0x2e, 0x73, 0x75, 0x69,
	0x2e, 0x63, 0x68, 0x65, 0x63, 0x6b, 0x70, 0x6f, 0x69, 0x6e, 0x74, 0x2e, 0x76, 0x31, 0x2e, 0x4f,
	0x62, 0x6a, 0x65, 0x63, 0x74, 0x49, 0x44, 0x52, 0x08, 0x6f, 0x62, 0x6a, 0x65, 0x63, 0x74, 0x49,
	0x64, 0x1a, 0x5d, 0x0a, 0x14, 0x44, 0x79, 0x6e, 0x61, 0x6d, 0x69, 0x63, 0x46, 0x69, 0x65, 0x6c,
	0x64, 0x4e, 0x6f, 0x74, 0x46, 0x6f, 0x75, 0x6e, 0x64, 0x12, 0x45, 0x0a, 0x10, 0x70, 0x61, 0x72,
	0x65, 0x6e, 0x74, 0x5f, 0x6f, 0x62, 0x6a, 0x65, 0x63, 0x74, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x1b, 0x2e, 0x73, 0x75, 0x69, 0x2e, 0x63, 0x68, 0x65, 0x63, 0x6b, 0x70,
	0x6f, 0x69, 0x6e, 0x74, 0x2e, 0x76, 0x31, 0x2e, 0x4f, 0x62, 0x6a, 0x65, 0x63, 0x74, 0x49, 0x44,
	0x52, 0x0e, 0x70, 0x61, 0x72, 0x65, 0x6e, 0x74, 0x4f, 0x62, 0x6a, 0x65, 0x63, 0x74, 0x49, 0x64,
	0x1a, 0x75, 0x0a, 0x07, 0x44, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x64, 0x12, 0x38, 0x0a, 0x09, 0x6f,
	0x62, 0x6a, 0x65, 0x63, 0x74, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1b,
	0x2e, 0x73, 0x75, 0x69, 0x2e, 0x63, 0x68, 0x65, 0x63, 0x6b, 0x70, 0x6f, 0x69, 0x6e, 0x74, 0x2e,
	0x76, 0x31, 0x2e, 0x4f, 0x62, 0x6a, 0x65, 0x63, 0x74, 0x49, 0x44, 0x52, 0x08, 0x6f, 0x62, 0x6a,
	0x65, 0x63, 0x74, 0x49, 0x64, 0x12, 0x18, 0x0a, 0x07, 0x76, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e,
	0x18, 0x02, 0x20, 0x01, 0x28, 0x04, 0x52, 0x07, 0x76, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x12,
	0x16, 0x0a, 0x06, 0x64, 0x69, 0x67, 0x65, 0x73, 0x74, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x06, 0x64, 0x69, 0x67, 0x65, 0x73, 0x74, 0x1a, 0x24, 0x0a, 0x0c, 0x44, 0x69, 0x73, 0x70, 0x6c,
	0x61, 0x79, 0x45, 0x72, 0x72, 0x6f, 0x72, 0x12, 0x14, 0x0a, 0x05, 0x65, 0x72, 0x72, 0x6f, 0x72,
	0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x65, 0x72, 0x72, 0x6f, 0x72, 0x42, 0x1b, 0x0a,
	0x19, 0x73, 0x75, 0x69, 0x5f, 0x6f, 0x62, 0x6a, 0x65, 0x63, 0x74, 0x5f, 0x72, 0x65, 0x73, 0x70,
	0x6f, 0x6e, 0x73, 0x65, 0x5f, 0x65, 0x72, 0x72, 0x6f, 0x72, 0x22, 0xac, 0x01, 0x0a, 0x0d, 0x53,
	0x75, 0x69, 0x50, 0x61, 0x72, 0x73, 0x65, 0x64, 0x44, 0x61, 0x74, 0x61, 0x12, 0x49, 0x0a, 0x0b,
	0x6d, 0x6f, 0x76, 0x65, 0x5f, 0x6f, 0x62, 0x6a, 0x65, 0x63, 0x74, 0x18, 0x01, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x26, 0x2e, 0x73, 0x75, 0x69, 0x2e, 0x63, 0x68, 0x65, 0x63, 0x6b, 0x70, 0x6f, 0x69,
	0x6e, 0x74, 0x2e, 0x76, 0x31, 0x2e, 0x53, 0x75, 0x69, 0x50, 0x61, 0x72, 0x73, 0x65, 0x64, 0x4d,
	0x6f, 0x76, 0x65, 0x4f, 0x62, 0x6a, 0x65, 0x63, 0x74, 0x48, 0x00, 0x52, 0x0a, 0x6d, 0x6f, 0x76,
	0x65, 0x4f, 0x62, 0x6a, 0x65, 0x63, 0x74, 0x12, 0x3d, 0x0a, 0x07, 0x70, 0x61, 0x63, 0x6b, 0x61,
	0x67, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x21, 0x2e, 0x73, 0x75, 0x69, 0x2e, 0x63,
	0x68, 0x65, 0x63, 0x6b, 0x70, 0x6f, 0x69, 0x6e, 0x74, 0x2e, 0x76, 0x31, 0x2e, 0x53, 0x75, 0x69,
	0x4d, 0x6f, 0x76, 0x65, 0x50, 0x61, 0x63, 0x6b, 0x61, 0x67, 0x65, 0x48, 0x00, 0x52, 0x07, 0x70,
	0x61, 0x63, 0x6b, 0x61, 0x67, 0x65, 0x42, 0x11, 0x0a, 0x0f, 0x73, 0x75, 0x69, 0x5f, 0x70, 0x61,
	0x72, 0x73, 0x65, 0x64, 0x5f, 0x64, 0x61, 0x74, 0x61, 0x22, 0xb1, 0x01, 0x0a, 0x13, 0x53, 0x75,
	0x69, 0x50, 0x61, 0x72, 0x73, 0x65, 0x64, 0x4d, 0x6f, 0x76, 0x65, 0x4f, 0x62, 0x6a, 0x65, 0x63,
	0x74, 0x12, 0x30, 0x0a, 0x04, 0x74, 0x79, 0x70, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x1c, 0x2e, 0x73, 0x75, 0x69, 0x2e, 0x63, 0x68, 0x65, 0x63, 0x6b, 0x70, 0x6f, 0x69, 0x6e, 0x74,
	0x2e, 0x76, 0x31, 0x2e, 0x53, 0x74, 0x72, 0x75, 0x63, 0x74, 0x54, 0x61, 0x67, 0x52, 0x04, 0x74,
	0x79, 0x70, 0x65, 0x12, 0x2e, 0x0a, 0x13, 0x68, 0x61, 0x73, 0x5f, 0x70, 0x75, 0x62, 0x6c, 0x69,
	0x63, 0x5f, 0x74, 0x72, 0x61, 0x6e, 0x73, 0x66, 0x65, 0x72, 0x18, 0x02, 0x20, 0x01, 0x28, 0x08,
	0x52, 0x11, 0x68, 0x61, 0x73, 0x50, 0x75, 0x62, 0x6c, 0x69, 0x63, 0x54, 0x72, 0x61, 0x6e, 0x73,
	0x66, 0x65, 0x72, 0x12, 0x38, 0x0a, 0x06, 0x66, 0x69, 0x65, 0x6c, 0x64, 0x73, 0x18, 0x03, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x20, 0x2e, 0x73, 0x75, 0x69, 0x2e, 0x63, 0x68, 0x65, 0x63, 0x6b, 0x70,
	0x6f, 0x69, 0x6e, 0x74, 0x2e, 0x76, 0x31, 0x2e, 0x53, 0x75, 0x69, 0x4d, 0x6f, 0x76, 0x65, 0x53,
	0x74, 0x72, 0x75, 0x63, 0x74, 0x52, 0x06, 0x66, 0x69, 0x65, 0x6c, 0x64, 0x73, 0x22, 0xe7, 0x01,
	0x0a, 0x0d, 0x53, 0x75, 0x69, 0x4d, 0x6f, 0x76, 0x65, 0x53, 0x74, 0x72, 0x75, 0x63, 0x74, 0x12,
	0x42, 0x0a, 0x07, 0x72, 0x75, 0x6e, 0x74, 0x69, 0x6d, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x26, 0x2e, 0x73, 0x75, 0x69, 0x2e, 0x63, 0x68, 0x65, 0x63, 0x6b, 0x70, 0x6f, 0x69, 0x6e,
	0x74, 0x2e, 0x76, 0x31, 0x2e, 0x4c, 0x69, 0x73, 0x74, 0x4f, 0x66, 0x53, 0x75, 0x69, 0x4d, 0x6f,
	0x76, 0x65, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x73, 0x48, 0x00, 0x52, 0x07, 0x72, 0x75, 0x6e, 0x74,
	0x69, 0x6d, 0x65, 0x12, 0x3d, 0x0a, 0x0a, 0x77, 0x69, 0x74, 0x68, 0x5f, 0x74, 0x79, 0x70, 0x65,
	0x73, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1c, 0x2e, 0x73, 0x75, 0x69, 0x2e, 0x63, 0x68,
	0x65, 0x63, 0x6b, 0x70, 0x6f, 0x69, 0x6e, 0x74, 0x2e, 0x76, 0x31, 0x2e, 0x57, 0x69, 0x74, 0x68,
	0x54, 0x79, 0x70, 0x65, 0x73, 0x48, 0x00, 0x52, 0x09, 0x77, 0x69, 0x74, 0x68, 0x54, 0x79, 0x70,
	0x65, 0x73, 0x12, 0x40, 0x0a, 0x0b, 0x77, 0x69, 0x74, 0x68, 0x5f, 0x66, 0x69, 0x65, 0x6c, 0x64,
	0x73, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1d, 0x2e, 0x73, 0x75, 0x69, 0x2e, 0x63, 0x68,
	0x65, 0x63, 0x6b, 0x70, 0x6f, 0x69, 0x6e, 0x74, 0x2e, 0x76, 0x31, 0x2e, 0x57, 0x69, 0x74, 0x68,
	0x46, 0x69, 0x65, 0x6c, 0x64, 0x73, 0x48, 0x00, 0x52, 0x0a, 0x77, 0x69, 0x74, 0x68, 0x46, 0x69,
	0x65, 0x6c, 0x64, 0x73, 0x42, 0x11, 0x0a, 0x0f, 0x73, 0x75, 0x69, 0x5f, 0x6d, 0x6f, 0x76, 0x65,
	0x5f, 0x73, 0x74, 0x72, 0x75, 0x63, 0x74, 0x22, 0x4a, 0x0a, 0x13, 0x4c, 0x69, 0x73, 0x74, 0x4f,
	0x66, 0x53, 0x75, 0x69, 0x4d, 0x6f, 0x76, 0x65, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x73, 0x12, 0x33,
	0x0a, 0x04, 0x6c, 0x69, 0x73, 0x74, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x1f, 0x2e, 0x73,
	0x75, 0x69, 0x2e, 0x63, 0x68, 0x65, 0x63, 0x6b, 0x70, 0x6f, 0x69, 0x6e, 0x74, 0x2e, 0x76, 0x31,
	0x2e, 0x53, 0x75, 0x69, 0x4d, 0x6f, 0x76, 0x65, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x52, 0x04, 0x6c,
	0x69, 0x73, 0x74, 0x22, 0xdb, 0x01, 0x0a, 0x09, 0x57, 0x69, 0x74, 0x68, 0x54, 0x79, 0x70, 0x65,
	0x73, 0x12, 0x30, 0x0a, 0x04, 0x74, 0x79, 0x70, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x1c, 0x2e, 0x73, 0x75, 0x69, 0x2e, 0x63, 0x68, 0x65, 0x63, 0x6b, 0x70, 0x6f, 0x69, 0x6e, 0x74,
	0x2e, 0x76, 0x31, 0x2e, 0x53, 0x74, 0x72, 0x75, 0x63, 0x74, 0x54, 0x61, 0x67, 0x52, 0x04, 0x74,
	0x79, 0x70, 0x65, 0x12, 0x40, 0x0a, 0x06, 0x66, 0x69, 0x65, 0x6c, 0x64, 0x73, 0x18, 0x02, 0x20,
	0x03, 0x28, 0x0b, 0x32, 0x28, 0x2e, 0x73, 0x75, 0x69, 0x2e, 0x63, 0x68, 0x65, 0x63, 0x6b, 0x70,
	0x6f, 0x69, 0x6e, 0x74, 0x2e, 0x76, 0x31, 0x2e, 0x57, 0x69, 0x74, 0x68, 0x54, 0x79, 0x70, 0x65,
	0x73, 0x2e, 0x46, 0x69, 0x65, 0x6c, 0x64, 0x73, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x52, 0x06, 0x66,
	0x69, 0x65, 0x6c, 0x64, 0x73, 0x1a, 0x5a, 0x0a, 0x0b, 0x46, 0x69, 0x65, 0x6c, 0x64, 0x73, 0x45,
	0x6e, 0x74, 0x72, 0x79, 0x12, 0x10, 0x0a, 0x03, 0x6b, 0x65, 0x79, 0x18, 0x01, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x03, 0x6b, 0x65, 0x79, 0x12, 0x35, 0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18,
	0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1f, 0x2e, 0x73, 0x75, 0x69, 0x2e, 0x63, 0x68, 0x65, 0x63,
	0x6b, 0x70, 0x6f, 0x69, 0x6e, 0x74, 0x2e, 0x76, 0x31, 0x2e, 0x53, 0x75, 0x69, 0x4d, 0x6f, 0x76,
	0x65, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x52, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x3a, 0x02, 0x38,
	0x01, 0x22, 0xab, 0x01, 0x0a, 0x0a, 0x57, 0x69, 0x74, 0x68, 0x46, 0x69, 0x65, 0x6c, 0x64, 0x73,
	0x12, 0x41, 0x0a, 0x06, 0x66, 0x69, 0x65, 0x6c, 0x64, 0x73, 0x18, 0x02, 0x20, 0x03, 0x28, 0x0b,
	0x32, 0x29, 0x2e, 0x73, 0x75, 0x69, 0x2e, 0x63, 0x68, 0x65, 0x63, 0x6b, 0x70, 0x6f, 0x69, 0x6e,
	0x74, 0x2e, 0x76, 0x31, 0x2e, 0x57, 0x69, 0x74, 0x68, 0x46, 0x69, 0x65, 0x6c, 0x64, 0x73, 0x2e,
	0x46, 0x69, 0x65, 0x6c, 0x64, 0x73, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x52, 0x06, 0x66, 0x69, 0x65,
	0x6c, 0x64, 0x73, 0x1a, 0x5a, 0x0a, 0x0b, 0x46, 0x69, 0x65, 0x6c, 0x64, 0x73, 0x45, 0x6e, 0x74,
	0x72, 0x79, 0x12, 0x10, 0x0a, 0x03, 0x6b, 0x65, 0x79, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x03, 0x6b, 0x65, 0x79, 0x12, 0x35, 0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x02, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x1f, 0x2e, 0x73, 0x75, 0x69, 0x2e, 0x63, 0x68, 0x65, 0x63, 0x6b, 0x70,
	0x6f, 0x69, 0x6e, 0x74, 0x2e, 0x76, 0x31, 0x2e, 0x53, 0x75, 0x69, 0x4d, 0x6f, 0x76, 0x65, 0x56,
	0x61, 0x6c, 0x75, 0x65, 0x52, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x3a, 0x02, 0x38, 0x01, 0x22,
	0xeb, 0x02, 0x0a, 0x0c, 0x53, 0x75, 0x69, 0x4d, 0x6f, 0x76, 0x65, 0x56, 0x61, 0x6c, 0x75, 0x65,
	0x12, 0x18, 0x0a, 0x06, 0x6e, 0x75, 0x6d, 0x62, 0x65, 0x72, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0d,
	0x48, 0x00, 0x52, 0x06, 0x6e, 0x75, 0x6d, 0x62, 0x65, 0x72, 0x12, 0x14, 0x0a, 0x04, 0x62, 0x6f,
	0x6f, 0x6c, 0x18, 0x02, 0x20, 0x01, 0x28, 0x08, 0x48, 0x00, 0x52, 0x04, 0x62, 0x6f, 0x6f, 0x6c,
	0x12, 0x1a, 0x0a, 0x07, 0x61, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x18, 0x03, 0x20, 0x01, 0x28,
	0x09, 0x48, 0x00, 0x52, 0x07, 0x61, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x12, 0x40, 0x0a, 0x06,
	0x76, 0x65, 0x63, 0x74, 0x6f, 0x72, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x26, 0x2e, 0x73,
	0x75, 0x69, 0x2e, 0x63, 0x68, 0x65, 0x63, 0x6b, 0x70, 0x6f, 0x69, 0x6e, 0x74, 0x2e, 0x76, 0x31,
	0x2e, 0x4c, 0x69, 0x73, 0x74, 0x4f, 0x66, 0x53, 0x75, 0x69, 0x4d, 0x6f, 0x76, 0x65, 0x56, 0x61,
	0x6c, 0x75, 0x65, 0x73, 0x48, 0x00, 0x52, 0x06, 0x76, 0x65, 0x63, 0x74, 0x6f, 0x72, 0x12, 0x18,
	0x0a, 0x06, 0x73, 0x74, 0x72, 0x69, 0x6e, 0x67, 0x18, 0x05, 0x20, 0x01, 0x28, 0x09, 0x48, 0x00,
	0x52, 0x06, 0x73, 0x74, 0x72, 0x69, 0x6e, 0x67, 0x12, 0x2a, 0x0a, 0x03, 0x55, 0x49, 0x44, 0x18,
	0x06, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x16, 0x2e, 0x73, 0x75, 0x69, 0x2e, 0x63, 0x68, 0x65, 0x63,
	0x6b, 0x70, 0x6f, 0x69, 0x6e, 0x74, 0x2e, 0x76, 0x31, 0x2e, 0x55, 0x49, 0x44, 0x48, 0x00, 0x52,
	0x03, 0x55, 0x49, 0x44, 0x12, 0x3a, 0x0a, 0x06, 0x73, 0x74, 0x72, 0x75, 0x63, 0x74, 0x18, 0x07,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x20, 0x2e, 0x73, 0x75, 0x69, 0x2e, 0x63, 0x68, 0x65, 0x63, 0x6b,
	0x70, 0x6f, 0x69, 0x6e, 0x74, 0x2e, 0x76, 0x31, 0x2e, 0x53, 0x75, 0x69, 0x4d, 0x6f, 0x76, 0x65,
	0x53, 0x74, 0x72, 0x75, 0x63, 0x74, 0x48, 0x00, 0x52, 0x06, 0x73, 0x74, 0x72, 0x75, 0x63, 0x74,
	0x12, 0x39, 0x0a, 0x06, 0x6f, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x08, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x1f, 0x2e, 0x73, 0x75, 0x69, 0x2e, 0x63, 0x68, 0x65, 0x63, 0x6b, 0x70, 0x6f, 0x69, 0x6e,
	0x74, 0x2e, 0x76, 0x31, 0x2e, 0x53, 0x75, 0x69, 0x4d, 0x6f, 0x76, 0x65, 0x56, 0x61, 0x6c, 0x75,
	0x65, 0x48, 0x00, 0x52, 0x06, 0x6f, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x42, 0x10, 0x0a, 0x0e, 0x73,
	0x75, 0x69, 0x5f, 0x6d, 0x6f, 0x76, 0x65, 0x5f, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x22, 0x32, 0x0a,
	0x03, 0x55, 0x49, 0x44, 0x12, 0x2b, 0x0a, 0x02, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x1b, 0x2e, 0x73, 0x75, 0x69, 0x2e, 0x63, 0x68, 0x65, 0x63, 0x6b, 0x70, 0x6f, 0x69, 0x6e,
	0x74, 0x2e, 0x76, 0x31, 0x2e, 0x4f, 0x62, 0x6a, 0x65, 0x63, 0x74, 0x49, 0x44, 0x52, 0x02, 0x69,
	0x64, 0x22, 0xcb, 0x01, 0x0a, 0x0e, 0x53, 0x75, 0x69, 0x4d, 0x6f, 0x76, 0x65, 0x50, 0x61, 0x63,
	0x6b, 0x61, 0x67, 0x65, 0x12, 0x57, 0x0a, 0x0c, 0x64, 0x69, 0x73, 0x61, 0x73, 0x73, 0x65, 0x6d,
	0x62, 0x6c, 0x65, 0x64, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x33, 0x2e, 0x73, 0x75, 0x69,
	0x2e, 0x63, 0x68, 0x65, 0x63, 0x6b, 0x70, 0x6f, 0x69, 0x6e, 0x74, 0x2e, 0x76, 0x31, 0x2e, 0x53,
	0x75, 0x69, 0x4d, 0x6f, 0x76, 0x65, 0x50, 0x61, 0x63, 0x6b, 0x61, 0x67, 0x65, 0x2e, 0x44, 0x69,
	0x73, 0x61, 0x73, 0x73, 0x65, 0x6d, 0x62, 0x6c, 0x65, 0x64, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x52,
	0x0c, 0x64, 0x69, 0x73, 0x61, 0x73, 0x73, 0x65, 0x6d, 0x62, 0x6c, 0x65, 0x64, 0x1a, 0x60, 0x0a,
	0x11, 0x44, 0x69, 0x73, 0x61, 0x73, 0x73, 0x65, 0x6d, 0x62, 0x6c, 0x65, 0x64, 0x45, 0x6e, 0x74,
	0x72, 0x79, 0x12, 0x10, 0x0a, 0x03, 0x6b, 0x65, 0x79, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x03, 0x6b, 0x65, 0x79, 0x12, 0x35, 0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x02, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x1f, 0x2e, 0x73, 0x75, 0x69, 0x2e, 0x63, 0x68, 0x65, 0x63, 0x6b, 0x70,
	0x6f, 0x69, 0x6e, 0x74, 0x2e, 0x76, 0x31, 0x2e, 0x53, 0x75, 0x69, 0x4a, 0x73, 0x6f, 0x6e, 0x56,
	0x61, 0x6c, 0x75, 0x65, 0x52, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x3a, 0x02, 0x38, 0x01, 0x22,
	0xa6, 0x01, 0x0a, 0x0a, 0x53, 0x75, 0x69, 0x52, 0x61, 0x77, 0x44, 0x61, 0x74, 0x61, 0x12, 0x46,
	0x0a, 0x0b, 0x6d, 0x6f, 0x76, 0x65, 0x5f, 0x6f, 0x62, 0x6a, 0x65, 0x63, 0x74, 0x18, 0x01, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x23, 0x2e, 0x73, 0x75, 0x69, 0x2e, 0x63, 0x68, 0x65, 0x63, 0x6b, 0x70,
	0x6f, 0x69, 0x6e, 0x74, 0x2e, 0x76, 0x31, 0x2e, 0x53, 0x75, 0x69, 0x52, 0x61, 0x77, 0x4d, 0x6f,
	0x76, 0x65, 0x4f, 0x62, 0x6a, 0x65, 0x63, 0x74, 0x48, 0x00, 0x52, 0x0a, 0x6d, 0x6f, 0x76, 0x65,
	0x4f, 0x62, 0x6a, 0x65, 0x63, 0x74, 0x12, 0x40, 0x0a, 0x07, 0x70, 0x61, 0x63, 0x6b, 0x61, 0x67,
	0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x24, 0x2e, 0x73, 0x75, 0x69, 0x2e, 0x63, 0x68,
	0x65, 0x63, 0x6b, 0x70, 0x6f, 0x69, 0x6e, 0x74, 0x2e, 0x76, 0x31, 0x2e, 0x53, 0x75, 0x69, 0x52,
	0x61, 0x77, 0x4d, 0x6f, 0x76, 0x65, 0x50, 0x61, 0x63, 0x6b, 0x61, 0x67, 0x65, 0x48, 0x00, 0x52,
	0x07, 0x70, 0x61, 0x63, 0x6b, 0x61, 0x67, 0x65, 0x42, 0x0e, 0x0a, 0x0c, 0x73, 0x75, 0x69, 0x5f,
	0x72, 0x61, 0x77, 0x5f, 0x64, 0x61, 0x74, 0x61, 0x22, 0xab, 0x01, 0x0a, 0x10, 0x53, 0x75, 0x69,
	0x52, 0x61, 0x77, 0x4d, 0x6f, 0x76, 0x65, 0x4f, 0x62, 0x6a, 0x65, 0x63, 0x74, 0x12, 0x30, 0x0a,
	0x04, 0x74, 0x79, 0x70, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1c, 0x2e, 0x73, 0x75,
	0x69, 0x2e, 0x63, 0x68, 0x65, 0x63, 0x6b, 0x70, 0x6f, 0x69, 0x6e, 0x74, 0x2e, 0x76, 0x31, 0x2e,
	0x53, 0x74, 0x72, 0x75, 0x63, 0x74, 0x54, 0x61, 0x67, 0x52, 0x04, 0x74, 0x79, 0x70, 0x65, 0x12,
	0x2e, 0x0a, 0x13, 0x68, 0x61, 0x73, 0x5f, 0x70, 0x75, 0x62, 0x6c, 0x69, 0x63, 0x5f, 0x74, 0x72,
	0x61, 0x6e, 0x73, 0x66, 0x65, 0x72, 0x18, 0x02, 0x20, 0x01, 0x28, 0x08, 0x52, 0x11, 0x68, 0x61,
	0x73, 0x50, 0x75, 0x62, 0x6c, 0x69, 0x63, 0x54, 0x72, 0x61, 0x6e, 0x73, 0x66, 0x65, 0x72, 0x12,
	0x18, 0x0a, 0x07, 0x76, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x18, 0x03, 0x20, 0x01, 0x28, 0x04,
	0x52, 0x07, 0x76, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x12, 0x1b, 0x0a, 0x09, 0x62, 0x63, 0x73,
	0x5f, 0x62, 0x79, 0x74, 0x65, 0x73, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0c, 0x52, 0x08, 0x62, 0x63,
	0x73, 0x42, 0x79, 0x74, 0x65, 0x73, 0x22, 0xf5, 0x03, 0x0a, 0x11, 0x53, 0x75, 0x69, 0x52, 0x61,
	0x77, 0x4d, 0x6f, 0x76, 0x65, 0x50, 0x61, 0x63, 0x6b, 0x61, 0x67, 0x65, 0x12, 0x2b, 0x0a, 0x02,
	0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1b, 0x2e, 0x73, 0x75, 0x69, 0x2e, 0x63,
	0x68, 0x65, 0x63, 0x6b, 0x70, 0x6f, 0x69, 0x6e, 0x74, 0x2e, 0x76, 0x31, 0x2e, 0x4f, 0x62, 0x6a,
	0x65, 0x63, 0x74, 0x49, 0x44, 0x52, 0x02, 0x69, 0x64, 0x12, 0x18, 0x0a, 0x07, 0x76, 0x65, 0x72,
	0x73, 0x69, 0x6f, 0x6e, 0x18, 0x02, 0x20, 0x01, 0x28, 0x04, 0x52, 0x07, 0x76, 0x65, 0x72, 0x73,
	0x69, 0x6f, 0x6e, 0x12, 0x52, 0x0a, 0x0a, 0x6d, 0x6f, 0x64, 0x75, 0x6c, 0x65, 0x5f, 0x6d, 0x61,
	0x70, 0x18, 0x03, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x33, 0x2e, 0x73, 0x75, 0x69, 0x2e, 0x63, 0x68,
	0x65, 0x63, 0x6b, 0x70, 0x6f, 0x69, 0x6e, 0x74, 0x2e, 0x76, 0x31, 0x2e, 0x53, 0x75, 0x69, 0x52,
	0x61, 0x77, 0x4d, 0x6f, 0x76, 0x65, 0x50, 0x61, 0x63, 0x6b, 0x61, 0x67, 0x65, 0x2e, 0x4d, 0x6f,
	0x64, 0x75, 0x6c, 0x65, 0x4d, 0x61, 0x70, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x52, 0x09, 0x6d, 0x6f,
	0x64, 0x75, 0x6c, 0x65, 0x4d, 0x61, 0x70, 0x12, 0x49, 0x0a, 0x11, 0x74, 0x79, 0x70, 0x65, 0x5f,
	0x6f, 0x72, 0x69, 0x67, 0x69, 0x6e, 0x5f, 0x74, 0x61, 0x62, 0x6c, 0x65, 0x18, 0x04, 0x20, 0x03,
	0x28, 0x0b, 0x32, 0x1d, 0x2e, 0x73, 0x75, 0x69, 0x2e, 0x63, 0x68, 0x65, 0x63, 0x6b, 0x70, 0x6f,
	0x69, 0x6e, 0x74, 0x2e, 0x76, 0x31, 0x2e, 0x54, 0x79, 0x70, 0x65, 0x4f, 0x72, 0x69, 0x67, 0x69,
	0x6e, 0x52, 0x0f, 0x74, 0x79, 0x70, 0x65, 0x4f, 0x72, 0x69, 0x67, 0x69, 0x6e, 0x54, 0x61, 0x62,
	0x6c, 0x65, 0x12, 0x5b, 0x0a, 0x0d, 0x6c, 0x69, 0x6e, 0x6b, 0x61, 0x67, 0x65, 0x5f, 0x74, 0x61,
	0x62, 0x6c, 0x65, 0x18, 0x05, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x36, 0x2e, 0x73, 0x75, 0x69, 0x2e,
	0x63, 0x68, 0x65, 0x63, 0x6b, 0x70, 0x6f, 0x69, 0x6e, 0x74, 0x2e, 0x76, 0x31, 0x2e, 0x53, 0x75,
	0x69, 0x52, 0x61, 0x77, 0x4d, 0x6f, 0x76, 0x65, 0x50, 0x61, 0x63, 0x6b, 0x61, 0x67, 0x65, 0x2e,
	0x4c, 0x69, 0x6e, 0x6b, 0x61, 0x67, 0x65, 0x54, 0x61, 0x62, 0x6c, 0x65, 0x45, 0x6e, 0x74, 0x72,
	0x79, 0x52, 0x0c, 0x6c, 0x69, 0x6e, 0x6b, 0x61, 0x67, 0x65, 0x54, 0x61, 0x62, 0x6c, 0x65, 0x1a,
	0x3c, 0x0a, 0x0e, 0x4d, 0x6f, 0x64, 0x75, 0x6c, 0x65, 0x4d, 0x61, 0x70, 0x45, 0x6e, 0x74, 0x72,
	0x79, 0x12, 0x10, 0x0a, 0x03, 0x6b, 0x65, 0x79, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x03,
	0x6b, 0x65, 0x79, 0x12, 0x14, 0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x02, 0x20, 0x01,
	0x28, 0x0c, 0x52, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x3a, 0x02, 0x38, 0x01, 0x1a, 0x5f, 0x0a,
	0x11, 0x4c, 0x69, 0x6e, 0x6b, 0x61, 0x67, 0x65, 0x54, 0x61, 0x62, 0x6c, 0x65, 0x45, 0x6e, 0x74,
	0x72, 0x79, 0x12, 0x10, 0x0a, 0x03, 0x6b, 0x65, 0x79, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x03, 0x6b, 0x65, 0x79, 0x12, 0x34, 0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x02, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x1e, 0x2e, 0x73, 0x75, 0x69, 0x2e, 0x63, 0x68, 0x65, 0x63, 0x6b, 0x70,
	0x6f, 0x69, 0x6e, 0x74, 0x2e, 0x76, 0x31, 0x2e, 0x55, 0x70, 0x67, 0x72, 0x61, 0x64, 0x65, 0x49,
	0x6e, 0x66, 0x6f, 0x52, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x3a, 0x02, 0x38, 0x01, 0x22, 0x85,
	0x01, 0x0a, 0x0a, 0x54, 0x79, 0x70, 0x65, 0x4f, 0x72, 0x69, 0x67, 0x69, 0x6e, 0x12, 0x1f, 0x0a,
	0x0b, 0x6d, 0x6f, 0x64, 0x75, 0x6c, 0x65, 0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x01, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x0a, 0x6d, 0x6f, 0x64, 0x75, 0x6c, 0x65, 0x4e, 0x61, 0x6d, 0x65, 0x12, 0x1f,
	0x0a, 0x0b, 0x73, 0x74, 0x72, 0x75, 0x63, 0x74, 0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x02, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x0a, 0x73, 0x74, 0x72, 0x75, 0x63, 0x74, 0x4e, 0x61, 0x6d, 0x65, 0x12,
	0x35, 0x0a, 0x07, 0x70, 0x61, 0x63, 0x6b, 0x61, 0x67, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x1b, 0x2e, 0x73, 0x75, 0x69, 0x2e, 0x63, 0x68, 0x65, 0x63, 0x6b, 0x70, 0x6f, 0x69, 0x6e,
	0x74, 0x2e, 0x76, 0x31, 0x2e, 0x4f, 0x62, 0x6a, 0x65, 0x63, 0x74, 0x49, 0x44, 0x52, 0x07, 0x70,
	0x61, 0x63, 0x6b, 0x61, 0x67, 0x65, 0x22, 0x76, 0x0a, 0x0b, 0x55, 0x70, 0x67, 0x72, 0x61, 0x64,
	0x65, 0x49, 0x6e, 0x66, 0x6f, 0x12, 0x3c, 0x0a, 0x0b, 0x75, 0x70, 0x67, 0x72, 0x61, 0x64, 0x65,
	0x64, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1b, 0x2e, 0x73, 0x75, 0x69,
	0x2e, 0x63, 0x68, 0x65, 0x63, 0x6b, 0x70, 0x6f, 0x69, 0x6e, 0x74, 0x2e, 0x76, 0x31, 0x2e, 0x4f,
	0x62, 0x6a, 0x65, 0x63, 0x74, 0x49, 0x44, 0x52, 0x0a, 0x75, 0x70, 0x67, 0x72, 0x61, 0x64, 0x65,
	0x64, 0x49, 0x64, 0x12, 0x29, 0x0a, 0x10, 0x75, 0x70, 0x67, 0x72, 0x61, 0x64, 0x65, 0x64, 0x5f,
	0x76, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x18, 0x02, 0x20, 0x01, 0x28, 0x04, 0x52, 0x0f, 0x75,
	0x70, 0x67, 0x72, 0x61, 0x64, 0x65, 0x64, 0x56, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x62, 0x06,
	0x70, 0x72, 0x6f, 0x74, 0x6f, 0x33,
}

var (
	file_sui_proto_rawDescOnce sync.Once
	file_sui_proto_rawDescData = file_sui_proto_rawDesc
)

func file_sui_proto_rawDescGZIP() []byte {
	file_sui_proto_rawDescOnce.Do(func() {
		file_sui_proto_rawDescData = protoimpl.X.CompressGZIP(file_sui_proto_rawDescData)
	})
	return file_sui_proto_rawDescData
}

var file_sui_proto_msgTypes = make([]protoimpl.MessageInfo, 83)
var file_sui_proto_goTypes = []interface{}{
	(*CheckpointData)(nil),                               // 0: sui.checkpoint.v1.CheckpointData
	(*Checkpoint)(nil),                                   // 1: sui.checkpoint.v1.Checkpoint
	(*CheckpointTransactionBlockResponse)(nil),           // 2: sui.checkpoint.v1.CheckpointTransactionBlockResponse
	(*GasCostSummary)(nil),                               // 3: sui.checkpoint.v1.GasCostSummary
	(*EndOfEpochData)(nil),                               // 4: sui.checkpoint.v1.EndOfEpochData
	(*NextEpochCommittee)(nil),                           // 5: sui.checkpoint.v1.NextEpochCommittee
	(*CheckpointCommitment)(nil),                         // 6: sui.checkpoint.v1.CheckpointCommitment
	(*ECMHLiveObjectSetDigest)(nil),                      // 7: sui.checkpoint.v1.ECMHLiveObjectSetDigest
	(*SuiTransactionBlock)(nil),                          // 8: sui.checkpoint.v1.SuiTransactionBlock
	(*SuiTransactionBlockData)(nil),                      // 9: sui.checkpoint.v1.SuiTransactionBlockData
	(*SuiTransactionBlockDataV1)(nil),                    // 10: sui.checkpoint.v1.SuiTransactionBlockDataV1
	(*SuiTransactionBlockKind)(nil),                      // 11: sui.checkpoint.v1.SuiTransactionBlockKind
	(*SuiGasData)(nil),                                   // 12: sui.checkpoint.v1.SuiGasData
	(*SuiObjectRef)(nil),                                 // 13: sui.checkpoint.v1.SuiObjectRef
	(*SuiChangeEpoch)(nil),                               // 14: sui.checkpoint.v1.SuiChangeEpoch
	(*SuiGenesisTransaction)(nil),                        // 15: sui.checkpoint.v1.SuiGenesisTransaction
	(*ObjectID)(nil),                                     // 16: sui.checkpoint.v1.ObjectID
	(*SuiConsensusCommitPrologue)(nil),                   // 17: sui.checkpoint.v1.SuiConsensusCommitPrologue
	(*SuiProgrammableTransactionBlock)(nil),              // 18: sui.checkpoint.v1.SuiProgrammableTransactionBlock
	(*SuiCallArg)(nil),                                   // 19: sui.checkpoint.v1.SuiCallArg
	(*SuiObjectArg)(nil),                                 // 20: sui.checkpoint.v1.SuiObjectArg
	(*ImmOrOwnedObject)(nil),                             // 21: sui.checkpoint.v1.ImmOrOwnedObject
	(*SharedObject)(nil),                                 // 22: sui.checkpoint.v1.SharedObject
	(*SuiPureValue)(nil),                                 // 23: sui.checkpoint.v1.SuiPureValue
	(*TypeTag)(nil),                                      // 24: sui.checkpoint.v1.TypeTag
	(*ListOfTypeTags)(nil),                               // 25: sui.checkpoint.v1.ListOfTypeTags
	(*StructTag)(nil),                                    // 26: sui.checkpoint.v1.StructTag
	(*SuiJsonValue)(nil),                                 // 27: sui.checkpoint.v1.SuiJsonValue
	(*SuiJsonValueMap)(nil),                              // 28: sui.checkpoint.v1.SuiJsonValueMap
	(*ListOfJsonValues)(nil),                             // 29: sui.checkpoint.v1.ListOfJsonValues
	(*SuiCommand)(nil),                                   // 30: sui.checkpoint.v1.SuiCommand
	(*TransferObjectsPair)(nil),                          // 31: sui.checkpoint.v1.TransferObjectsPair
	(*SplitCoinsPair)(nil),                               // 32: sui.checkpoint.v1.SplitCoinsPair
	(*MergeCoinsPair)(nil),                               // 33: sui.checkpoint.v1.MergeCoinsPair
	(*ListOfObjects)(nil),                                // 34: sui.checkpoint.v1.ListOfObjects
	(*MakeMoveVecPair)(nil),                              // 35: sui.checkpoint.v1.MakeMoveVecPair
	(*SuiCommandUpgrade)(nil),                            // 36: sui.checkpoint.v1.SuiCommandUpgrade
	(*SuiProgrammableMoveCall)(nil),                      // 37: sui.checkpoint.v1.SuiProgrammableMoveCall
	(*SuiArgument)(nil),                                  // 38: sui.checkpoint.v1.SuiArgument
	(*PairOfU32)(nil),                                    // 39: sui.checkpoint.v1.PairOfU32
	(*SuiTransactionBlockEffects)(nil),                   // 40: sui.checkpoint.v1.SuiTransactionBlockEffects
	(*SuiTransactionBlockEffectsV1)(nil),                 // 41: sui.checkpoint.v1.SuiTransactionBlockEffectsV1
	(*OwnedObjectRef)(nil),                               // 42: sui.checkpoint.v1.OwnedObjectRef
	(*Owner)(nil),                                        // 43: sui.checkpoint.v1.Owner
	(*Shared)(nil),                                       // 44: sui.checkpoint.v1.Shared
	(*SuiExecutionStatus)(nil),                           // 45: sui.checkpoint.v1.SuiExecutionStatus
	(*Failure)(nil),                                      // 46: sui.checkpoint.v1.Failure
	(*SuiTransactionBlockEffectsModifiedAtVersions)(nil), // 47: sui.checkpoint.v1.SuiTransactionBlockEffectsModifiedAtVersions
	(*SuiTransactionBlockEvents)(nil),                    // 48: sui.checkpoint.v1.SuiTransactionBlockEvents
	(*SuiEvent)(nil),                                     // 49: sui.checkpoint.v1.SuiEvent
	(*EventID)(nil),                                      // 50: sui.checkpoint.v1.EventID
	(*ChangedObject)(nil),                                // 51: sui.checkpoint.v1.ChangedObject
	(*ObjectStatus)(nil),                                 // 52: sui.checkpoint.v1.ObjectStatus
	(*SuiObjectData)(nil),                                // 53: sui.checkpoint.v1.SuiObjectData
	(*ObjectType)(nil),                                   // 54: sui.checkpoint.v1.ObjectType
	(*MoveObjectType)(nil),                               // 55: sui.checkpoint.v1.MoveObjectType
	(*DisplayFieldsResponse)(nil),                        // 56: sui.checkpoint.v1.DisplayFieldsResponse
	(*SuiObjectResponseError)(nil),                       // 57: sui.checkpoint.v1.SuiObjectResponseError
	(*SuiParsedData)(nil),                                // 58: sui.checkpoint.v1.SuiParsedData
	(*SuiParsedMoveObject)(nil),                          // 59: sui.checkpoint.v1.SuiParsedMoveObject
	(*SuiMoveStruct)(nil),                                // 60: sui.checkpoint.v1.SuiMoveStruct
	(*ListOfSuiMoveValues)(nil),                          // 61: sui.checkpoint.v1.ListOfSuiMoveValues
	(*WithTypes)(nil),                                    // 62: sui.checkpoint.v1.WithTypes
	(*WithFields)(nil),                                   // 63: sui.checkpoint.v1.WithFields
	(*SuiMoveValue)(nil),                                 // 64: sui.checkpoint.v1.SuiMoveValue
	(*UID)(nil),                                          // 65: sui.checkpoint.v1.UID
	(*SuiMovePackage)(nil),                               // 66: sui.checkpoint.v1.SuiMovePackage
	(*SuiRawData)(nil),                                   // 67: sui.checkpoint.v1.SuiRawData
	(*SuiRawMoveObject)(nil),                             // 68: sui.checkpoint.v1.SuiRawMoveObject
	(*SuiRawMovePackage)(nil),                            // 69: sui.checkpoint.v1.SuiRawMovePackage
	(*TypeOrigin)(nil),                                   // 70: sui.checkpoint.v1.TypeOrigin
	(*UpgradeInfo)(nil),                                  // 71: sui.checkpoint.v1.UpgradeInfo
	nil,                                                  // 72: sui.checkpoint.v1.SuiJsonValueMap.MapEntry
	nil,                                                  // 73: sui.checkpoint.v1.DisplayFieldsResponse.DataEntry
	(*SuiObjectResponseError_NotExists)(nil),             // 74: sui.checkpoint.v1.SuiObjectResponseError.NotExists
	(*SuiObjectResponseError_DynamicFieldNotFound)(nil),  // 75: sui.checkpoint.v1.SuiObjectResponseError.DynamicFieldNotFound
	(*SuiObjectResponseError_Deleted)(nil),               // 76: sui.checkpoint.v1.SuiObjectResponseError.Deleted
	(*SuiObjectResponseError_DisplayError)(nil),          // 77: sui.checkpoint.v1.SuiObjectResponseError.DisplayError
	nil,                   // 78: sui.checkpoint.v1.WithTypes.FieldsEntry
	nil,                   // 79: sui.checkpoint.v1.WithFields.FieldsEntry
	nil,                   // 80: sui.checkpoint.v1.SuiMovePackage.DisassembledEntry
	nil,                   // 81: sui.checkpoint.v1.SuiRawMovePackage.ModuleMapEntry
	nil,                   // 82: sui.checkpoint.v1.SuiRawMovePackage.LinkageTableEntry
	(*emptypb.Empty)(nil), // 83: google.protobuf.Empty
}
var file_sui_proto_depIdxs = []int32{
	1,   // 0: sui.checkpoint.v1.CheckpointData.checkpoint:type_name -> sui.checkpoint.v1.Checkpoint
	2,   // 1: sui.checkpoint.v1.CheckpointData.transactions:type_name -> sui.checkpoint.v1.CheckpointTransactionBlockResponse
	51,  // 2: sui.checkpoint.v1.CheckpointData.changed_objects:type_name -> sui.checkpoint.v1.ChangedObject
	3,   // 3: sui.checkpoint.v1.Checkpoint.epoch_rolling_gas_cost_summary:type_name -> sui.checkpoint.v1.GasCostSummary
	4,   // 4: sui.checkpoint.v1.Checkpoint.end_of_epoch_data:type_name -> sui.checkpoint.v1.EndOfEpochData
	6,   // 5: sui.checkpoint.v1.Checkpoint.checkpoint_commitments:type_name -> sui.checkpoint.v1.CheckpointCommitment
	8,   // 6: sui.checkpoint.v1.CheckpointTransactionBlockResponse.transaction:type_name -> sui.checkpoint.v1.SuiTransactionBlock
	40,  // 7: sui.checkpoint.v1.CheckpointTransactionBlockResponse.effects:type_name -> sui.checkpoint.v1.SuiTransactionBlockEffects
	48,  // 8: sui.checkpoint.v1.CheckpointTransactionBlockResponse.events:type_name -> sui.checkpoint.v1.SuiTransactionBlockEvents
	5,   // 9: sui.checkpoint.v1.EndOfEpochData.next_epoch_committee:type_name -> sui.checkpoint.v1.NextEpochCommittee
	6,   // 10: sui.checkpoint.v1.EndOfEpochData.epoch_commitments:type_name -> sui.checkpoint.v1.CheckpointCommitment
	7,   // 11: sui.checkpoint.v1.CheckpointCommitment.ECMH_live_object_set_digest:type_name -> sui.checkpoint.v1.ECMHLiveObjectSetDigest
	9,   // 12: sui.checkpoint.v1.SuiTransactionBlock.data:type_name -> sui.checkpoint.v1.SuiTransactionBlockData
	10,  // 13: sui.checkpoint.v1.SuiTransactionBlockData.v1:type_name -> sui.checkpoint.v1.SuiTransactionBlockDataV1
	11,  // 14: sui.checkpoint.v1.SuiTransactionBlockDataV1.transaction:type_name -> sui.checkpoint.v1.SuiTransactionBlockKind
	12,  // 15: sui.checkpoint.v1.SuiTransactionBlockDataV1.gas_data:type_name -> sui.checkpoint.v1.SuiGasData
	14,  // 16: sui.checkpoint.v1.SuiTransactionBlockKind.change_epoch:type_name -> sui.checkpoint.v1.SuiChangeEpoch
	15,  // 17: sui.checkpoint.v1.SuiTransactionBlockKind.genesis:type_name -> sui.checkpoint.v1.SuiGenesisTransaction
	17,  // 18: sui.checkpoint.v1.SuiTransactionBlockKind.consensus_commit_prologue:type_name -> sui.checkpoint.v1.SuiConsensusCommitPrologue
	18,  // 19: sui.checkpoint.v1.SuiTransactionBlockKind.programmable_transaction:type_name -> sui.checkpoint.v1.SuiProgrammableTransactionBlock
	13,  // 20: sui.checkpoint.v1.SuiGasData.payment:type_name -> sui.checkpoint.v1.SuiObjectRef
	16,  // 21: sui.checkpoint.v1.SuiObjectRef.object_id:type_name -> sui.checkpoint.v1.ObjectID
	16,  // 22: sui.checkpoint.v1.SuiGenesisTransaction.objects:type_name -> sui.checkpoint.v1.ObjectID
	19,  // 23: sui.checkpoint.v1.SuiProgrammableTransactionBlock.inputs:type_name -> sui.checkpoint.v1.SuiCallArg
	30,  // 24: sui.checkpoint.v1.SuiProgrammableTransactionBlock.commands:type_name -> sui.checkpoint.v1.SuiCommand
	20,  // 25: sui.checkpoint.v1.SuiCallArg.object:type_name -> sui.checkpoint.v1.SuiObjectArg
	23,  // 26: sui.checkpoint.v1.SuiCallArg.pure:type_name -> sui.checkpoint.v1.SuiPureValue
	21,  // 27: sui.checkpoint.v1.SuiObjectArg.imm_or_owned_object:type_name -> sui.checkpoint.v1.ImmOrOwnedObject
	22,  // 28: sui.checkpoint.v1.SuiObjectArg.shared_object:type_name -> sui.checkpoint.v1.SharedObject
	16,  // 29: sui.checkpoint.v1.ImmOrOwnedObject.object_id:type_name -> sui.checkpoint.v1.ObjectID
	16,  // 30: sui.checkpoint.v1.SharedObject.object_id:type_name -> sui.checkpoint.v1.ObjectID
	24,  // 31: sui.checkpoint.v1.SuiPureValue.value_type:type_name -> sui.checkpoint.v1.TypeTag
	27,  // 32: sui.checkpoint.v1.SuiPureValue.value:type_name -> sui.checkpoint.v1.SuiJsonValue
	83,  // 33: sui.checkpoint.v1.TypeTag.bool:type_name -> google.protobuf.Empty
	83,  // 34: sui.checkpoint.v1.TypeTag.u8:type_name -> google.protobuf.Empty
	83,  // 35: sui.checkpoint.v1.TypeTag.u64:type_name -> google.protobuf.Empty
	83,  // 36: sui.checkpoint.v1.TypeTag.u128:type_name -> google.protobuf.Empty
	83,  // 37: sui.checkpoint.v1.TypeTag.address:type_name -> google.protobuf.Empty
	83,  // 38: sui.checkpoint.v1.TypeTag.signer:type_name -> google.protobuf.Empty
	24,  // 39: sui.checkpoint.v1.TypeTag.vector:type_name -> sui.checkpoint.v1.TypeTag
	26,  // 40: sui.checkpoint.v1.TypeTag.struct:type_name -> sui.checkpoint.v1.StructTag
	83,  // 41: sui.checkpoint.v1.TypeTag.u16:type_name -> google.protobuf.Empty
	83,  // 42: sui.checkpoint.v1.TypeTag.u32:type_name -> google.protobuf.Empty
	83,  // 43: sui.checkpoint.v1.TypeTag.u256:type_name -> google.protobuf.Empty
	24,  // 44: sui.checkpoint.v1.ListOfTypeTags.list:type_name -> sui.checkpoint.v1.TypeTag
	25,  // 45: sui.checkpoint.v1.StructTag.type_params:type_name -> sui.checkpoint.v1.ListOfTypeTags
	83,  // 46: sui.checkpoint.v1.SuiJsonValue.null:type_name -> google.protobuf.Empty
	29,  // 47: sui.checkpoint.v1.SuiJsonValue.array:type_name -> sui.checkpoint.v1.ListOfJsonValues
	28,  // 48: sui.checkpoint.v1.SuiJsonValue.object:type_name -> sui.checkpoint.v1.SuiJsonValueMap
	72,  // 49: sui.checkpoint.v1.SuiJsonValueMap.map:type_name -> sui.checkpoint.v1.SuiJsonValueMap.MapEntry
	27,  // 50: sui.checkpoint.v1.ListOfJsonValues.list:type_name -> sui.checkpoint.v1.SuiJsonValue
	37,  // 51: sui.checkpoint.v1.SuiCommand.move_call:type_name -> sui.checkpoint.v1.SuiProgrammableMoveCall
	31,  // 52: sui.checkpoint.v1.SuiCommand.transfer_objects:type_name -> sui.checkpoint.v1.TransferObjectsPair
	32,  // 53: sui.checkpoint.v1.SuiCommand.split_coins:type_name -> sui.checkpoint.v1.SplitCoinsPair
	33,  // 54: sui.checkpoint.v1.SuiCommand.merge_coins:type_name -> sui.checkpoint.v1.MergeCoinsPair
	34,  // 55: sui.checkpoint.v1.SuiCommand.publish:type_name -> sui.checkpoint.v1.ListOfObjects
	36,  // 56: sui.checkpoint.v1.SuiCommand.upgrade:type_name -> sui.checkpoint.v1.SuiCommandUpgrade
	35,  // 57: sui.checkpoint.v1.SuiCommand.make_move_vec:type_name -> sui.checkpoint.v1.MakeMoveVecPair
	38,  // 58: sui.checkpoint.v1.TransferObjectsPair.one:type_name -> sui.checkpoint.v1.SuiArgument
	38,  // 59: sui.checkpoint.v1.TransferObjectsPair.two:type_name -> sui.checkpoint.v1.SuiArgument
	38,  // 60: sui.checkpoint.v1.SplitCoinsPair.one:type_name -> sui.checkpoint.v1.SuiArgument
	38,  // 61: sui.checkpoint.v1.SplitCoinsPair.two:type_name -> sui.checkpoint.v1.SuiArgument
	38,  // 62: sui.checkpoint.v1.MergeCoinsPair.one:type_name -> sui.checkpoint.v1.SuiArgument
	38,  // 63: sui.checkpoint.v1.MergeCoinsPair.two:type_name -> sui.checkpoint.v1.SuiArgument
	16,  // 64: sui.checkpoint.v1.ListOfObjects.list:type_name -> sui.checkpoint.v1.ObjectID
	38,  // 65: sui.checkpoint.v1.MakeMoveVecPair.two:type_name -> sui.checkpoint.v1.SuiArgument
	34,  // 66: sui.checkpoint.v1.SuiCommandUpgrade.one:type_name -> sui.checkpoint.v1.ListOfObjects
	16,  // 67: sui.checkpoint.v1.SuiCommandUpgrade.two:type_name -> sui.checkpoint.v1.ObjectID
	38,  // 68: sui.checkpoint.v1.SuiCommandUpgrade.three:type_name -> sui.checkpoint.v1.SuiArgument
	16,  // 69: sui.checkpoint.v1.SuiProgrammableMoveCall.package:type_name -> sui.checkpoint.v1.ObjectID
	38,  // 70: sui.checkpoint.v1.SuiProgrammableMoveCall.arguments:type_name -> sui.checkpoint.v1.SuiArgument
	83,  // 71: sui.checkpoint.v1.SuiArgument.gas_coin:type_name -> google.protobuf.Empty
	39,  // 72: sui.checkpoint.v1.SuiArgument.nested_result:type_name -> sui.checkpoint.v1.PairOfU32
	41,  // 73: sui.checkpoint.v1.SuiTransactionBlockEffects.v1:type_name -> sui.checkpoint.v1.SuiTransactionBlockEffectsV1
	45,  // 74: sui.checkpoint.v1.SuiTransactionBlockEffectsV1.status:type_name -> sui.checkpoint.v1.SuiExecutionStatus
	3,   // 75: sui.checkpoint.v1.SuiTransactionBlockEffectsV1.gas_used:type_name -> sui.checkpoint.v1.GasCostSummary
	47,  // 76: sui.checkpoint.v1.SuiTransactionBlockEffectsV1.modified_at_versions:type_name -> sui.checkpoint.v1.SuiTransactionBlockEffectsModifiedAtVersions
	13,  // 77: sui.checkpoint.v1.SuiTransactionBlockEffectsV1.shared_objects:type_name -> sui.checkpoint.v1.SuiObjectRef
	42,  // 78: sui.checkpoint.v1.SuiTransactionBlockEffectsV1.created:type_name -> sui.checkpoint.v1.OwnedObjectRef
	42,  // 79: sui.checkpoint.v1.SuiTransactionBlockEffectsV1.mutated:type_name -> sui.checkpoint.v1.OwnedObjectRef
	42,  // 80: sui.checkpoint.v1.SuiTransactionBlockEffectsV1.unwrapped:type_name -> sui.checkpoint.v1.OwnedObjectRef
	13,  // 81: sui.checkpoint.v1.SuiTransactionBlockEffectsV1.deleted:type_name -> sui.checkpoint.v1.SuiObjectRef
	13,  // 82: sui.checkpoint.v1.SuiTransactionBlockEffectsV1.unwrapped_then_deleted:type_name -> sui.checkpoint.v1.SuiObjectRef
	13,  // 83: sui.checkpoint.v1.SuiTransactionBlockEffectsV1.wrapped:type_name -> sui.checkpoint.v1.SuiObjectRef
	42,  // 84: sui.checkpoint.v1.SuiTransactionBlockEffectsV1.gas_object:type_name -> sui.checkpoint.v1.OwnedObjectRef
	43,  // 85: sui.checkpoint.v1.OwnedObjectRef.owner:type_name -> sui.checkpoint.v1.Owner
	13,  // 86: sui.checkpoint.v1.OwnedObjectRef.reference:type_name -> sui.checkpoint.v1.SuiObjectRef
	44,  // 87: sui.checkpoint.v1.Owner.shared:type_name -> sui.checkpoint.v1.Shared
	83,  // 88: sui.checkpoint.v1.Owner.immutable:type_name -> google.protobuf.Empty
	83,  // 89: sui.checkpoint.v1.SuiExecutionStatus.success:type_name -> google.protobuf.Empty
	46,  // 90: sui.checkpoint.v1.SuiExecutionStatus.failure:type_name -> sui.checkpoint.v1.Failure
	16,  // 91: sui.checkpoint.v1.SuiTransactionBlockEffectsModifiedAtVersions.object_id:type_name -> sui.checkpoint.v1.ObjectID
	49,  // 92: sui.checkpoint.v1.SuiTransactionBlockEvents.data:type_name -> sui.checkpoint.v1.SuiEvent
	50,  // 93: sui.checkpoint.v1.SuiEvent.id:type_name -> sui.checkpoint.v1.EventID
	16,  // 94: sui.checkpoint.v1.SuiEvent.package_id:type_name -> sui.checkpoint.v1.ObjectID
	26,  // 95: sui.checkpoint.v1.SuiEvent.type:type_name -> sui.checkpoint.v1.StructTag
	27,  // 96: sui.checkpoint.v1.SuiEvent.parsed_json:type_name -> sui.checkpoint.v1.SuiJsonValue
	52,  // 97: sui.checkpoint.v1.ChangedObject.status:type_name -> sui.checkpoint.v1.ObjectStatus
	53,  // 98: sui.checkpoint.v1.ChangedObject.data:type_name -> sui.checkpoint.v1.SuiObjectData
	83,  // 99: sui.checkpoint.v1.ObjectStatus.created:type_name -> google.protobuf.Empty
	83,  // 100: sui.checkpoint.v1.ObjectStatus.mutated:type_name -> google.protobuf.Empty
	83,  // 101: sui.checkpoint.v1.ObjectStatus.deleted:type_name -> google.protobuf.Empty
	83,  // 102: sui.checkpoint.v1.ObjectStatus.wrapped:type_name -> google.protobuf.Empty
	83,  // 103: sui.checkpoint.v1.ObjectStatus.unwrapped:type_name -> google.protobuf.Empty
	83,  // 104: sui.checkpoint.v1.ObjectStatus.unwrapped_then_deleted:type_name -> google.protobuf.Empty
	16,  // 105: sui.checkpoint.v1.SuiObjectData.object_id:type_name -> sui.checkpoint.v1.ObjectID
	54,  // 106: sui.checkpoint.v1.SuiObjectData.type:type_name -> sui.checkpoint.v1.ObjectType
	43,  // 107: sui.checkpoint.v1.SuiObjectData.owner:type_name -> sui.checkpoint.v1.Owner
	56,  // 108: sui.checkpoint.v1.SuiObjectData.display:type_name -> sui.checkpoint.v1.DisplayFieldsResponse
	58,  // 109: sui.checkpoint.v1.SuiObjectData.content:type_name -> sui.checkpoint.v1.SuiParsedData
	67,  // 110: sui.checkpoint.v1.SuiObjectData.bcs:type_name -> sui.checkpoint.v1.SuiRawData
	83,  // 111: sui.checkpoint.v1.ObjectType.package:type_name -> google.protobuf.Empty
	55,  // 112: sui.checkpoint.v1.ObjectType.struct:type_name -> sui.checkpoint.v1.MoveObjectType
	26,  // 113: sui.checkpoint.v1.MoveObjectType.other:type_name -> sui.checkpoint.v1.StructTag
	83,  // 114: sui.checkpoint.v1.MoveObjectType.gas_coin:type_name -> google.protobuf.Empty
	83,  // 115: sui.checkpoint.v1.MoveObjectType.staked_sui:type_name -> google.protobuf.Empty
	24,  // 116: sui.checkpoint.v1.MoveObjectType.coin:type_name -> sui.checkpoint.v1.TypeTag
	73,  // 117: sui.checkpoint.v1.DisplayFieldsResponse.data:type_name -> sui.checkpoint.v1.DisplayFieldsResponse.DataEntry
	57,  // 118: sui.checkpoint.v1.DisplayFieldsResponse.error:type_name -> sui.checkpoint.v1.SuiObjectResponseError
	74,  // 119: sui.checkpoint.v1.SuiObjectResponseError.not_exists:type_name -> sui.checkpoint.v1.SuiObjectResponseError.NotExists
	75,  // 120: sui.checkpoint.v1.SuiObjectResponseError.dynamic_field_not_found:type_name -> sui.checkpoint.v1.SuiObjectResponseError.DynamicFieldNotFound
	76,  // 121: sui.checkpoint.v1.SuiObjectResponseError.deleted:type_name -> sui.checkpoint.v1.SuiObjectResponseError.Deleted
	83,  // 122: sui.checkpoint.v1.SuiObjectResponseError.Unknown:type_name -> google.protobuf.Empty
	77,  // 123: sui.checkpoint.v1.SuiObjectResponseError.display_error:type_name -> sui.checkpoint.v1.SuiObjectResponseError.DisplayError
	59,  // 124: sui.checkpoint.v1.SuiParsedData.move_object:type_name -> sui.checkpoint.v1.SuiParsedMoveObject
	66,  // 125: sui.checkpoint.v1.SuiParsedData.package:type_name -> sui.checkpoint.v1.SuiMovePackage
	26,  // 126: sui.checkpoint.v1.SuiParsedMoveObject.type:type_name -> sui.checkpoint.v1.StructTag
	60,  // 127: sui.checkpoint.v1.SuiParsedMoveObject.fields:type_name -> sui.checkpoint.v1.SuiMoveStruct
	61,  // 128: sui.checkpoint.v1.SuiMoveStruct.runtime:type_name -> sui.checkpoint.v1.ListOfSuiMoveValues
	62,  // 129: sui.checkpoint.v1.SuiMoveStruct.with_types:type_name -> sui.checkpoint.v1.WithTypes
	63,  // 130: sui.checkpoint.v1.SuiMoveStruct.with_fields:type_name -> sui.checkpoint.v1.WithFields
	64,  // 131: sui.checkpoint.v1.ListOfSuiMoveValues.list:type_name -> sui.checkpoint.v1.SuiMoveValue
	26,  // 132: sui.checkpoint.v1.WithTypes.type:type_name -> sui.checkpoint.v1.StructTag
	78,  // 133: sui.checkpoint.v1.WithTypes.fields:type_name -> sui.checkpoint.v1.WithTypes.FieldsEntry
	79,  // 134: sui.checkpoint.v1.WithFields.fields:type_name -> sui.checkpoint.v1.WithFields.FieldsEntry
	61,  // 135: sui.checkpoint.v1.SuiMoveValue.vector:type_name -> sui.checkpoint.v1.ListOfSuiMoveValues
	65,  // 136: sui.checkpoint.v1.SuiMoveValue.UID:type_name -> sui.checkpoint.v1.UID
	60,  // 137: sui.checkpoint.v1.SuiMoveValue.struct:type_name -> sui.checkpoint.v1.SuiMoveStruct
	64,  // 138: sui.checkpoint.v1.SuiMoveValue.option:type_name -> sui.checkpoint.v1.SuiMoveValue
	16,  // 139: sui.checkpoint.v1.UID.id:type_name -> sui.checkpoint.v1.ObjectID
	80,  // 140: sui.checkpoint.v1.SuiMovePackage.disassembled:type_name -> sui.checkpoint.v1.SuiMovePackage.DisassembledEntry
	68,  // 141: sui.checkpoint.v1.SuiRawData.move_object:type_name -> sui.checkpoint.v1.SuiRawMoveObject
	69,  // 142: sui.checkpoint.v1.SuiRawData.package:type_name -> sui.checkpoint.v1.SuiRawMovePackage
	26,  // 143: sui.checkpoint.v1.SuiRawMoveObject.type:type_name -> sui.checkpoint.v1.StructTag
	16,  // 144: sui.checkpoint.v1.SuiRawMovePackage.id:type_name -> sui.checkpoint.v1.ObjectID
	81,  // 145: sui.checkpoint.v1.SuiRawMovePackage.module_map:type_name -> sui.checkpoint.v1.SuiRawMovePackage.ModuleMapEntry
	70,  // 146: sui.checkpoint.v1.SuiRawMovePackage.type_origin_table:type_name -> sui.checkpoint.v1.TypeOrigin
	82,  // 147: sui.checkpoint.v1.SuiRawMovePackage.linkage_table:type_name -> sui.checkpoint.v1.SuiRawMovePackage.LinkageTableEntry
	16,  // 148: sui.checkpoint.v1.TypeOrigin.package:type_name -> sui.checkpoint.v1.ObjectID
	16,  // 149: sui.checkpoint.v1.UpgradeInfo.upgraded_id:type_name -> sui.checkpoint.v1.ObjectID
	27,  // 150: sui.checkpoint.v1.SuiJsonValueMap.MapEntry.value:type_name -> sui.checkpoint.v1.SuiJsonValue
	16,  // 151: sui.checkpoint.v1.SuiObjectResponseError.NotExists.object_id:type_name -> sui.checkpoint.v1.ObjectID
	16,  // 152: sui.checkpoint.v1.SuiObjectResponseError.DynamicFieldNotFound.parent_object_id:type_name -> sui.checkpoint.v1.ObjectID
	16,  // 153: sui.checkpoint.v1.SuiObjectResponseError.Deleted.object_id:type_name -> sui.checkpoint.v1.ObjectID
	64,  // 154: sui.checkpoint.v1.WithTypes.FieldsEntry.value:type_name -> sui.checkpoint.v1.SuiMoveValue
	64,  // 155: sui.checkpoint.v1.WithFields.FieldsEntry.value:type_name -> sui.checkpoint.v1.SuiMoveValue
	27,  // 156: sui.checkpoint.v1.SuiMovePackage.DisassembledEntry.value:type_name -> sui.checkpoint.v1.SuiJsonValue
	71,  // 157: sui.checkpoint.v1.SuiRawMovePackage.LinkageTableEntry.value:type_name -> sui.checkpoint.v1.UpgradeInfo
	158, // [158:158] is the sub-list for method output_type
	158, // [158:158] is the sub-list for method input_type
	158, // [158:158] is the sub-list for extension type_name
	158, // [158:158] is the sub-list for extension extendee
	0,   // [0:158] is the sub-list for field type_name
}

func init() { file_sui_proto_init() }
func file_sui_proto_init() {
	if File_sui_proto != nil {
		return
	}
	if !protoimpl.UnsafeEnabled {
		file_sui_proto_msgTypes[0].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CheckpointData); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_sui_proto_msgTypes[1].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Checkpoint); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_sui_proto_msgTypes[2].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CheckpointTransactionBlockResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_sui_proto_msgTypes[3].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GasCostSummary); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_sui_proto_msgTypes[4].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*EndOfEpochData); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_sui_proto_msgTypes[5].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*NextEpochCommittee); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_sui_proto_msgTypes[6].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CheckpointCommitment); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_sui_proto_msgTypes[7].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ECMHLiveObjectSetDigest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_sui_proto_msgTypes[8].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*SuiTransactionBlock); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_sui_proto_msgTypes[9].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*SuiTransactionBlockData); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_sui_proto_msgTypes[10].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*SuiTransactionBlockDataV1); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_sui_proto_msgTypes[11].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*SuiTransactionBlockKind); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_sui_proto_msgTypes[12].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*SuiGasData); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_sui_proto_msgTypes[13].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*SuiObjectRef); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_sui_proto_msgTypes[14].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*SuiChangeEpoch); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_sui_proto_msgTypes[15].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*SuiGenesisTransaction); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_sui_proto_msgTypes[16].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ObjectID); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_sui_proto_msgTypes[17].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*SuiConsensusCommitPrologue); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_sui_proto_msgTypes[18].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*SuiProgrammableTransactionBlock); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_sui_proto_msgTypes[19].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*SuiCallArg); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_sui_proto_msgTypes[20].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*SuiObjectArg); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_sui_proto_msgTypes[21].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ImmOrOwnedObject); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_sui_proto_msgTypes[22].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*SharedObject); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_sui_proto_msgTypes[23].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*SuiPureValue); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_sui_proto_msgTypes[24].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*TypeTag); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_sui_proto_msgTypes[25].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ListOfTypeTags); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_sui_proto_msgTypes[26].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*StructTag); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_sui_proto_msgTypes[27].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*SuiJsonValue); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_sui_proto_msgTypes[28].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*SuiJsonValueMap); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_sui_proto_msgTypes[29].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ListOfJsonValues); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_sui_proto_msgTypes[30].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*SuiCommand); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_sui_proto_msgTypes[31].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*TransferObjectsPair); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_sui_proto_msgTypes[32].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*SplitCoinsPair); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_sui_proto_msgTypes[33].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*MergeCoinsPair); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_sui_proto_msgTypes[34].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ListOfObjects); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_sui_proto_msgTypes[35].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*MakeMoveVecPair); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_sui_proto_msgTypes[36].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*SuiCommandUpgrade); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_sui_proto_msgTypes[37].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*SuiProgrammableMoveCall); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_sui_proto_msgTypes[38].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*SuiArgument); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_sui_proto_msgTypes[39].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*PairOfU32); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_sui_proto_msgTypes[40].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*SuiTransactionBlockEffects); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_sui_proto_msgTypes[41].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*SuiTransactionBlockEffectsV1); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_sui_proto_msgTypes[42].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*OwnedObjectRef); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_sui_proto_msgTypes[43].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Owner); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_sui_proto_msgTypes[44].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Shared); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_sui_proto_msgTypes[45].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*SuiExecutionStatus); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_sui_proto_msgTypes[46].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Failure); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_sui_proto_msgTypes[47].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*SuiTransactionBlockEffectsModifiedAtVersions); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_sui_proto_msgTypes[48].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*SuiTransactionBlockEvents); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_sui_proto_msgTypes[49].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*SuiEvent); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_sui_proto_msgTypes[50].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*EventID); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_sui_proto_msgTypes[51].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ChangedObject); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_sui_proto_msgTypes[52].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ObjectStatus); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_sui_proto_msgTypes[53].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*SuiObjectData); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_sui_proto_msgTypes[54].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ObjectType); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_sui_proto_msgTypes[55].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*MoveObjectType); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_sui_proto_msgTypes[56].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*DisplayFieldsResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_sui_proto_msgTypes[57].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*SuiObjectResponseError); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_sui_proto_msgTypes[58].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*SuiParsedData); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_sui_proto_msgTypes[59].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*SuiParsedMoveObject); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_sui_proto_msgTypes[60].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*SuiMoveStruct); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_sui_proto_msgTypes[61].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ListOfSuiMoveValues); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_sui_proto_msgTypes[62].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*WithTypes); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_sui_proto_msgTypes[63].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*WithFields); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_sui_proto_msgTypes[64].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*SuiMoveValue); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_sui_proto_msgTypes[65].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*UID); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_sui_proto_msgTypes[66].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*SuiMovePackage); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_sui_proto_msgTypes[67].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*SuiRawData); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_sui_proto_msgTypes[68].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*SuiRawMoveObject); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_sui_proto_msgTypes[69].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*SuiRawMovePackage); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_sui_proto_msgTypes[70].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*TypeOrigin); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_sui_proto_msgTypes[71].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*UpgradeInfo); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_sui_proto_msgTypes[74].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*SuiObjectResponseError_NotExists); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_sui_proto_msgTypes[75].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*SuiObjectResponseError_DynamicFieldNotFound); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_sui_proto_msgTypes[76].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*SuiObjectResponseError_Deleted); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_sui_proto_msgTypes[77].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*SuiObjectResponseError_DisplayError); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
	}
	file_sui_proto_msgTypes[1].OneofWrappers = []interface{}{}
	file_sui_proto_msgTypes[2].OneofWrappers = []interface{}{}
	file_sui_proto_msgTypes[6].OneofWrappers = []interface{}{
		(*CheckpointCommitment_ECMHLiveObjectSetDigest)(nil),
	}
	file_sui_proto_msgTypes[9].OneofWrappers = []interface{}{
		(*SuiTransactionBlockData_V1)(nil),
	}
	file_sui_proto_msgTypes[11].OneofWrappers = []interface{}{
		(*SuiTransactionBlockKind_ChangeEpoch)(nil),
		(*SuiTransactionBlockKind_Genesis)(nil),
		(*SuiTransactionBlockKind_ConsensusCommitPrologue)(nil),
		(*SuiTransactionBlockKind_ProgrammableTransaction)(nil),
	}
	file_sui_proto_msgTypes[19].OneofWrappers = []interface{}{
		(*SuiCallArg_Object)(nil),
		(*SuiCallArg_Pure)(nil),
	}
	file_sui_proto_msgTypes[20].OneofWrappers = []interface{}{
		(*SuiObjectArg_ImmOrOwnedObject)(nil),
		(*SuiObjectArg_SharedObject)(nil),
	}
	file_sui_proto_msgTypes[23].OneofWrappers = []interface{}{}
	file_sui_proto_msgTypes[24].OneofWrappers = []interface{}{
		(*TypeTag_Bool)(nil),
		(*TypeTag_U8)(nil),
		(*TypeTag_U64)(nil),
		(*TypeTag_U128)(nil),
		(*TypeTag_Address)(nil),
		(*TypeTag_Signer)(nil),
		(*TypeTag_Vector)(nil),
		(*TypeTag_Struct)(nil),
		(*TypeTag_U16)(nil),
		(*TypeTag_U32)(nil),
		(*TypeTag_U256)(nil),
	}
	file_sui_proto_msgTypes[27].OneofWrappers = []interface{}{
		(*SuiJsonValue_Null)(nil),
		(*SuiJsonValue_Bool)(nil),
		(*SuiJsonValue_Number)(nil),
		(*SuiJsonValue_String_)(nil),
		(*SuiJsonValue_Array)(nil),
		(*SuiJsonValue_Object)(nil),
	}
	file_sui_proto_msgTypes[30].OneofWrappers = []interface{}{
		(*SuiCommand_MoveCall)(nil),
		(*SuiCommand_TransferObjects)(nil),
		(*SuiCommand_SplitCoins)(nil),
		(*SuiCommand_MergeCoins)(nil),
		(*SuiCommand_Publish)(nil),
		(*SuiCommand_Upgrade)(nil),
		(*SuiCommand_MakeMoveVec)(nil),
	}
	file_sui_proto_msgTypes[35].OneofWrappers = []interface{}{}
	file_sui_proto_msgTypes[38].OneofWrappers = []interface{}{
		(*SuiArgument_GasCoin)(nil),
		(*SuiArgument_Input)(nil),
		(*SuiArgument_Result)(nil),
		(*SuiArgument_NestedResult)(nil),
	}
	file_sui_proto_msgTypes[40].OneofWrappers = []interface{}{
		(*SuiTransactionBlockEffects_V1)(nil),
	}
	file_sui_proto_msgTypes[41].OneofWrappers = []interface{}{}
	file_sui_proto_msgTypes[43].OneofWrappers = []interface{}{
		(*Owner_AddressOwner)(nil),
		(*Owner_ObjectOwner)(nil),
		(*Owner_Shared)(nil),
		(*Owner_Immutable)(nil),
	}
	file_sui_proto_msgTypes[45].OneofWrappers = []interface{}{
		(*SuiExecutionStatus_Success)(nil),
		(*SuiExecutionStatus_Failure)(nil),
	}
	file_sui_proto_msgTypes[49].OneofWrappers = []interface{}{}
	file_sui_proto_msgTypes[52].OneofWrappers = []interface{}{
		(*ObjectStatus_Created)(nil),
		(*ObjectStatus_Mutated)(nil),
		(*ObjectStatus_Deleted)(nil),
		(*ObjectStatus_Wrapped)(nil),
		(*ObjectStatus_Unwrapped)(nil),
		(*ObjectStatus_UnwrappedThenDeleted)(nil),
	}
	file_sui_proto_msgTypes[53].OneofWrappers = []interface{}{}
	file_sui_proto_msgTypes[54].OneofWrappers = []interface{}{
		(*ObjectType_Package)(nil),
		(*ObjectType_Struct)(nil),
	}
	file_sui_proto_msgTypes[55].OneofWrappers = []interface{}{
		(*MoveObjectType_Other)(nil),
		(*MoveObjectType_GasCoin)(nil),
		(*MoveObjectType_StakedSui)(nil),
		(*MoveObjectType_Coin)(nil),
	}
	file_sui_proto_msgTypes[57].OneofWrappers = []interface{}{
		(*SuiObjectResponseError_NotExists_)(nil),
		(*SuiObjectResponseError_DynamicFieldNotFound_)(nil),
		(*SuiObjectResponseError_Deleted_)(nil),
		(*SuiObjectResponseError_Unknown)(nil),
		(*SuiObjectResponseError_DisplayError_)(nil),
	}
	file_sui_proto_msgTypes[58].OneofWrappers = []interface{}{
		(*SuiParsedData_MoveObject)(nil),
		(*SuiParsedData_Package)(nil),
	}
	file_sui_proto_msgTypes[60].OneofWrappers = []interface{}{
		(*SuiMoveStruct_Runtime)(nil),
		(*SuiMoveStruct_WithTypes)(nil),
		(*SuiMoveStruct_WithFields)(nil),
	}
	file_sui_proto_msgTypes[64].OneofWrappers = []interface{}{
		(*SuiMoveValue_Number)(nil),
		(*SuiMoveValue_Bool)(nil),
		(*SuiMoveValue_Address)(nil),
		(*SuiMoveValue_Vector)(nil),
		(*SuiMoveValue_String_)(nil),
		(*SuiMoveValue_UID)(nil),
		(*SuiMoveValue_Struct)(nil),
		(*SuiMoveValue_Option)(nil),
	}
	file_sui_proto_msgTypes[67].OneofWrappers = []interface{}{
		(*SuiRawData_MoveObject)(nil),
		(*SuiRawData_Package)(nil),
	}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: file_sui_proto_rawDesc,
			NumEnums:      0,
			NumMessages:   83,
			NumExtensions: 0,
			NumServices:   0,
		},
		GoTypes:           file_sui_proto_goTypes,
		DependencyIndexes: file_sui_proto_depIdxs,
		MessageInfos:      file_sui_proto_msgTypes,
	}.Build()
	File_sui_proto = out.File
	file_sui_proto_rawDesc = nil
	file_sui_proto_goTypes = nil
	file_sui_proto_depIdxs = nil
}
